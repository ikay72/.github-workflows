    1  vi config
    2  cd
    3  export GPG_TTY=$(tty)\nkubectl config use-context VOC_CLUSTER\nexport KUBECONFIG=~/.kube/config\nchmod 600 /home/ikay/.kube/config\n source <(kubectl completion bash)\n echo "source <(kubectl completion bash)" >> ~/.bashrc\n alias k=kubectl\ncomplete -o default -F __start_kubectl k
    4  chmod 600 ~/.kube/config
    5  k get pods
    6  kubectl config get-contexts
    7  vi Dockerfile
    8  docker build -t myjenkins .\n
    9  clear
   10  vi Dockerfile
   11  docker build -t myjenkins .\n
   12  vi Dockerfile
   13  docker build -t myjenkins .\n
   14  clear
   15  vi Dockerfile
   16  docker build -t myjenkins .\n
   17  cd
   18  ifconfig
   19  ssh -p 9052 ikay@10.150.55.102
   20  ssh -p 9052 ikay@10.150.55.103
   21  ssh -p 9052 ikay@10.150.55.101
   22  ssh -p 9052 ikay@10.150.55.102
   23  ssh -p 9052 ikay@10.150.55.103
   24  ssh -p 9052 ikay@10.150.55.101
   25  ssh -p 9052 ikay@10.150.55.103
   26  clear
   27  sudo mkdir /mnt/mtnrwanda\n
   28  mkdir /mnt/mtnrwanda
   29  mkdir /mnt
   30  mkdir mnt
   31  mkdir /mnt/mtnrwanda
   32  cd mnt
   33  mkdir mtnrwanda
   34  cd mtnrwanda
   35  pwd
   36  sudo mount -t nfs 10.150.55.103:/srv/data/nfs/staticfiles/mtnrwanda /Users/memoor/mnt/mtnrwanda\n
   37  cd
   38  sudo mkdir -p /mnt/mtnrwanda\n
   39  sudo mount -t nfs 10.150.55.103:/srv/data/nfs/staticfiles/mtnrwanda /Users/memoor/mnt/mtnrwanda\n
   40  sudo mount -t nfs -o resvport,rw 10.150.55.103:/srv/data/nfs/staticfiles/mtnrwanda /Users/memoor/mnt/mtnrwanda\n
   41  mount | grep mtnrwanda\n
   42  ls /mnt/mtnrwanda\n
   43  ls /Users/memoor/mnt/mtnrwanda\n
   44  file /Users/memoor/mnt/mtnrwanda/MTN_Logo_White_280x160.png\n
   45  cp /Users/memoor/mnt/mtnrwanda/MTN_Logo_White_280x160.png ~/Desktop/\n
   46  sudo umount /Users/memoor/mnt/mtnrwanda\n
   47  ls /Users/memoor/mnt/mtnrwanda\n
   48  \n
   49  clear
   50  ssh -L 8080:10.150.55.103:80 ikay@bastionsrv -N
   51  ssh -L 8080:10.150.55.102:80 ikay@bastionsrv -N
   52  ssh -p 9052 ikay@10.150.55.102
   53  \n
   54  clear
   55  ssh -L 8080:10.150.55.102:80 ikay@10.150.55.102 -N\n
   56  ssh -L 8080:10.150.55.103:80 -p 9052 ikay@10.150.55.102 -N\n
   57  clear
   58  ssh -L 8080:10.150.55.102:80 -p 9052 ikay@10.150.55.102 -N\n
   59  ssh -L 8080:10.150.55.103:80 -p 9052 ikay@10.150.55.102 -N\n
   60  ssh -p 9052 ikay@10.150.55.103
   61  ssh -p 9052 ikay@10.150.55.102
   62  clear
   63  ssh -L 8080:10.157.11.85:80 -p 9052 ikay@10.150.55.102 -N\n
   64  ssh -p 9052 ikay@10.150.55.102
   65  nslookup mtnrwanda-astra.mtn.co.rw
   66  ping mtnrwanda-astra.mtn.co.rw
   67  ping https://mtnrwanda-survey.mtn.co.rw
   68  nslookup mtnrwanda-survey.mtn.co.rw
   69  ping mtnrwanda-survey.mtn.co.rw
   70  ping mtnrwanda-vochub.mtn.co.rw
   71  ssh -p 9052 ikay@10.150.55.102
   72  ssh -p 9052 ikay@10.150.55.103
   73  ssh -p 9052 ikay@10.150.55.101
   74  ping mtn-rwanda-survey.sandsiv.com
   75  ping 10.150.55.103\n
   76  ssh -p 9052 ikay@10.150.55.103
   77  ssh -p 9052 ikay@10.150.55.102
   78  ssh -p 9052 ikay@10.150.55.103
   79  ssh -p 9052 ikay@10.150.55.102
   80  curl -I http://static-staging.mtn.co.rw/mtnrwanda/MTN_LindedIn.png\n
   81  curl -I https://mtnrwanda-survey.mtn.co.rw/\n
   82  curl -Iv https://mtnrwanda-survey.mtn.co.rw/
   83  curl -Iv http://mtnrwanda-survey.mtn.co.rw/
   84  curl -Iv https://mtnrwanda-astra.mtn.co.rw/
   85  curl -I https://mtnrwanda-astra.mtn.co.rw/
   86  cat server.crt intermediate.crt > fullchain.crt\n
   87  ssh -p 9052 ikay@10.150.55.102
   88  ssh -p 9052 ikay@10.150.55.101
   89  clear
   90  ssh -p 9052 ikay@10.150.55.102
   91  ssh -p 9052 ikay@10.150.55.101
   92  clear
   93  ssh -p 9052 ikay@10.150.55.100
   94  ssh -p 9052 ikay@10.150.55.101
   95  ssh -p 9052 ikay@10.150.55.102
   96  ssh -p 9052 ikay@10.150.55.101
   97  ssh -p 9052 ikay@10.150.55.102
   98  clear
   99  ssh -p 9052 ikay@10.150.55.101
  100  ssh -p 9052 ikay@10.150.55.102
  101  clear
  102  ssh -p 9052 ikay@10.150.55.102
  103  ssh -p 9052 ikay@10.150.55.101
  104  ssh -p 9052 ikay@10.150.55.102
  105  clear
  106  ssh -p 9052 ikay@10.150.55.101
  107  ssh -p 9052 ikay@10.150.55.102
  108  ssh -p 9052 ikay@10.150.55.101
  109  ssh -p 9052 ikay@10.150.55.102
  110  clear
  111  ssh -p 9052 ikay@10.150.55.102
  112  clear
  113  ssh -p 9052 ikay@10.150.55.102
  114  ssh -p 9052 ikay@10.150.55.101
  115  ssh -p 9052 ikay@10.150.55.102
  116  ssh -p 9052 ikay@10.150.55.101
  117  ssh -p 9052 ikay@10.150.55.102
  118  clear
  119  ssh -p 9052 ikay@10.150.55.101
  120  ssh -p 9052 ikay@10.150.55.102
  121  ssh -p 9052 ikay@10.150.55.101
  122  ssh -p 9052 ikay@10.150.55.102
  123  ssh -p 9052 ikay@10.150.55.101
  124  ssh -p 9052 ikay@10.150.55.102
  125  CLEAR
  126  ssh -p 9052 ikay@10.150.55.102
  127  clear
  128  ssh -p 9052 ikay@10.150.55.101
  129  ssh -p 9052 ikay@10.150.55.102
  130  ssh -p 9052 ikay@10.150.55.101
  131  ssh -p 9052 ikay@10.150.55.102
  132  clear
  133  ssh -p 9052 ikay@10.150.55.102
  134  ssh -p 9052 ikay@10.150.55.101
  135  ssh -p 9052 ikay@10.150.55.102
  136  ssh -p 9052 ikay@10.150.55.101
  137  ssh -p 9052 ikay@10.150.55.102
  138  clear
  139  ssh -p 9052 ikay@10.150.55.101
  140  ssh -p 9052 ikay@10.150.55.102
  141  clear
  142  ssh -p 9052 ikay@10.150.55.102
  143  ssh -p 9052 ikay@10.150.55.101
  144  ssh -p 9052 ikay@10.150.55.102
  145  clear
  146  ssh -p 9052 ikay@10.150.55.101
  147  ssh -p 9052 ikay@10.150.55.102
  148  clear
  149  ssh -p 9052 ikay@10.150.55.102
  150  clear
  151  ssh -p 9052 ikay@10.150.55.102
  152  ssh -p 9052 ikay@10.150.55.101
  153  clear
  154  ssh -p 9052 ikay@10.150.55.102
  155  ssh -p 9052 ikay@10.150.55.101
  156  ssh -p 9052 ikay@10.150.55.102
  157  ssh -p 9052 ikay@10.150.55.101
  158  ssh -p 9052 ikay@10.150.55.102
  159  ssh -p 9052 ikay@10.150.55.101
  160  ssh -p 9052 ikay@10.150.55.102
  161  ssh -p 9052 ikay@10.150.55.103
  162  ssh -p 9052 ikay@10.150.55.102
  163  ssh -p 9052 ikay@10.150.55.101
  164  ssh -p 9052 ikay@10.150.55.102
  165  ssh -p 9052 ikay@10.150.55.103
  166  ssh -p 9052 ikay@10.150.55.101
  167  ssh -p 9052 ikay@10.150.55.102
  168  clear
  169  ssh -p 9052 ikay@10.150.55.103
  170  ssh -p 9052 ikay@10.150.55.101
  171  ssh -p 9052 ikay@10.150.55.102
  172  ssh -p 9052 ikay@10.150.55.103
  173  ssh -p 9052 ikay@10.150.55.101
  174  ssh -p 9052 ikay@10.150.55.103
  175  ssh -p 9052 ikay@10.150.55.102
  176  ssh -p 9052 ikay@10.150.55.101
  177  clear
  178  ssh -p 9052 ikay@10.150.55.102
  179  LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 40 ; echo\n
  180  openssl rand -base64 30 | tr -d /=+ | cut -c -40\n
  181  ssh -i  /Users/memoor/Downloads/BastionHostKP.pem ubuntu@102.216.134.11
  182  ssh -p 9052 ikay@10.150.55.102
  183  clear
  184  ssh -p 9052 ikay@10.150.55.102
  185  vlear
  186  clear
  187  ssh -p 9052 ikay@10.150.55.102
  188  ssh -p 9052 ikay@10.150.55.101
  189  clear
  190  ssh -p 9052 ikay@10.150.55.103
  191  ssh -p 9052 ikay@10.150.55.101
  192  ssh -p 9052 ikay@10.150.55.102
  193  ssh -p 9052 ikay@10.150.55.101
  194  clear
  195  ssh -p 9052 ikay@10.150.55.103
  196  clear
  197  ssh -p 9052 ikay@10.150.55.102
  198  clear
  199  ssh -p 9052 ikay@10.150.55.101
  200  ssh -p 9052 ikay@10.150.55.102
  201  clear
  202  ssh -p 9052 ikay@10.150.55.102
  203  clear
  204  ssh -p 9052 ikay@10.150.55.101
  205  ssh -p 9052 ikay@10.150.55.102
  206  clear
  207  ssh -p 9052 ikay@10.150.55.102
  208  ssh -i  /Users/memoor/Downloads/BastionHostKP.pem ubuntu@102.216.134.11
  209  clear
  210  ssh -p 9052 ikay@10.150.55.103
  211  clea
  212  clear
  213  ssh -p 9052 ikay@10.150.55.101
  214  ssh -p 9052 ikay@10.150.55.102
  215  ssh -p 9052 ikay@10.150.55.101
  216  clear
  217  ssh -p 9052 ikay@10.150.55.102
  218  ssh -p 9052 ikay@10.150.55.101
  219  clear
  220  ssh -p 9052 ikay@10.150.55.102
  221  clear
  222  ssh -p 9052 ikay@10.150.55.102
  223  clear
  224  ssh -p 9052 ikay@10.150.55.102
  225  clear
  226  ssh -p 9052 ikay@10.150.55.101
  227  clear
  228  ssh -p 9052 ikay@10.150.55.102
  229  ssh -p 9052 ikay@10.150.55.101
  230  clear
  231  ssh -p 9052 ikay@10.150.55.102
  232  clear
  233  ssh -p 9052 ikay@10.150.55.102
  234  clear
  235  ssh -p 9052 ikay@10.150.55.102
  236  ssh -p 9052 ikay@10.150.55.103
  237  clear
  238  ssh -p 9052 ikay@10.150.55.103
  239  ssh -p 9052 ikay@10.150.55.101
  240  ssh -p 9052 ikay@10.150.55.103
  241  ssh -p 9052 ikay@10.150.55.101
  242  clear
  243  ssh -p 9052 ikay@10.150.55.103
  244  ssh -p 9052 ikay@10.150.55.101
  245  ssh -p 9052 ikay@10.150.55.102
  246  ssh -p 9052 ikay@10.150.55.103
  247  ssh -p 9052 ikay@10.150.55.102
  248  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672 
  249  ssh -p 9052 ikay@10.150.55.102
  250  ssh -p 9052 ikay@10.150.55.101
  251  ssh -p 9052 ikay@10.150.55.103
  252  ssh -p 9052 ikay@10.150.55.101
  253  clear
  254  ssh -p 9052 ikay@10.150.55.101
  255  ssh -p 9052 ikay@10.150.55.102
  256  ssh -p 9052 ikay@10.150.55.102 -L 8080:localhost:8080 
  257  ssh -p 9052 ikay@10.150.55.102
  258  clear
  259  ssh -p 9052 ikay@10.150.55.102
  260  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  261  cd Downloads
  262  pwd
  263  scp -r -P 9052 /Users/memoor/Downloads/star_mtn_co_rw_389190235 ikay@10.150.55.102:~\n
  264  clear
  265  ssh -p 9052 ikay@10.150.55.102
  266  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  267  ssh -p 9052 ikay@10.150.55.102 
  268  clear
  269  ssh -p 9052 ikay@10.150.55.102 
  270  clear
  271  ssh -p 9052 ikay@10.150.55.102 
  272  clear
  273  ssh -p 9052 ikay@10.150.55.102 
  274  clear
  275  ssh -p 9052 ikay@10.150.55.102 
  276  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  277  ssh -p 9052 ikay@10.150.55.102 
  278  clear
  279  ssh -p 9052 ikay@10.150.55.102 
  280  clear
  281  ssh -p 9052 ikay@10.150.55.102 
  282  clear
  283  ssh -p 9052 ikay@10.150.55.102 
  284  clear
  285  ssh -p 9052 ikay@10.150.55.102 
  286  clear
  287  ssh -p 9052 ikay@10.150.55.101
  288  clear
  289  ssh -p 9052 ikay@10.150.55.103
  290  ssh -p 9052 ikay@10.150.55.102 
  291  clear
  292  ssh -p 9052 ikay@10.150.55.102 
  293  ssh -p 9052 ikay@10.150.55.102 -L 3000:localhost:3000
  294  ssh -p 9052 ikay@10.150.55.102 -L 9090:localhost:9090
  295  ssh -p 9052 ikay@10.150.55.102 
  296  ssh -p 9052 ikay@10.150.55.101
  297  ssh -p 9052 ikay@10.150.55.102 -L 9090:localhost:9090
  298  ssh -p 9052 ikay@10.150.55.102 
  299  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  300  ssh -p 9052 ikay@10.150.55.102 
  301  ssh -p 9052 ikay@10.150.55.103
  302  ssh -p 9052 ikay@10.150.55.102 
  303  clear
  304  ssh -p 9052 ikay@10.150.55.102 
  305  clear
  306  ssh -p 9052 ikay@10.150.55.102 
  307  clear
  308  ssh -p 9052 ikay@10.150.55.102 
  309  clear
  310  ssh -p 9052 ikay@10.150.55.102 
  311  clear
  312  ssh -p 9052 ikay@10.150.55.102 
  313  clear
  314  ssh -p 9052 ikay@10.150.55.102 
  315  cd
  316  clear
  317  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n
  318  brew install swaks\n
  319  clear
  320  swaks --to ikay.chigozie@tretennetworks.com --from CustomerFeedback.Rw@mtn.com --server 52.101.68.5 --port 25 --auth LOGIN --auth-user 'CustomerFeedback.Rw@mtn.com' --auth-password 'vK/23lkz&3m)7}3'
  321  swaks --to ikay.chigozie@tretennetworks.com --from CustomerFeedback.Rw@mtn.com --server 52.101.68.5 --port 587 --auth LOGIN --auth-user 'CustomerFeedback.Rw@mtn.com' --auth-password 'vK/23lkz&3m)7}3' --tls\n
  322  ssh -p 9052 ikay@10.150.55.102 
  323  clear
  324  ssh -p 9052 ikay@10.150.55.102 
  325  swaks --to ikay.chigozie@tretennetworks.com --from CustomerFeedback.Rw@mtn.com --server 52.101.68.5 --port 25 --auth LOGIN --auth-user 'CustomerFeedback.Rw@mtn.com' --auth-password 'vK/23lkz&3m)7}3'
  326  clear
  327  scp -r -P 9052 /Users/memoor/Downloads/kannel-snapshot.tar.gz ikay@10.150.55.102:~\n
  328  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n
  329  brew install autoconf automake libtool bison flex libxml2\n
  330  ./configure --with-mysql=no --with-sdl=no --with-pgsql=no\nmake\nsudo make install\n
  331  ls
  332  cd download
  333  cd
  334  clear
  335  cd Downloads
  336  tar -xvzf kannel-snapshot.tar.gz
  337  cd kannel-snapshot
  338  ls
  339  ./configure --with-mysql=no --with-sdl=no --with-pgsql=no\nmake\nsudo make install\n
  340  ls
  341  ./bootstrap.sh\n
  342  ./configure --with-mysql=no --with-sdl=no --with-pgsql=no\nmake\nsudo make install\n
  343  xcode-select --install\n
  344  brew install libxml2 lzma icu4c\n
  345  export LDFLAGS="-L/opt/homebrew/lib"\nexport CPPFLAGS="-I/opt/homebrew/include"\nexport PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig"\n
  346  ./configure --with-mysql=no --with-sdl=no --with-pgsql=no\nmake\nsudo make install\n
  347  make clean\n
  348  brew info libxml2 lzma icu4c\n
  349  export LDFLAGS="-L/opt/homebrew/lib"\nexport CPPFLAGS="-I/opt/homebrew/include"\nexport PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig"\n
  350  make clean\n
  351  conda deactivate\n
  352  export PATH=/opt/homebrew/bin:/opt/homebrew/sbin:$PATH\n
  353  make clean\n
  354  clear
  355  ./configure --with-mysql=no --with-sdl=no --with-pgsql=no\nmake\nsudo make install\n
  356  cd doc\nls userguide alligata wtls\n
  357  brew install docbook-xsl docbook libxml2 libxslt\n
  358  cd ..
  359  ls
  360  clear
  361  ./bearerbox -v 1 kannel.conf &\n./smsbox -v 1 kannel.conf &\n
  362  ls
  363  which bearerbox\nwhich smsbox\n
  364  /usr/local/sbin/bearerbox -v 1 /path/to/kannel.conf &\n/usr/local/sbin/smsbox -v 1 /path/to/kannel.conf &\n
  365  export PATH=$PATH:/usr/local/sbin\n
  366  which bearerbox\nwhich smsbox\n
  367  clear
  368  sudo find / -type f -name "kannel.conf"\n
  369  clear
  370  sudo vi /usr/local/share/doc/kannel/examples/kannel.conf
  371  bearer -v 1 /usr/local/share/doc/kannel/examples/kannel.conf
  372  bearerbox -v 1 /usr/local/share/doc/kannel/examples/kannel.conf
  373  smsbox -v 1 /usr/local/share/doc/kannel/examples/kannel.conf
  374  sudo vi /usr/local/share/doc/kannel/examples/kannel.conf
  375  bearerbox -v 1 /usr/local/share/doc/kannel/examples/kannel.conf
  376  clear
  377  sudo vi /usr/local/share/doc/kannel/examples/kannel.conf
  378  bearerbox -v 1 /usr/local/share/doc/kannel/examples/kannel.conf
  379  sudo vi /usr/local/share/doc/kannel/examples/kannel.conf
  380  bearerbox -v 1 /usr/local/share/doc/kannel/examples/kannel.conf
  381  sudo vi /usr/local/share/doc/kannel/examples/kannel.conf
  382  bearerbox -v 1 /usr/local/share/doc/kannel/examples/kannel.conf
  383  sudo vi /usr/local/share/doc/kannel/examples/kannel.conf
  384  bearerbox -v 1 /usr/local/share/doc/kannel/examples/kannel.conf
  385  clear
  386  sudo vi /usr/local/share/doc/kannel/examples/kannel.conf
  387  bearerbox -v 1 /usr/local/share/doc/kannel/examples/kannel.conf
  388  sudo vi /usr/local/share/doc/kannel/examples/kannel.conf
  389  mv /usr/local/share/doc/kannel/examples/kannel.conf
  390  mv /usr/local/share/doc/kannel/examples/kannel.conf /usr/local/share/doc/kannel/examples/kannel.conf-backup
  391  sudo mv /usr/local/share/doc/kannel/examples/kannel.conf /usr/local/share/doc/kannel/examples/kannel.conf-backup
  392  sudo vi /usr/local/share/doc/kannel/examples/kannel.conf
  393  bearerbox -v 1 /usr/local/share/doc/kannel/examples/kannel.conf
  394  sudo mkdir -p /var/lib/kannel
  395  sudo chown kannel:kannel /var/lib/kannel
  396  sudo chmod 755 /var/lib/kannel\n
  397  store-location = "/var/lib/kannel/kannel.store"\n
  398  bearerbox -v 1 /usr/local/share/doc/kannel/examples/kannel.conf
  399  smsbox -v 1 /usr/local/share/doc/kannel/examples/kannel.conf
  400  sudo vi /usr/local/share/doc/kannel/examples/kannel.conf-backup
  401  ssh -p 9052 ikay@10.150.55.102 
  402  clear
  403  ssh -p 9052 ikay@10.150.55.102 
  404  ssh -p 9052 ikay@10.150.55.100
  405  clear
  406  ssh -p 9052 ikay@10.150.55.102 
  407  clear
  408  ssh -p 9052 ikay@10.150.55.102 
  409  clear
  410  ssh -p 9052 ikay@10.150.55.102 
  411  clear
  412  ssh -p 9052 ikay@10.150.55.102 
  413  cd
  414  clear
  415  scp ssh -p 9052 ikay@10.150.55.102:/home/ikay/smpp_capture.pcap /downloads
  416  scp ssh -p 9052 ikay@10.150.55.102:/home/ikay/smpp_capture.pcap Downloads
  417  scp -P 9052 ikay@10.150.55.102:/home/ikay/smpp_capture.pcap ~/Downloads/\n
  418  scp -P 9052 ikay@10.150.55.102:/home/ikay/smpp_capture_all.pcap ~/Downloads/\n
  419  clear
  420  brew update\n
  421  brew install --cask wireshark\n
  422  open /Applications/Wireshark.app\n
  423  ssh -p 9052 ikay@10.150.55.101
  424  ssh -p 9052 ikay@10.150.55.100
  425  clear
  426  ssh -p 9052 ikay@10.150.55.102
  427  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  428  clear
  429  ssh -p 9052 ikay@10.150.55.102 
  430  clear
  431  ssh -p 9052 ikay@10.150.55.102 
  432  clear
  433  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  434  telnet smtp.office365.com 587\n
  435  nslookup smtp.office365.com\n
  436  openssl s_client -starttls smtp -crlf -connect smtp.office365.com:587\n
  437  EHLO tretennetworks.ca\n
  438  openssl s_client -starttls smtp -crlf -connect smtp.office365.com:587\n
  439  clear
  440  openssl s_client -starttls smtp -crlf -connect smtp.office365.com:587\n
  441  def encode_password(R1ckm0dee$):\n    return base64.b64encode(password.encode()).decode()
  442  password_placeholder = ‘R1ckm0dee$’\n
  443  def encode_password(R1ckm0dee$):\n    return base64.b64encode(password.encode()).decode()
  444  python -c "import base64; print(base64.b64encode('R1ckm0dee$'.encode()).decode())"\n
  445  clear
  446  openssl s_client -starttls smtp -crlf -connect smtp.office365.com:587\n
  447  read R BLOCK\nEHLO tretennetworks.ca\n250-JN3P275CA0025.outlook.office365.com Hello [198.166.109.120]\n250-SIZE 157286400\n250-PIPELINING\n250-DSN\n250-ENHANCEDSTATUSCODES\n250-AUTH LOGIN XOAUTH2\n250-8BITMIME\n250-BINARYMIME\n250-CHUNKING\n250 SMTPUTF8\nAUTH LOGIN\n334 VXNlcm5hbWU6\naWtheS5paGVtZWxhbmR1QHRyZXRlbm5ldHdvcmtzLmNh\n334 UGFzc3dvcmQ6\nUjFja20wZGVlJA==\n535 5.7.139 Authentication unsuccessful, SmtpClientAuthentication is disabled for the Tenant. Visit https://aka.ms/smtp_auth_disabled for more information. [JN3P275CA0025.ZAFP275.PROD.OUTLOOK.COM 2024-02-18T18:57:04.887Z 08DC3006A4DC62E8]\n451 4.7.0 Timeout waiting for client input [JN3P275CA0025.ZAFP275.PROD.OUTLOOK.COM 2024-02-18T19:02:05.593Z 08DC3006A4DC62E8
  448  clear
  449  openssl s_client -starttls smtp -crlf -connect smtp.office365.com:587\n
  450  clear
  451  openssl s_client -starttls smtp -connect smtp.office365.com:587\n
  452  clear
  453  ssh -p 9052 ikay@10.150.55.102 
  454  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  455  ssh -p 9052 ikay@10.150.55.102 
  456  clear
  457  ssh -p 9052 ikay@10.150.55.102 
  458  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  459  ssh -p 9052 ikay@10.150.55.102 
  460  clear
  461  openssl s_client -starttls smtp -connect mtn-co-rw.mail.protection.outlook.com\n
  462  telnet mtn-co-rw.mail.protection.outlook.com
  463  brew install telnet
  464  telnet mtn-co-rw.mail.protection.outlook.com
  465  ping mtn-co-rw.mail.protection.outlook.com
  466  clear
  467  openssl s_client -connect mtn-co-rw.mail.protection.outlook.com:25 -starttls smtp\n
  468  ssh -p 9052 ikay@10.150.55.102 
  469  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  470  ssh -p 9052 ikay@10.150.55.102 
  471  openssl s_client -starttls smtp -connect smtp.office365.com:587
  472  ssh -p 9052 ikay@10.150.55.102 
  473  clear
  474  scp -P 9052 ikay@10.150.55.102:/home/ikay/smpp_capture.pcap ~/Downloads/\n
  475  ssh -p 9052 ikay@10.150.55.102 
  476  ssh -p 9052 ikay@10.150.55.102
  477  ssh -p 9052 ikay@10.150.55.102 
  478  ssh -p 9052 ikay@10.150.55.102
  479  ssh -p 9052 ikay@10.150.55.102 
  480  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  481  ssh -p 9052 ikay@10.150.55.102 
  482  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  483  ssh -p 9052 ikay@10.150.55.102 
  484  clear
  485  ssh -p 9052 ikay@10.150.55.102 
  486  openssl s_client -starttls smtp -connect smtp.office365.com:587
  487  openssl s_client -connect mtn-co-rw.mail.protection.outlook.com:25 -starttls smtp
  488  telnet smtp.office365.com 587
  489  telnet mtn-co-rw.mail.protection.outlook.com:25 
  490  clear
  491  nslookup mtn-co-rw.mail.protection.outlook.com
  492  telnet mtn-co-rw.mail.protection.outlook.com 25\n
  493  clear
  494  ssh -p 9052 ikay@10.150.55.102 
  495  ssh -p 9052 ikay@10.150.55.102
  496  ssh -p 9052 ikay@10.150.55.102 
  497  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  498  clear
  499  pwd
  500  cd Downloads
  501  vim cacert.crt
  502  pwd
  503  cd
  504  curl --cacert /Users/memoor/Downloads https://keda-operator-metrics-apiserver.default.svc.cluster.local:6443\n
  505  curl --cacert /Users/memoor/Downloads/cacert.crt https://localhost:8443\n
  506  telnet localhost 8443\n
  507  nc -zv localhost 8443\n
  508  ssh -p 9052 ikay@10.150.55.102 
  509  cd Downloads
  510  clear
  511  curl -v voc-mtn.mtn.co.rw
  512  curl -v voc-mtn.mtn.co.rw --ca
  513  curl -v voc-mtn.mtn.co.rw:8443
  514  curl -v voc-mtn.mtn.co.rw:8443 --CAfile cacert.crt
  515  curl -v https://voc-mtn.mtn.co.rw:8443 --cacert cacert.crt\n
  516  curl -v https://mtn-co-rw.mail.protection.outlook.com on port:25 --cacert cacert.crt\n
  517  curl -v https://mtn-co-rw.mail.protection.outlook.com on port:443 --cacert cacert.crt\n
  518  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  519  clear
  520  ssh -p 9052 ikay@10.150.55.102 
  521  curl -v https://10.157.11.147:5672 --cacert cacert.crt\n
  522  curl -v https://10.157.11.85 --cacert cacert.crt\n
  523  curl -v https://10.157.11.85 \n
  524  clear
  525  curl -v rabbitmq.default.svc.cluster.local. --cacert cacert.crt\n
  526  curl -v  http://127.0.0.1:15672 --cacert cacert.crt\n
  527  ssh -p 9052 ikay@10.150.55.102 
  528  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  529  clear
  530  ssh -p 9052 ikay@10.150.55.102 
  531  clea
  532  clear
  533  ssh -p 9052 ikay@10.150.55.102 
  534  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  535  ssh -p 9052 ikay@10.150.55.102 
  536  ssh -p 9052 ikay@10.150.55.103
  537  clear
  538  ssh -p 9052 ikay@10.150.55.102 
  539  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  540  ssh -p 9052 ikay@10.150.55.102 
  541  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  542  clear
  543  pip install smpplib\n
  544  sudo vi send_test_sms.py
  545  python send_test_sms.py\n
  546  clear
  547  sudo vi send_test_sms.py
  548  python send_test_sms.py\n
  549  sudo vi send_test_sms.py
  550  python send_test_sms.py\n
  551  sudo vi send_test_sms.py
  552  python send_test_sms.py\n
  553  sudo vi send_test_sms.py
  554  python send_test_sms.py\n
  555  sudo vi send_test_sms.py
  556  python send_test_sms.py\n
  557  sudo vi send_test_sms.py
  558  python send_test_sms.py\n
  559  sudo vi send_test_sms.py
  560  python send_test_sms.py\n
  561  sudo vi send_test_sms.py
  562  ssh -p 9052 ikay@10.150.55.102
  563  ssh -p 9052 ikay@10.150.55.102 
  564  cd
  565  ssh -p 9052 ikay@10.150.55.102 
  566  clear
  567  ssh -p 9052 ikay@10.150.55.102 
  568  ssh -p 9052 ikay@10.150.55.102
  569  clear
  570  ssh -p 9052 ikay@10.150.55.102
  571  ssh -p 9052 ikay@10.150.55.102 
  572  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  573  clear
  574  ssh -p 9052 ikay@10.150.55.102 
  575  clear
  576  ssh -p 9052 ikay@10.150.55.102 
  577  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  578  openssl rand -base64 32\n
  579  ssh -p 9052 ikay@10.150.55.102 
  580  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  581  ssh -p 9052 ikay@10.150.55.102 
  582  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  583  ssh -p 9052 ikay@10.150.55.102
  584  ssh -p 9052 ikay@10.150.55.102 
  585  ssh -p 9052 ikay@10.150.55.102 -L 8080:localhost:8080
  586  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  587  ssh -p 9052 ikay@10.150.55.102
  588  ssh -p 9052 ikay@10.150.55.102 
  589  ssh -p 9052 ikay@10.150.55.102
  590  ssh -p 9052 ikay@10.150.55.102 
  591  ssh -p 9052 ikay@10.150.55.102
  592  ssh -p 9052 ikay@10.150.55.102 
  593  cle
  594  clear
  595  ssh -p 9052 ikay@10.150.55.102 
  596  clear
  597  ssh -p 9052 ikay@10.150.55.102 
  598  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  599  ssh -p 9052 ikay@10.150.55.102
  600  ssh -p 9052 ikay@10.150.55.102 
  601  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  602  ssh -p 9052 ikay@10.150.55.102 
  603  clear
  604  ssh -p 9052 ikay@10.150.55.102 
  605  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  606  ssh -p 9052 ikay@10.150.55.102 
  607  clear
  608  ssh -p 9052 ikay@10.150.55.102 
  609  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  610  ssh -p 9052 ikay@10.150.55.102 
  611  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  612  ssh -p 9052 ikay@10.150.55.102 
  613  clear
  614  ssh -p 9052 ikay@10.150.55.102 
  615  clear
  616  ssh -p 9052 ikay@10.150.55.102 
  617  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  618  ssh -p 9052 ikay@10.150.55.102 
  619  clear
  620  git clone instana/robot-shop
  621  git clone https://github.com/instana/robot-shop.git
  622  ls
  623  cd Kubernetes-Projects
  624  ls
  625  cd
  626  cd DevOps
  627  ls
  628  cd 
  629  cd IdeaProjects
  630  ls
  631  ssh -p 9052 ikay@10.150.55.102 
  632  cd
  633  clear
  634  brew install derailed/k9s/k9s
  635  brew install k9s
  636  k9s version
  637  k9s --context coolCtx
  638  cd Downloads
  639  pwd
  640  scp /Users/memoor/Downloads/k9s_Linux_arm64.tar.gz ssh -p 9052 ikay@10.150.55.102: /home/ikay
  641  scp /Users/memoor/Downloads/k9s_Linux_arm64.tar.gz ssh -p 9052 ikay@10.150.55.102: /home/
  642  scp /Users/memoor/Downloads/k9s_Linux_arm64.tar.gz ssh -p 9052 ikay@10.150.55.102: /home/ikay/k9s
  643  scp -P 9052 /Users/memoor/Downloads/k9s_Linux_arm64.tar.gz ikay@10.150.55.102:/home/ikay/\n
  644  scp -P 9052 /Users/memoor/Downloads/k9s_Linux_amd64.tar.gz ikay@10.150.55.102:/home/ikay/\n
  645  ssh -p 9052 ikay@10.150.55.102 
  646  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  647  ssh -p 9052 ikay@10.150.55.102 
  648  ssh -p 9052 ikay@10.150.55.101
  649  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  650  ssh -p 9052 ikay@10.150.55.102 
  651  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  652  ssh -p 9052 ikay@10.150.55.102 
  653  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  654  ssh -p 9052 ikay@10.150.55.102 
  655  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  656  ssh -p 9052 ikay@10.150.55.102 
  657  openssl s_client -connect smtp.office365.com:587 -starttls smtp\n
  658  openssl s_client -connect connect to mtn-co-rw.mail.protection.outlook.com:25 -starttls smtp\n
  659  openssl s_client -connect connect to mtn-co-rw.mail.protection.outlook.com:587 -starttls smtp\n
  660  openssl s_client -connect mtn-co-rw.mail.protection.outlook.com:25 -starttls smtp\n
  661  openssl s_client -connect smtp.office365.com:587 -starttls smtp\n
  662  ssh -p 9052 ikay@10.150.55.102 
  663  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  664  ssh -p 9052 ikay@10.150.55.102 
  665  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  666  ssh -p 9052 ikay@10.150.55.102 
  667  ping smtp.office365.com
  668  ssh -p 9052 ikay@10.150.55.102 
  669  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  670  ssh -p 9052 ikay@10.150.55.102 
  671  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  672  ssh -p 9052 ikay@10.150.55.102 
  673  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  674  ssh -p 9052 ikay@10.150.55.102 
  675  openssl s_client -connect mtn-co-rw.mail.protection.outlook.com:25 -starttls smtp\n
  676  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  677  ssh -p 9052 ikay@10.150.55.102 
  678  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  679  ssh -p 9052 ikay@10.150.55.102 
  680  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  681  ssh -p 9052 ikay@10.150.55.102 
  682  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  683  ssh -p 9052 ikay@10.150.55.102 
  684  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  685  ssh -p 9052 ikay@10.150.55.102 wq
  686  ssh -p 9052 ikay@10.150.55.102 
  687  clear
  688  ssh -p 9052 ikay@10.150.55.102 
  689  clear
  690  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  691  clear
  692  ssh -p 9052 ikay@10.150.55.102 
  693  clear
  694  ssh -p 9052 ikay@10.150.55.102 
  695  clear
  696  ssh -p 9052 ikay@10.150.55.102 
  697  clear
  698  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  699  ssh -p 9052 ikay@10.150.55.102 
  700  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  701  ssh -p 9052 ikay@10.150.55.102 
  702  ssh -p 9052 ikay@10.150.55.102 -L 15672:localhost:15672
  703  clear
  704  ssh -p 9052 ikay@10.150.55.102 
  705  clear
  706  ssh -p 9052 ikay@10.150.55.102 
  707  clear
  708  ssh -p 9052 ikay@10.150.55.102 
  709  clear
  710  ssh -p 9052 ikay@10.150.55.102 
  711  ssh -p 9052 ikay@10.150.55.100
  712  ssh -p 9052 ikay@10.150.55.102
  713  ssh -p 9052 ikay@10.150.55.100
  714  clear
  715  ssh -p 9052 ikay@10.150.55.102
  716  clear
  717  ssh -p 9052 ikay@10.150.55.102
  718  ssh -p 9052 ikay@10.150.55.102 
  719  ssh -p 9052 ikay@10.150.55.100
  720  clear
  721  ssh -p 9052 ikay@10.150.55.102
  722  clear
  723  ssh -p 9052 ikay@10.150.55.102
  724  ssh -p 9052 ikay@10.150.55.102 
  725  ssh -p 9052 ikay@10.150.55.103
  726  clear
  727  ssh -p 9052 ikay@10.150.55.10e
  728  ssh -p 9052 ikay@10.150.55.102
  729  ssh -p 9052 ikay@10.150.55.102 
  730  ssh -p 9052 ikay@10.150.55.102
  731  clear
  732  ssh -p 9052 ikay@10.150.55.102
  733  clear
  734  ssh -p 9052 ikay@10.150.55.102
  735  clear
  736  ssh -p 9052 ikay@10.150.55.102
  737  clear
  738  ssh -p 9052 ikay@10.150.55.102
  739  clear
  740  ssh -p 9052 ikay@10.150.55.102
  741  clear
  742  ssh -p 9052 ikay@10.150.55.102
  743  clear
  744  ssh -p 9052 ikay@10.150.55.102
  745  clear
  746  ssh -p 9052 ikay@10.150.55.102
  747  clear
  748  ssh -p 9052 ikay@10.150.55.102
  749  clear
  750  scp -P 9052 /Users/memoor/Downloads/star_mtn_co_rw_691059851 ikay@10.150.55.102:/home/ikay/
  751  clear
  752  scp -r /Users/memoor/Downloads/star_mtn_co_rw_691059851 ikay@10.150.55.102:/home/ikay/\n
  753  stat /Users/memoor/Downloads/star_mtn_co_rw_691059851\n
  754  scp -P 9052 -r /Users/memoor/Downloads/star_mtn_co_rw_691059851 ikay@10.150.55.102:/home/ikay/\n
  755  ssh -p 9052 ikay@10.150.55.102
  756  clear
  757  ssh -p 9052 ikay@10.150.55.102
  758  clear
  759  ssh -p 9052 ikay@10.150.55.102
  760  clear
  761  ssh -p 9052 ikay@10.150.55.102
  762  ssh -p 9052 ikay@10.150.55.102 
  763  ssh -p 9052 ikay@10.150.55.102
  764  clear
  765  ssh -p 9052 ikay@10.150.55.102
  766  clear
  767  ssh -p 9052 ikay@10.150.55.102
  768  clear
  769  ssh -p 9052 ikay@10.150.55.102
  770  clear
  771  ssh -p 9052 ikay@10.150.55.102
  772  clear
  773  ssh -p 9052 ikay@10.150.55.102
  774  clear
  775  ssh -p 9052 ikay@10.150.55.102
  776  clear
  777  ssh -p 9052 ikay@10.150.55.102
  778  62;4c
  779  clear
  780  ssh -p 9052 ikay@10.150.55.102
  781  clear
  782  ssh -p 9052 ikay@10.150.55.102
  783  clear
  784  ssh -p 9052 ikay@10.150.55.102
  785  clear
  786  ssh -p 9052 ikay@10.150.55.102
  787  clear
  788  ssh -p 9052 ikay@10.150.55.102
  789  clear
  790  ssh -p 9052 ikay@10.150.55.102
  791  clear
  792  ssh -p 9052 ikay@10.150.55.102
  793  clear
  794  ssh -p 9052 ikay@10.150.55.102
  795  clear
  796  ssh -p 9052 ikay@10.150.55.102
  797  clear
  798  ssh -p 9052 ikay@10.150.55.102
  799  clear
  800  ssh -p 9052 ikay@10.150.55.102
  801  clear
  802  ssh -p 9052 ikay@10.150.55.102
  803  clear
  804  ssh -p 9052 ikay@10.150.55.102
  805  clear
  806  ssh -p 9052 ikay@10.150.55.102
  807  clear
  808  ssh -p 9052 ikay@10.150.55.102
  809  clear
  810  ssh -p 9052 ikay@10.150.55.102
  811  clear
  812  ssh -p 9052 ikay@10.150.55.102
  813  clear
  814  ssh -p 9052 ikay@10.150.55.102
  815  ssh -p 9052 ikay@10.150.55.101
  816  ssh -p 9052 ikay@10.150.55.102
  817  clear
  818  ssh -p 9052 ikay@10.150.55.102
  819  clear
  820  ssh -p 9052 ikay@10.150.55.102
  821  clear
  822  ssh -p 9052 ikay@10.150.55.102
  823  clear
  824  ssh -p 9052 ikay@10.150.55.102
  825  clear
  826  ssh -p 9052 ikay@10.150.55.102
  827  clear
  828  ssh -p 9052 ikay@10.150.55.102
  829  clear
  830  ssh -p 9052 ikay@10.150.55.102
  831  clear
  832  ssh -p 9052 ikay@10.150.55.102
  833  clear
  834  ssh -p 9052 ikay@10.150.55.102
  835  clear
  836  ssh -p 9052 ikay@10.150.55.102
  837  ssh -p 9052 ikay@10.150.55.101
  838  ssh -p 9052 ikay@10.150.55.102
  839  clear
  840  ssh -p 9052 ikay@10.150.55.102
  841  clear
  842  ssh -p 9052 ikay@10.150.55.102
  843  clear
  844  ssh -p 9052 ikay@10.150.55.102
  845  clear
  846  ssh -p 9052 ikay@10.150.55.101
  847  ssh -p 9052 ikay@10.150.55.103
  848  clear
  849  ssh -p 9052 ikay@10.150.55.101
  850  ssh -p 9052 ikay@10.150.55.102
  851  ssh -p 9052 ikay@10.150.55.103
  852  clear
  853  ssh -p 9052 ikay@10.150.55.102
  854  clear
  855  ssh -p 9052 ikay@10.150.55.102
  856  clear
  857  ssh -p 9052 ikay@10.150.55.102
  858  clear
  859  ssh -p 9052 ikay@10.150.55.102
  860  clear
  861  ssh -p 9052 ikay@10.150.55.102
  862  clear
  863  ssh -p 9052 ikay@10.150.55.102
  864  clear
  865  ssh -p 9052 ikay@10.150.55.102
  866  ssh -p 9052 ikay@10.150.55.101
  867  clear
  868  ssh -p 9052 ikay@10.150.55.102
  869  ssh -p 9052 ikay@10.150.55.101
  870  ssh -p 9052 ikay@10.150.55.102
  871  ssh -p 9052 ikay@10.150.55.101
  872  ssh -p 9052 ikay@10.150.55.100
  873  ssh -p 9052 ikay@10.150.55.10o
  874  ssh -p 9052 ikay@10.150.55.100
  875  clear
  876  ssh -p 9052 ikay@10.150.55.100
  877  ssh -p 9052 ikay@10.150.55.102
  878  clear
  879  ssh -p 9052 ikay@10.150.55.102
  880  clear
  881  ssh -p 9052 ikay@10.150.55.102
  882  clear
  883  ssh -L 3100:localhost:3100 ikay@10.150.55.102 -p 9052\n
  884  clear
  885  ssh -L 3100:localhost:3100 ikay@10.150.55.102 -p 9052 -N\n
  886  clear
  887  ssh -L 3101:localhost:3100 ikay@10.150.55.102 -p 9052 -N\n
  888  cd
  889  kubectl port-forward service/rabbitmq 5672:5672 -n default\n
  890  export CLUSTER_NAME=mtnrwanda-stage\nexport GPG_TTY=$(tty)\nkubectl config use-context VOC_CLUSTER\nexport KUBECONFIG=~/.kube/config\nchmod 600 /home/ikay/.kube/config\n source <(kubectl completion bash) \n echo "source <(kubectl completion bash)" >> ~/.bashrc\n alias k=kubectl\ncomplete -o default -F __start_kubectl k
  891  kubectl port-forward service/rabbitmq 5672:5672 -n default\n
  892  clear
  893  suo vi ~/.kube/config
  894  cd ~/.kube/
  895  ls
  896  sudo vi config
  897  rm -rf config
  898  sudo vi config
  899  cd
  900  kubectl port-forward service/rabbitmq 5672:5672 -n default\n
  901  clear
  902  kubectl port-forward service/rabbitmq 5672:5672 -n default\n
  903  clear
  904  ssh -L 15672:10.157.11.56:15672 -p 9052 ikay@10.150.55.102\n
  905  ssh -p 9052 ikay@10.150.55.102
  906  clear
  907  ssh -p 9052 ikay@10.150.55.102
  908  ssh -L 3000:10.157.11.20:80 -p 9052 ikay@10.150.55.102\n
  909  ssh -p 9052 ikay@10.150.55.102
  910  clear
  911  ssh -L 15672:127.0.0.1:15672 -p 9052 ikay@10.150.55.102\n
  912  k get pods
  913  sudo vi Users/memoor/.kube/config
  914  ssh -L 15673:127.0.0.1:15672 -p 9052 ikay@10.150.55.102\n
  915  clear
  916  ssh -L 15673:127.0.0.1:15672 -p 9052 ikay@10.150.55.102\n
  917  clear
  918  ls
  919  clear
  920  ssh -L 16000:127.0.0.1:15672 -p 9052 ikay@10.150.55.102\n
  921  clear
  922  ssh -L 15673:127.0.0.1:15672 -p 9052 ikay@10.150.55.102\n
  923  clear
  924  lsof -i :16000\n
  925  lsof -i :15672\n
  926  kill 46963
  927  lsof -i :15672\n
  928  ssh -L 15673:127.0.0.1:15672 -p 9052 ikay@10.150.55.102\n
  929  lsof -i :17000\n
  930  ssh -L 17000:127.0.0.1:15672 -p 9052 ikay@10.150.55.102\n
  931  clear
  932  ssh -p 9052 ikay@10.150.55.102
  933  ssh -L 17000:127.0.0.1:3100 -p 9052 ikay@10.150.55.102\n
  934  ssh -L 3101:127.0.0.1:3100 -p 9052 ikay@10.150.55.102\n
  935  clear
  936  ssh -p 9052 ikay@10.150.55.102
  937  clear
  938  ssh -L 3101:127.0.0.1:3100 -p 9052 ikay@10.150.55.102\n
  939  clear
  940  ssh -L 3001:127.0.0.1:3000 -p 9052 ikay@10.150.55.102\n
  941  ssh -p 9052 ikay@10.150.55.102
  942  ssh -L 3101:127.0.0.1:3100 -p 9052 ikay@10.150.55.102\n
  943  clear
  944  ssh -L 3001:127.0.0.1:3000 -p 9052 ikay@10.150.55.102\n
  945  clear
  946  ssh -p 9052 ikay@10.150.55.102
  947  ssh -p 9052 ikay@10.150.55.101
  948  scp -P 9052 ikay@10.150.55.102:/home/ikay/smpp_capture.pcap ~/Downloads/\n
  949  ssh -p 9052 ikay@10.150.55.102
  950  ssh -p 9052 ikay@10.150.55.101
  951  ssh -p 9052 ikay@10.150.55.102
  952  clear
  953  ssh -p 9052 ikay@10.150.55.102
  954  clear
  955  ssh -p 9052 ikay@10.150.55.102
  956  ssh -L 3001:127.0.0.1:3000 -p 9052 ikay@10.150.55.102\n
  957  ssh -p 9052 ikay@10.150.55.102
  958  ssh -L 3001:127.0.0.1:3000 -p 9052 ikay@10.150.55.102\n
  959  lsof -i
  960  ssh -L 3001:127.0.0.1:3000 -p 9052 ikay@10.150.55.102\n
  961  ssh -p 9052 ikay@10.150.55.102
  962  clear
  963  ssh -p 9052 ikay@10.150.55.102
  964  ssh -L 3001:127.0.0.1:3000 -p 9052 ikay@10.150.55.102\n
  965  clear
  966  ssh -p 9052 ikay@10.150.55.102
  967  clear
  968  ssh -p 9052 ikay@10.150.55.102
  969  clear
  970  ssh -p 9052 ikay@10.150.55.102
  971  clear
  972  ssh -p 9052 ikay@10.150.55.102
  973  clear
  974  ssh -p 9052 ikay@10.150.55.102
  975  clear
  976  ssh -p 9052 ikay@10.150.55.101
  977  ssh -p 9052 ikay@10.150.55.102
  978  ssh -p 9052 ikay@10.150.55.101
  979  ssh -p 9052 ikay@10.150.55.103
  980  clear
  981  sh -L 9091:127.0.0.1:9090 -p 9052 ikay@10.150.55.102
  982  ssh -L 9091:127.0.0.1:9090 -p 9052 ikay@10.150.55.102
  983  ssh -L 9093:127.0.0.1:9093 -p 9052 ikay@10.150.55.102
  984  ssh -p 9052 ikay@10.150.55.102
  985  clear
  986  ssh -L 9090:127.0.0.1:9090 -p 9052 ikay@10.150.55.102
  987  ssh -p 9052 ikay@10.150.55.101
  988  ssh -L 3001:127.0.0.1:3000 -p 9052 ikay@10.150.55.102\n
  989  ssh -p 9052 ikay@10.150.55.102
  990  ssh -L 9090:127.0.0.1:9090 -p 9052 ikay@10.150.55.102
  991  ssh -p 9052 ikay@10.150.55.102
  992  ssh -L 3001:127.0.0.1:3000 -p 9052 ikay@10.150.55.102\n
  993  ssh -L 3100:127.0.0.1:3100 -p 9052 ikay@10.150.55.102
  994  ssh -L 9090:127.0.0.1:9090 -p 9052 ikay@10.150.55.102
  995  ssh -p 9052 ikay@10.150.55.102
  996  clear
  997  ssh -p 9052 ikay@10.150.55.102
  998  ssh -p 9052 ikay@10.150.55.101
  999  ssh -p 9052 ikay@10.150.55.100
 1000  ssh -p 9052 ikay@10.150.55.101
 1001  ssh -p 9052 ikay@10.150.55.100
 1002  ssh -p 9052 ikay@10.150.55.101
 1003  clear
 1004  ssh -p 9052 ikay@10.150.55.102
 1005  ssh -p 9052 ikay@10.150.55.100
 1006  clear
 1007  ssh -p 9052 ikay@10.150.55.101
 1008  clear
 1009  ssh -p 9052 ikay@10.150.55.102
 1010  ssh -p 9052 ikay@10.150.55.100
 1011  clear
 1012  ssh -p 9052 ikay@10.150.55.102
 1013  pwd
 1014  cd /Users/memoor
 1015  mkdir VOChub
 1016  cd VOChub
 1017  pwd
 1018  cd
 1019  scp -r ikay@bastionsrv:/home/ikay/ /Users/memoor/VOChub\n
 1020  scp -P 9052 -r ikay@10.150.55.102:/home/ikay/ /Users/memoor/VoChub\n
 1021  ssh -p 9052 ikay@10.150.55.100
 1022  ssh -p 9052 ikay@10.150.55.101
 1023  cd VOChub
 1024  ls
 1025  cd ikay
 1026  ls
 1027  pwd
 1028  mkdir Vochub-Mysql
 1029  scp -P 9052 -r ikay@10.150.55.101:/home/ikay/ /Users/memoor/Vochub-Mysql\n
 1030  ssh -p 9052 ikay@10.150.55.101
 1031  cd
 1032  cd Vochub-Mysql
 1033  ls
 1034  cd ikay
 1035  ls
 1036  pwd
 1037  mkdir Vochub-Mongodb
 1038  scp -P 9052 -r ikay@10.150.55.100:/home/ikay/ /Users/memoor/Vochub-Mongodb\n
 1039  ssh -p 9052 ikay@10.150.55.101
 1040  ssh -L 3001:127.0.0.1:3000 -p 9052 ikay@10.150.55.102\n
 1041  ssh -p 9052 ikay@10.150.55.100
 1042  scp -P 9052 -r ikay@10.150.55.103:/home/ikay/ /Users/memoor/Vochub-NFS\n
 1043  ssh -p 9052 ikay@10.150.55.100
 1044  ssh -p 9052 ikay@10.150.55.102
 1045  ssh -p 9052 ikay@10.150.55.100
 1046  ssh -p 9052 ikay@10.150.55.102
 1047  ssh -p 9052 ikay@10.150.55.100
 1048  ssh -p 9052 ikay@10.150.55.102
 1049  cd Downloads
 1050  pwd
 1051  cd
 1052  cd Downloads
 1053  cd
 1054  scp /Users/memoor/Downloads/DigiCertGlobalG2TLSRSASHA2562020CA1-1.crt ikay@192.168.1.102:/home/ikay/
 1055  scp /Users/memoor/Downloads/DigiCertGlobalG2TLSRSASHA2562020CA1-1.crt ikay@192.168.1.102:/home\n
 1056  ssh -p 9052 ikay@10.150.55.102
 1057  scp -P 9052 /Users/memoor/Downloads/DigiCertGlobalG2TLSRSASHA2562020CA1-1.crt ikay@10.150.55.102:/home/ikay\n
 1058  scp -P 9052 /Users/memoor/Downloads/DigiCertGlobalG2TLSRSASHA2562020CA1-1.crt.pem ikay@10.150.55.102:/home/ikay\n
 1059  ssh -p 9052 ikay@10.150.55.102
 1060  clear
 1061  ssh -p 9052 ikay@10.150.55.102
 1062  ssh -p 9052 ikay@10.150.55.100
 1063  clear
 1064  ssh -p 9052 ikay@10.150.55.102
 1065  clear
 1066  ssh -p 9052 ikay@10.150.55.102
 1067  clear
 1068  ssh -p 9052 ikay@10.150.55.102
 1069  clear
 1070  ssh -p 9052 ikay@10.150.55.100
 1071  clear
 1072  ssh -p 9052 ikay@10.150.55.102
 1073  clear
 1074  ssh -p 9052 ikay@10.150.55.102
 1075  ssh -vvv -p 9052 ikay@10.150.55.102\n
 1076  clear
 1077  ssh ikay@10.150.55.102\n
 1078  ssh -c aes256-ctr -o KexAlgorithms=curve25519-sha256 -p 9052 ikay@10.150.55.102\n
 1079  clear
 1080  ssh -p 9052 ikay@10.150.55.100
 1081  ssh -p 9052 ikay@10.150.55.101
 1082  ssh -c chacha20-poly1305@openssh.com -m hmac-sha2-256 -p 9052 ikay@10.150.55.102\n
 1083  ssh -p 9052 ikay@10.150.55.101
 1084  ssh -p 9052 ikay@10.150.55.102
 1085  ping 10.150.55.102
 1086  ssh -p 9052 ikay@10.150.55.102 -v \n
 1087  nmap -p 9052 10.150.55.102\n
 1088  clear
 1089  ifconfig
 1090  sudo ifconfig en0 mtu 1400\n
 1091  sudo -i
 1092  ifconfig en0 mtu 1400
 1093  clear
 1094  ssh -p 9052 ikay@10.150.55.102
 1095  ssh -p 9052 ikay@10.150.55.103
 1096  clear
 1097  tracepath 10.150.55.102
 1098  traceroute 10.150.55.102
 1099  traceroute 10.150.55.101
 1100  traceroute 10.150.55.100
 1101  ssh -p 9052 ikay@10.150.55.102
 1102  traceroute 10.150.55.100
 1103  ssh -p 9052 ikay@10.150.55.103
 1104  clear
 1105  ifconfig
 1106  ssh -p 9052 ikay@10.150.55.103
 1107  clear
 1108  ssh -p 9052 ikay@10.150.55.103
 1109  ssh -p 9052 ikay@10.150.55.102
 1110  traceroute 10.150.55.102
 1111  ssh -vvv -p 9052 ikay@10.150.55.102\n
 1112  clear
 1113  ipconfig
 1114  ifconfig
 1115  ssh -p 9052 ikay@10.150.55.102
 1116  ssh -p 9052 ikay@10.150.55.10
 1117  ssh -p 9052 ikay@10.150.55.100
 1118* ssh -p 9052 ikay@10.150.55.102
 1119  clear
 1120  k get po
 1121  export CLUSTER_NAME=mtnrwanda-stage\nexport GPG_TTY=$(tty)\nkubectl config use-context VOC_CLUSTER\nexport KUBECONFIG=~/.kube/config\nchmod 600 /home/ikay/.kube/config\n source <(kubectl completion bash) \n echo "source <(kubectl completion bash)" >> ~/.bashrc\n alias k=kubectl\ncomplete -o default -F __start_kubectl k
 1122  k get po
 1123  echo "alias k=kubectl" >> ~/.zshrc\necho "source <(kubectl completion zsh)" >> ~/.zshrc\nsource ~/.zshrc\n
 1124  cat ~/.kube/config
 1125  # Set correct permissions\nchmod 600 ~/.kube/config\n\n# Ensure you're pointing to the correct file\nexport KUBECONFIG=~/.kube/config\n
 1126  kubectl config use-context VOC_CLUSTER\n
 1127  ls -l ~/.kube/config\n
 1128  sudo chown memoor:staff ~/.kube/config\n
 1129  chmod 600 ~/.kube/config\n
 1130  kubectl get pods\n
 1131  clear
 1132  k9s
 1133  cd Downloads/
 1134  ls
 1135  cd
 1136  cd VoChub
 1137  ls
 1138  cd ikay
 1139  ls
 1140  clear
 1141  k get po
 1142  helm repo add hashicorp https://helm.releases.hashicorp.com\nhelm install vault hashicorp/vault --set "server.dev.enabled=true"\n
 1143  helmlist
 1144  cd helm-onprem/env/mtnrwanda-stage
 1145  sudo vi vochub.yaml
 1146  cd ../..
 1147  helmfile lint
 1148  clear
 1149  curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\nchmod 700 get_helm.sh\n./get_helm.sh\n
 1150  helm version\n
 1151  wget https://github.com/roboll/helmfile/releases/download/v0.139.9/helmfile_linux_amd64\nchmod +x helmfile_linux_amd64\nsudo mv helmfile_linux_amd64 /usr/local/bin/helmfile\n
 1152  helmfile --version\n
 1153  uname -m\n
 1154  wget https://github.com/roboll/helmfile/releases/download/\[VERSION\]/helmfile_linux_arm64\n
 1155  wget https://github.com/roboll/helmfile/releases/download/v0.140.0/helmfile_linux_arm64\n
 1156  chmod +x helmfile_linux_arm64\n
 1157  sudo mv helmfile_linux_arm64 /usr/local/bin/helmfile\n
 1158  helmfile --version\n
 1159  uname -m\n
 1160  clear
 1161  file /usr/local/bin/helmfile\n
 1162  /usr/local/bin/helmfile --version\n
 1163  dmesg | tail\n
 1164  bash -c '/usr/local/bin/helmfile --version'\n
 1165  sudo rm /usr/local/bin/helmfile\nwget https://github.com/roboll/helmfile/releases/download/v0.140.0/helmfile_linux_arm64\nchmod +x helmfile_linux_arm64\nsudo mv helmfile_linux_arm64 /usr/local/bin/helmfile\n/usr/local/bin/helmfile --version\n
 1166  ldd /usr/local/bin/helmfile\n
 1167  cd
 1168  sudo rm /usr/local/bin/helmfile\nwget https://github.com/roboll/helmfile/releases/download/v0.140.0/helmfile_linux_arm64\nchmod +x helmfile_linux_arm64\nsudo mv helmfile_linux_arm64 /usr/local/bin/helmfile\n/usr/local/bin/helmfile --version\n
 1169  sudo apt update\nsudo apt install strace\n
 1170  cd Vochub/ikay
 1171  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n
 1172  brew install strace\n
 1173  sudo dtruss -f /usr/local/bin/helmfile --version 2>&1 | tee dtruss_output.txt\n
 1174  clear
 1175  sudo rm /usr/local/bin/helmfile
 1176  tar -xzvf helmfile_darwin_arm64.tar.gz \n
 1177  tar -xzvf /path/to/file/helmfile_darwin_arm64.tar.gz\n
 1178  cd\n
 1179  cd Downloads
 1180  pwd
 1181  tar -xzvf /Users/memoor/Downloads/helmfile_darwin_arm64.tar.gz
 1182  tar -xzvf /Users/memoor/Downloads/helmfile_darwin_arm64
 1183  tar -xzvf /Users/memoor/Downloads/helmfile-0.144.0.tar.gz
 1184  mv helmfile /usr/local/bin/\n
 1185  clear
 1186  tar -xzvf /Users/memoor/Downloads/helmfile_darwin_arm64
 1187  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n
 1188  echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile\neval "$(/opt/homebrew/bin/brew shellenv)"\n
 1189  brew install helmfile\n
 1190  helmfile --version\n
 1191  cd
 1192  clear
 1193  cd Vochub/ikay
 1194  cd helm-onprem
 1195  helmfile lint
 1196  helm plugin install https://github.com/jkroepke/helm-secrets\n
 1197  helm plugin list\n
 1198  helmfile lint\n
 1199  clear
 1200  brew install sops\n
 1201  export GPG_TTY=$(tty)
 1202  sops --version\n
 1203  helmfile lint\n
 1204  brew install gnupg\n
 1205* clear
 1206* cd Vochub/ikay
 1207* ls
 1208* cd helm-onprem
 1209* ls
 1210* cd env
 1211* ls
 1212* cd mtnrwanda-stage
 1213* ls
 1214* cd ../../..
 1215* clear
 1216* pwd
 1217* gpg --import /Users/memoor/Vochub/ikay/private-key.asc\n
 1218* ls -la /Users/memoor/Vochub/ikay/\n
 1219* find /Users/memoor -name private-key.asc\n
 1220* sudo find /Users/memoor -name private-key.asc\n
 1221  gpg --import /Users/memoor/Vochub/ikay/backup-gpg-key.gpg\n
 1222* rickmodee
 1223  helmfile lint
 1224  clear
 1225  gpg --list-keys\n
 1226  helm repo list\n
 1227  ls
 1228  cd env
 1229  cd mtnrwanda-stage
 1230  ls
 1231  helm repo add vochub https://helm.sandsiv.com
 1232  cd ../../..
 1233  helm repo add vochub https://helm.sandsiv.com
 1234  helm repo add vochub https://helm.sandsiv.com --username ikay72 --password R1ckm0dee$\n
 1235  helm repo add vochub https://helm.sandsiv.com --username reader --password IgofyosefwokfiepWytOamremshaytwidanwedVa\n
 1236  cd helm-onprem
 1237  helmfile lint
 1238  helm list
 1239  k9s
 1240  clear
 1241  kubectl exec -it rabbitmq-0 -n default -- cat /opt/bitnami/rabbitmq/var/log/rabbitmq/rabbit@rabbitmq-0.rabbitmq-headless.default.svc.cluster.local_upgrade.log\n
 1242  kubectl exec -it rabbitmq-0 -n default -- ls /opt/bitnami/rabbitmq/var/log/rabbitmq/\n
 1243  k9s
 1244  kubectl exec -it rabbitmq-0 -n default -- cat /opt/bitnami/rabbitmq/var/log/rabbitmq/rabbit@rabbitmq-0.rabbitmq-headless.default.svc.cluster.local_upgrade.log\n
 1245  k9s
 1246  kubectl exec -it rabbitmq-0 -n default -- openssl s_client -connect localhost:5671\n
 1247  clear
 1248  k9s
 1249* clear
 1250* ssh -p 9052 ikay@10.150.55.102
 1251* cd Vochub/ikay
 1252* k9s
 1253* k get secrets.enc.yaml
 1254* export CLUSTER_NAME=mtnrwanda-stage\nexport GPG_TTY=$(tty)\nkubectl config use-context VOC_CLUSTER\nexport KUBECONFIG=~/.kube/config\nchmod 600 /home/ikay/.kube/config\n source <(kubectl completion bash) \n echo "source <(kubectl completion bash)" >> ~/.bashrc\n alias k=kubectl\ncomplete -o default -F __start_kubectl k
 1255* chmod 600 ~/.kube/config
 1256* k get secrets.enc.yaml
 1257* k get secrets common-tlssecret.yaml
 1258* k get secrets -n default
 1259* k get secrets -n default common-tlssecret -o yaml
 1260* clear
 1261* k get config
 1262* k get configmap -n defau
 1263* k get configmap -n default cacert.crt -o yaml
 1264* k get configmap -n default
 1265* clear
 1266* k get configmap -n default cacert-configmap -o yaml
 1267* clear
 1268* k get deployment -n default keda-operator-metric
 1269* k get deployment -n default keda-operator-
 1270* echo "source <(kubectl completion zsh)" >> ~/.zshrc\nsource ~/.zshrc\n
 1271* nano ~/.zshrc\n
 1272* k get pods
 1273* clear
 1274* k get deployments.apps -n default keda-operator-metrics-apiserver -o yaml
 1275* k get secrets -n default
 1276* clear
 1277* kubectl describe secret common-tlssecret -n default\n
 1278* clear
 1279* export CLUSTER_NAME=mtnrwanda-stage\nexport GPG_TTY=$(tty)\nkubectl config use-context VOC_CLUSTER\nexport KUBECONFIG=~/.kube/config\nchmod 600 ~/.kube/config\necho "source <(kubectl completion zsh)" >> ~/.zshrc\nsource ~/.zshrc\n alias k=kubectl\ncomplete -o default -F __start_kubectl k\n
 1280* clear
 1281* k get po
 1282* clear
 1283* ssh -p 9052 ikay@10.150.55.102
 1284* traceroute 10.150.55.102
 1285  clear
 1286  cd env/mtnrwanda-stage
 1287  sudo vi secrets.new.yaml
 1288* clear
 1289* ssh -p 9052 ikay@10.150.55.102
 1290  sudo vi secrets.new.yaml
 1291  clear
 1292  k get po
 1293  clear
 1294  vault auth enable kubernetes\n
 1295  cd
 1296  cd /Vochub/ikay
 1297  cd Vochub/ikay
 1298  vault auth enable kubernetes\n
 1299  curl -O https://releases.hashicorp.com/vault/1.13.0/vault_1.13.0_darwin_arm64.zip\n
 1300  unzip vault_1.13.0_darwin_arm64.zip\n
 1301  sudo mv vault /usr/local/bin/\n
 1302  vault --version\n
 1303  vault auth enable kubernetes\n
 1304  export CLUSTER_NAME=mtnrwanda-stage\nexport GPG_TTY=$(tty)\nkubectl config use-context VOC_CLUSTER\nexport KUBECONFIG=~/.kube/config\nchmod 600 ~/.kube/config\necho "source <(kubectl completion zsh)" >> ~/.zshrc\nsource ~/.zshrc\n alias k=kubectl\ncomplete -o default -F __start_kubectl k
 1305  vault auth enable kubernetes\n
 1306  vault server -dev\n
 1307  sudo vi vault.hcl
 1308  clear
 1309  vault server -config=vault.hcl\n
 1310  clear
 1311  kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}'\n
 1312  kubectl run -i --tty vault-helper --image=alpine --restart=Never -- sh\n
 1313  kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}'\n
 1314  vault write auth/kubernetes/config \\n  token_reviewer_jwt="eyJhbGciOiJSUzI1NiIsImtpZCI6ImRZQjFGTE01REJuOUZvYXBONmZFV0FrUHRlcC1PWVZmZmstZmdBMUxXR3cifQ.eyJhdWQiOlsiaHR0cHM6Ly9tYXN0ZXIuY2Zjci5pbnRlcm5hbDo4NDQzIl0sImV4cCI6MTc0NjcyNDU4NSwiaWF0IjoxNzE1MTg4NTg1LCJpc3MiOiJodHRwczovL21hc3Rlci5jZmNyLmludGVybmFsOjg0NDMiLCJrdWJlcm5ldGVzLmlvIjp7Im5hbWVzcGFjZSI6ImRlZmF1bHQiLCJwb2QiOnsibmFtZSI6InZhdWx0LWhlbHBlciIsInVpZCI6IjU4YTI3ZmVhLWFmMmYtNGFlNC1hZDgyLWI1YjFhYjQxZTY2NyJ9LCJzZXJ2aWNlYWNjb3VudCI6eyJuYW1lIjoiZGVmYXVsdCIsInVpZCI6ImQ4NjYwNDQzLTA0ZmQtNDRhYS05ZjhlLWZmNGM5Yjk1NGJkZCJ9LCJ3YXJuYWZ0ZXIiOjE3MTUxOTIxOTJ9LCJuYmYiOjE3MTUxODg1ODUsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.Veyn4Z4uom3Ufa4LvKGdqGuW3QxVASu9RX03jp40Y4IFpEXBbBvQGrTaVVtNocydYXQs-GVvZlpIWquPPPxjyuo79eOrDiL3a9yQsPm8WLCZtZWS5Dp1Gmje0xcA54lA43ZBO0ErVNqKRdYo1T5ZityZSzxsKg52OiQ-7PZNT12m-V1Rs_kRlw5pePgVAkAerqYEEqvZL9b8-SZqQT5iSwtP3DrU5iDWsehQHhKVeXYNaU7Shn4JPcTOzcBCRTuSUureT0Iw95YRtohrO4drdvWUWAIxl87tJkwX6i8F47M1cHqxzIY5isRTxAJNyvBh9ZjXPlM9zOsG5l5QvzTFKA/" \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
 1315  clear
 1316  echo "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRZQjFGTE01REJuOUZvYXBONmZFV0FrUHRlcC1PWVZmZmstZmdBMUxXR3cifQ.eyJhdWQiOlsiaHR0cHM6Ly9tYXN0ZXIuY2Zjci5pbnRlcm5hbDo4NDQzIl0sImV4cCI6MTc0NjcyNDU4NSwiaWF0IjoxNzE1MTg4NTg1LCJpc3MiOiJodHRwczovL21hc3Rlci5jZmNyLmludGVybmFsOjg0NDMiLCJrdWJlcm5ldGVzLmlvIjp7Im5hbWVzcGFjZSI6ImRlZmF1bHQiLCJwb2QiOnsibmFtZSI6InZhdWx0LWhlbHBlciIsInVpZCI6IjU4YTI3ZmVhLWFmMmYtNGFlNC1hZDgyLWI1YjFhYjQxZTY2NyJ9LCJzZXJ2aWNlYWNjb3VudCI6eyJuYW1lIjoiZGVmYXVsdCIsInVpZCI6ImQ4NjYwNDQzLTA0ZmQtNDRhYS05ZjhlLWZmNGM5Yjk1NGJkZCJ9LCJ3YXJuYWZ0ZXIiOjE3MTUxOTIxOTJ9LCJuYmYiOjE3MTUxODg1ODUsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.Veyn4Z4uom3Ufa4LvKGdqGuW3QxVASu9RX03jp40Y4IFpEXBbBvQGrTaVVtNocydYXQs-GVvZlpIWquPPPxjyuo79eOrDiL3a9yQsPm8WLCZtZWS5Dp1Gmje0xcA54lA43ZBO0ErVNqKRdYo1T5ZityZSzxsKg52OiQ-7PZNT12m-V1Rs_kRlw5pePgVAkAerqYEEqvZL9b8-SZqQT5iSwtP3DrU5iDWsehQHhKVeXYNaU7Shn4JPcTOzcBCRTuSUureT0Iw95YRtohrO4drdvWUWAIxl87tJkwX6i8F47M1cHqxzIY5isRTxAJNyvBh9ZjXPlM9zOsG5l5QvzTFKA/" > vault-token\n\necho "-----BEGIN CERTIFICATE-----\nMIIDOzCCAiOgAwIBAgIUH1FeRUknJ+75ro8V2iL+tpomeIcwDQYJKoZIhvcNAQEL\nBQAwLTELMAkGA1UEAxMCQ0ExDTALBgNVBAsTBFRLR0kxDzANBgNVBAoTBlZNd2Fy\nZTAeFw0yMzA2MzAwNjI5MTVaFw0yNzA2MzAwNjI5MTVaMC0xCzAJBgNVBAMTAkNB\nMQ0wCwYDVQQLEwRUS0dJMQ8wDQYDVQQKEwZWTXdhcmUwggEiMA0GCSqGSIb3DQEB\nAQUAA4IBDwAwggEKAoIBAQDE+CAXQgf1LfoBq1Lv4hvfU0zBcmzo/WZ57/lVmIDl\niBftbpQghi2QQtdF6acaLK0FlXJFtB1OWG6GUxomPXZFOgXbYnrxYfe/77immxny\nbgc9AUu4fwAgByqN7w0aNiwBUVdpL+oSotlnUcmErnReuPQupaim1uwUiSi8gAJQ\nuyTDBJ0qmRFVqlvD1nlrpOJ92l0O8d8mfkhxzrFGgY8ixiSege37zxIkMvuptzUS\nxVUtUApQkan9XkAvS1Vj3NsGi/ubUiokwFD900A5WxnM9WCfzONMvf3Xs60zKIHe\nFj9OcrI7MFTkVhWCB6EV4vv95dtZANq5TJFuYpHms3WBAgMBAAGjUzBRMB0GA1Ud\nDgQWBBS9GoPsLFO9vgGnoT+SscNTHt4+qTAfBgNVHSMEGDAWgBS9GoPsLFO9vgGn\noT+SscNTHt4+qTAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAU\nTDsAe6UbiPyVtjFlo2nenXiqCjFz1fC+TIwGVOS+zACV/oALpIMzW9Fi7oUvhfGS\n1a6hEBxqjx7cBulKvyVHIZHjR5E2a7fFf8RP507ASFnbRITkTfiJ4LBRTOJ4ZA/l\nwDriUmq/neHXQIkaZ1gKUbYyx2Yct0bCcxd/exO2b2YHHl/e9qefckx2MtJYBreO\nFv3QacxyCu4x2gQKIA/qC6zLLPwAmsTlHKkZkmR+IngHifg7DICI/IX7z3V40GS9\n5+vBuEZLoruy/3FwmHS2eU0t0bQhfnttDP6Jd8NEGenyrEdr0vR0g/0sJFXbmkPY\n2KahFkBUj9idthug8D6F\n-----END CERTIFICATE-----" > vault-ca.crt
 1317  ls
 1318  vault write auth/kubernetes/config \\n  token_reviewer_jwt=@/vault-token \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@/vault-ca.crt
 1319  pwd
 1320  vault write auth/kubernetes/config \\n  token_reviewer_jwt=@$(pwd)/vault-token \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@$(pwd)/vault-ca.crt\n
 1321  clear
 1322  vault server -config=vault.hcl
 1323* clear
 1324* export VAULT_ADDR='http://127.0.0.1:8200'\n
 1325* vault write auth/kubernetes/config \\n  token_reviewer_jwt=@$(pwd)/vault-token \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@$(pwd)/vault-ca.crt\n
 1326* vault status\n
 1327* vault operator unseal
 1328* vault operator init\n
 1329* sudo vi vault.hcl
 1330* cd Vochub/ikay
 1331* pwd
 1332* mkdir /vault/data
 1333* mkdir /vault/
 1334* sudo mkdir /vault/data
 1335* mkdir -p /Users/memoor/Vochub/ikay/vault/data\n
 1336* vault server -config=/Users/memoor/Vochub/ikay/vault.hcl\n
 1337  vault server -config=vault.hcl
 1338* vault operator init\n
 1339* vault operator unseal 5yjQG37paIit+X0qth+vntxWpmBXVtk76etOyyKKvaYI
 1340* vault operator init VoXQPgcFzNJGH7fMouZzg1IcO91m/Q0Q6ZWyT6LVsO62\n
 1341* vault operator unseal VoXQPgcFzNJGH7fMouZzg1IcO91m/Q0Q6ZWyT6LVsO62
 1342* vault operator unseal WctoS+LUW8d12ov6xocd/cSlnaTT7QLmcVngVYCPdc3X
 1343* vault login hvs.S7NI9wNuh4YaMgwD3Ka2N2Zz\n
 1344* vault write auth/kubernetes/config \\n  token_reviewer_jwt=@$(pwd)/vault-token \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@$(pwd)/vault-ca.crt\n
 1345* vault auth enable kubernetes\n
 1346* vault write auth/kubernetes/config \\n  token_reviewer_jwt=@$(pwd)/vault-token \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@$(pwd)/vault-ca.crt\n
 1347* cat $(pwd)/vault-ca.crt\n
 1348* echo "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRZQjFGTE01REJuOUZvYXBONmZFV0FrUHRlcC1PWVZmZmstZmdBMUxXR3cifQ.eyJhdWQiOlsiaHR0cHM6Ly9tYXN0ZXIuY2Zjci5pbnRlcm5hbDo4NDQzIl0sImV4cCI6MTc0NjcyNDU4NSwiaWF0IjoxNzE1MTg4NTg1LCJpc3MiOiJodHRwczovL21hc3Rlci5jZmNyLmludGVybmFsOjg0NDMiLCJrdWJlcm5ldGVzLmlvIjp7Im5hbWVzcGFjZSI6ImRlZmF1bHQiLCJwb2QiOnsibmFtZSI6InZhdWx0LWhlbHBlciIsInVpZCI6IjU4YTI3ZmVhLWFmMmYtNGFlNC1hZDgyLWI1YjFhYjQxZTY2NyJ9LCJzZXJ2aWNlYWNjb3VudCI6eyJuYW1lIjoiZGVmYXVsdCIsInVpZCI6ImQ4NjYwNDQzLTA0ZmQtNDRhYS05ZjhlLWZmNGM5Yjk1NGJkZCJ9LCJ3YXJuYWZ0ZXIiOjE3MTUxOTIxOTJ9LCJuYmYiOjE3MTUxODg1ODUsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.Veyn4Z4uom3Ufa4LvKGdqGuW3QxVASu9RX03jp40Y4IFpEXBbBvQGrTaVVtNocydYXQs-GVvZlpIWquPPPxjyuo79eOrDiL3a9yQsPm8WLCZtZWS5Dp1Gmje0xcA54lA43ZBO0ErVNqKRdYo1T5ZityZSzxsKg52OiQ-7PZNT12m-V1Rs_kRlw5pePgVAkAerqYEEqvZL9b8-SZqQT5iSwtP3DrU5iDWsehQHhKVeXYNaU7Shn4JPcTOzcBCRTuSUureT0Iw95YRtohrO4drdvWUWAIxl87tJkwX6i8F47M1cHqxzIY5isRTxAJNyvBh9ZjXPlM9zOsG5l5QvzTFKA/" > /Users/memoor/Vochub/ikay/vault-token\n
 1349* echo "-----BEGIN CERTIFICATE-----\nMIIDOzCCAiOgAwIBAgIUH1FeRUknJ+75ro8V2iL+tpomeIcwDQYJKoZIhvcNAQEL\nBQAwLTELMAkGA1UEAxMCQ0ExDTALBgNVBAsTBFRLR0kxDzANBgNVBAoTBlZNd2Fy\nZTAeFw0yMzA2MzAwNjI5MTVaFw0yNzA2MzAwNjI5MTVaMC0xCzAJBgNVBAMTAkNB\nMQ0wCwYDVQQLEwRUS0dJMQ8wDQYDVQQKEwZWTXdhcmUwggEiMA0GCSqGSIb3DQEB\nAQUAA4IBDwAwggEKAoIBAQDE+CAXQgf1LfoBq1Lv4hvfU0zBcmzo/WZ57/lVmIDl\niBftbpQghi2QQtdF6acaLK0FlXJFtB1OWG6GUxomPXZFOgXbYnrxYfe/77immxny\nbgc9AUu4fwAgByqN7w0aNiwBUVdpL+oSotlnUcmErnReuPQupaim1uwUiSi8gAJQ\nuyTDBJ0qmRFVqlvD1nlrpOJ92l0O8d8mfkhxzrFGgY8ixiSege37zxIkMvuptzUS\nxVUtUApQkan9XkAvS1Vj3NsGi/ubUiokwFD900A5WxnM9WCfzONMvf3Xs60zKIHe\nFj9OcrI7MFTkVhWCB6EV4vv95dtZANq5TJFuYpHms3WBAgMBAAGjUzBRMB0GA1Ud\nDgQWBBS9GoPsLFO9vgGnoT+SscNTHt4+qTAfBgNVHSMEGDAWgBS9GoPsLFO9vgGn\noT+SscNTHt4+qTAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAU\nTDsAe6UbiPyVtjFlo2nenXiqCjFz1fC+TIwGVOS+zACV/oALpIMzW9Fi7oUvhfGS\n1a6hEBxqjx7cBulKvyVHIZHjR5E2a7fFf8RP507ASFnbRITkTfiJ4LBRTOJ4ZA/l\nwDriUmq/neHXQIkaZ1gKUbYyx2Yct0bCcxd/exO2b2YHHl/e9qefckx2MtJYBreO\nFv3QacxyCu4x2gQKIA/qC6zLLPwAmsTlHKkZkmR+IngHifg7DICI/IX7z3V40GS9\n5+vBuEZLoruy/3FwmHS2eU0t0bQhfnttDP6Jd8NEGenyrEdr0vR0g/0sJFXbmkPY\n2KahFkBUj9idthug8D6F\n-----END CERTIFICATE-----" > /Users/memoor/Vochub/ikay/vault-ca.crt\n
 1350* vault write auth/kubernetes/config \\n  token_reviewer_jwt=@/Users/memoor/Vochub/ikay/vault-token \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@/Users/memoor/Vochub/ikay/vault-ca.crt\n
 1351* clear
 1352* cat /Users/memoor/Vochub/ikay/vault-token\n
 1353* cat /Users/memoor/Vochub/ikay/vault-ca.crt\n
 1354* tr -d '\n' < /Users/memoor/Vochub/ikay/vault-token > /Users/memoor/Vochub/ikay/vault-token-clean\n
 1355* vault write auth/kubernetes/config \\n  token_reviewer_jwt=@/Users/memoor/Vochub/ikay/vault-token-clean \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@/Users/memoor/Vochub/ikay/vault-ca.crt\n
 1356* base64 -d /Users/memoor/Vochub/ikay/vault-token-clean > /dev/null\n
 1357* base64 -d /Users/memoor/Vochub/ikay/vault-token > /dev/null\n
 1358* clear
 1359* base64 -D /Users/memoor/Vochub/ikay/vault-token-clean > /dev/null\n
 1360* base64 -D -i /Users/memoor/Vochub/ikay/vault-token-clean > /dev/null\n
 1361* kubectl exec -it netshoot -n default --bin/sh
 1362* kubectl exec -it netshoot -n default -- sh\n
 1363* echo "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRZQjFGTE01REJuOUZvYXBONmZFV0FrUHRlcC1PWVZmZmstZmdBMUxXR3cifQ.eyJhdWQiOlsiaHR0cHM6Ly9tYXN0ZXIuY2Zjci5pbnRlcm5hbDo4NDQzIl0sImV4cCI6MTc0NjcyNzA5NywiaWF0IjoxNzE1MTkxMDk3LCJpc3MiOiJodHRwczovL21hc3Rlci5jZmNyLmludGVybmFsOjg0NDMiLCJrdWJlcm5ldGVzLmlvIjp7Im5hbWVzcGFjZSI6ImRlZmF1bHQiLCJwb2QiOnsibmFtZSI6Im5ldHNob290IiwidWlkIjoiYTFiMTkyZDgtNzAwMi00OWY2LThhMzktZTViMzU3ZTAwNDAyIn0sInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJkZWZhdWx0IiwidWlkIjoiZDg2NjA0NDMtMDRmZC00NGFhLTlmOGUtZmY0YzliOTU0YmRkIn0sIndhcm5hZnRlciI6MTcxNTE5NDcwNH0sIm5iZiI6MTcxNTE5MTA5Nywic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmRlZmF1bHQ6ZGVmYXVsdCJ9.broQLqYfBJVJZsVQptoD4bE20JOSQ6dGBjuLDZHd_SgCP59psKqC7hK8eozFsw37EK5LbrFKPnO-TUFyG1UdORp5NCH7ew_rd-T3Qnx11TsHZ6uoKwYdDMPLYmEChZ8tTcl-VQ32Xq30l9PI5GX-WMrZ7X7s-ZBNIYzbs8C4LVnQPrhzwBGUvwfgQSEaUw5eul1fi443aiCCIsoUWJno-hHS7VLI0MqvFb44scwE1D4y6F31S7ytJRO1SFWnsCiZM8Z9mIuMmVp1zigqfimJhextaoZtlkQCWFK2JgZT9uUzfrkn34RqxXOL95GnVAT5Jp-C_FnTGSz7pCeuHbEVhw~" | tr -d '\n' > /Users/memoor/Vochub/ikay/vault-token\n
 1364* clear
 1365* vault write auth/kubernetes/config \\n  token_reviewer_jwt=@/Users/memoor/Vochub/ikay/vault-token \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@/Users/memoor/Vochub/ikay/vault-ca.crt\n
 1366* echo "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRZQjFGTE01REJuOUZvYXBONmZFV0FrUHRlcC1PWVZmZmstZmdBMUxXR3cifQ.eyJhdWQiOlsiaHR0cHM6Ly9tYXN0ZXIuY2Zjci5pbnRlcm5hbDo4NDQzIl0sImV4cCI6MTc0NjcyNzA5NywiaWF0IjoxNzE1MTkxMDk3LCJpc3MiOiJodHRwczovL21hc3Rlci5jZmNyLmludGVybmFsOjg0NDMiLCJrdWJlcm5ldGVzLmlvIjp7Im5hbWVzcGFjZSI6ImRlZmF1bHQiLCJwb2QiOnsibmFtZSI6Im5ldHNob290IiwidWlkIjoiYTFiMTkyZDgtNzAwMi00OWY2LThhMzktZTViMzU3ZTAwNDAyIn0sInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJkZWZhdWx0IiwidWlkIjoiZDg2NjA0NDMtMDRmZC00NGFhLTlmOGUtZmY0YzliOTU0YmRkIn0sIndhcm5hZnRlciI6MTcxNTE5NDcwNH0sIm5iZiI6MTcxNTE5MTA5Nywic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmRlZmF1bHQ6ZGVmYXVsdCJ9.broQLqYfBJVJZsVQptoD4bE20JOSQ6dGBjuLDZHd_SgCP59psKqC7hK8eozFsw37EK5LbrFKPnO-TUFyG1UdORp5NCH7ew_rd" | base64 -D\n
 1367* echo "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRZQjFGTE01REJuOUZvYXBONmZFV0FrUHRlcC1PWVZmZmstZmdBMUxXR3cifQ.eyJhdWQiOlsiaHR0cHM6Ly9tYXN0ZXIuY2Zjci5pbnRlcm5hbDo4NDQzIl0sImV4cCI6MTc0NjcyNzA5NywiaWF0IjoxNzE1MTkxMDk3LCJpc3MiOiJodHRwczovL21hc3Rlci5jZmNyLmludGVybmFsOjg0NDMiLCJrdWJlcm5ldGVzLmlvIjp7Im5hbWVzcGFjZSI6ImRlZmF1bHQiLCJwb2QiOnsibmFtZSI6Im5ldHNob290IiwidWlkIjoiYTFiMTkyZDgtNzAwMi00OWY2LThhMzktZTViMzU3ZTAwNDAyIn0sInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJkZWZhdWx0IiwidWlkIjoiZDg2NjA0NDMtMDRmZC00NGFhLTlmOGUtZmY0YzliOTU0YmRkIn0sIndhcm5hZnRlciI6MTcxNTE5NDcwNH0sIm5iZiI6MTcxNTE5MTA5Nywic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmRlZmF1bHQ6ZGVmYXVsdCJ9.broQLqYfBJVJZsVQptoD4bE20JOSQ6dGBjuLDZHd_SgCP59psKqC7hK8eozFsw37EK5LbrFKPnO-TUFyG1UdORp5NCH7ew_rd" | base64 --decode\n
 1368* cd helm-onprem/env/mtnrwanda-stage
 1369* sudo vi vochub.yaml
 1370* kubectl exec -it feedback-689fc7858b-vszvc -n default -- sh\n
 1371* clear
 1372* kubectl get secret $(kubectl get serviceaccount default-main -n default -o jsonpath='{.secrets[0].name}') -n default -o jsonpath='{.data.token}' | base64 --decode | tr -d '\n' > /Users/memoor/Vochub/ikay/vault-token-clean\n
 1373* cat /Users/memoor/Vochub/ikay/vault-token-clean\n
 1374* kubectl get rolebinding,clusterrolebinding -A | grep default-main\n
 1375* kubectl describe serviceaccount default-main -n default\n
 1376* kubectl auth can-i list secrets --as=system:serviceaccount:default:default-main\n
 1377* kubectl auth can-i get secret -n default --as=system:serviceaccount:default:default-main\n
 1378* kubectl auth can-i create tokenreviews.authentication.k8s.io --as=system:serviceaccount:default:default-main\n
 1379* sudo vi vault-auth-default-main-tokenreview-binding.yaml
 1380* k apply -f vault-auth-default-main-tokenreview-binding.yaml
 1381* export CLUSTER_NAME=mtnrwanda-stage\nexport GPG_TTY=$(tty)\nkubectl config use-context VOC_CLUSTER\nexport KUBECONFIG=~/.kube/config\nchmod 600 ~/.kube/config\necho "source <(kubectl completion zsh)" >> ~/.zshrc\nsource ~/.zshrc\n alias k=kubectl\ncomplete -o default -F __start_kubectl k
 1382* k apply -f vault-auth-default-main-tokenreview-binding.yaml
 1383* kubectl auth can-i create tokenreviews.authentication.k8s.io --as=system:serviceaccount:default:default-main\n
 1384* kubectl get secret $(kubectl get serviceaccount default-main -n default -o jsonpath='{.secrets[0].name}') -n default -o jsonpath='{.data.token}' | base64 --decode | tr -d '\n' > /Users/memoor/Vochub/ikay/vault-token-new\n
 1385* vault write auth/kubernetes/config \\n  token_reviewer_jwt=@/Users/memoor/Vochub/ikay/vault-token-new \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@/Users/memoor/Vochub/ikay/vault-ca.crt\n
 1386* export VAULT_ADDR='http://127.0.0.1:8200'\n
 1387* vault write auth/kubernetes/config \\n  token_reviewer_jwt=@/Users/memoor/Vochub/ikay/vault-token-new \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@/Users/memoor/Vochub/ikay/vault-ca.crt\n
 1388* echo $VAULT_ADDR\n
 1389* clear
 1390* vault write auth/kubernetes/role/default-main-vault-role \\n  bound_service_account_names=default-main \\n  bound_service_account_namespaces=default \\n  policies=default \\n  ttl=1h\n
 1391* kubectl run -i --tty vault-auth-test --image=alpine --serviceaccount=default-main --restart=Never -- sh\n
 1392* kubectl exec -it vault-auth-test -n default -- sh\n
 1393* kubectl exec -it netshoot  -n default -- sh\n
 1394* VAULT_ADDR='http://127.0.0.1:8200' vault write auth/kubernetes/login \\n  role=default-main-vault-role \\n  jwt=$TOKEN\n
 1395* # From within a pod using the default-main service account\nvault login -method=kubernetes role=default-main-vault-role\n
 1396* vault login -method=kubernetes role=default-main-vault-role
 1397* clear
 1398* vault auth list\n
 1399* kubectl exec -it feedback-689fc7858b-vszvc  -n default -- sh\n
 1400* kubectl exec -it netshoot  -n default -- sh\n
 1401* kubectl exec -it feedback-689fc7858b-vszvc  -n default -- sh\n
 1402* clear
 1403* kubectl run -i --tty netshoot --image=nicolaka/netshoot --restart=Never -- sh\n
 1404* kubectl exec -it feedback-689fc7858b-vszvc -n default -- cat /var/run/secrets/kubernetes.io/serviceaccount/token\n
 1405* kubectl exec -it netshoot  -n default -- sh\n
 1406  vault server -config=vault.hcl
 1407* ~ # ps aux | grep vault\n  675 root      0:00 grep vault\n~ #exit
 1408* ps aux | grep vault
 1409* clear
 1410* cd Vochub/ikay
 1411* kubectl get svc -A | grep vault\n
 1412* kubectl exec -it netshoot  -n default -- sh\n
 1413* vault write auth/kubernetes/role/default-main-vault-role \\n  bound_service_account_names=default-main \\n  bound_service_account_namespaces=default \\n  policies=default-policy \\n  ttl=1h\n
 1414* vault operator unseal 5yjQG37paIit+X0qth+vntxWpmBXVtk76etOyyKKvaYI
 1415* vault operator unseal VoXQPgcFzNJGH7fMouZzg1IcO91m/Q0Q6ZWyT6LVsO62
 1416* vault operator unseal WctoS+LUW8d12ov6xocd/cSlnaTT7QLmcVngVYCPdc3X
 1417* vault write auth/kubernetes/role/default-main-vault-role \\n  bound_service_account_names=default-main \\n  bound_service_account_namespaces=default \\n  policies=default-policy \\n  ttl=1h\n
 1418* vault policy write default-policy - <<EOF\npath "secret/data/*" {\n  capabilities = ["read", "list"]\n}\nEOF\n
 1419* clear
 1420* vault read auth/kubernetes/role/default-main-vault-role\n
 1421* vault read auth/kubernetes/config\n
 1422* kubectl get secret $(kubectl get serviceaccount default-main -n default -o jsonpath='{.secrets[0].name}') -n default -o jsonpath='{.data.token}' | base64 --decode | tr -d '\n' > /Users/memoor/Vochub/ikay/vault-token-new\n
 1423* export VAULT_ADDR='http://vault.default:8200'\nTOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\ncurl -k --request POST --data '{"jwt": "'"$TOKEN"'", "role": "default-main-vault-role"}' $VAULT_ADDR/v1/auth/kubernetes/login\n
 1424* clear
 1425* kubectl get clusterrolebinding -o wide | grep default-main\n
 1426* kubectl auth can-i create tokenreviews.authentication.k8s.io --as=system:serviceaccount:default:default-main\n
 1427* kubectl get secret $(kubectl get serviceaccount default-main -n default -o jsonpath='{.secrets[0].name}') -n default -o jsonpath='{.data.token}' | base64 --decode | tr -d '\n' > /Users/memoor/Vochub/ikay/vault-token-new\n
 1428* vault write auth/kubernetes/config \\n  token_reviewer_jwt=@/Users/memoor/Vochub/ikay/vault-token-new \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@/Users/memoor/Vochub/ikay/vault-ca.crt\n
 1429* vault read auth/kubernetes/role/default-main-vault-role\n
 1430* kubectl get svc -n default vault\n
 1431* vault write auth/kubernetes/config \\n  token_reviewer_jwt=@/Users/memoor/Vochub/ikay/vault-token-new \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@/Users/memoor/Vochub/ikay/vault-ca.crt \\n  kubernetes_host="http://10.157.11.106:8200"\n
 1432* export VAULT_ADDR='http://10.157.11.106:8200'\n
 1433* vault write auth/kubernetes/config \\n  token_reviewer_jwt=@/Users/memoor/Vochub/ikay/vault-token-new \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@/Users/memoor/Vochub/ikay/vault-ca.crt\n
 1434* vault read auth/kubernetes/config\n
 1435* vault status\n
 1436* kubectl get pods -n default -l app=vault\n
 1437* clear
 1438* kubectl get pods --all-namespaces | grep vault\n
 1439* k9s
 1440* kubectl get svc -n default vault\nkubectl get endpoints -n default vault\n
 1441* kubectl port-forward -n default svc/vault 8200:8200\n
 1442* export VAULT_ADDR='http://127.0.0.1:8200'\nvault status\n
 1443* cd Vochub/ikay
 1444* TOKEN_FILE="/Users/memoor/Vochub/ikay/vault-token-new"\nkubectl get secret $(kubectl get serviceaccount default-main -n default -o jsonpath='{.secrets[0].name}') -n default -o jsonpath='{.data.token}' | base64 --decode | tr -d '\n' > $TOKEN_FILE\n
 1445* CA_CERT_FILE="/Users/memoor/Vochub/ikay/vault-ca.crt"\nkubectl exec -it vault-helper -n default -- cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt > $CA_CERT_FILE\n
 1446* vault read auth/kubernetes/config\n
 1447* vault write auth/kubernetes/role/default-main-vault-role \\n  bound_service_account_names=default-main \\n  bound_service_account_namespaces=default \\n  policies=default-policy \\n  ttl=1h\n
 1448  vault server -config=vault.hcl
 1449* cd Vochub/ikay
 1450* vault operator unseal WctoS+LUW8d12ov6xocd/cSlnaTT7QLmcVngVYCPdc3X
 1451* vault operator unseal 5yjQG37paIit+X0qth+vntxWpmBXVtk76etOyyKKvaYI
 1452* export VAULT_ADDR='http://127.0.0.1:8200'\nvault status\n
 1453* vault operator unseal 5yjQG37paIit+X0qth+vntxWpmBXVtk76etOyyKKvaYI
 1454* vault write auth/kubernetes/role/default-main-vault-role \\n  bound_service_account_names=default-main \\n  bound_service_account_namespaces=default \\n  policies=default-policy \\n  ttl=1h\n
 1455* vault read auth/kubernetes/config\n
 1456* kubectl auth can-i create tokenreviews.authentication.k8s.io --as=system:serviceaccount:default:default-main\n
 1457* kubectl auth can-i get secret -n default --as=system:serviceaccount:default:default-main\n
 1458* kubectl auth can-i list secrets --as=system:serviceaccount:default:default-main\n
 1459* export VAULT_ADDR='http://127.0.0.1:8200'\nvault login hvs.S7NI9wNuh4YaMgwD3Ka2N2Zz\n
 1460* export VAULT_ADDR='http://127.0.0.1:8200'
 1461* vault login hvs.S7NI9wNuh4YaMgwD3Ka2N2Zz
 1462* vault operator unseal 5yjQG37paIit+X0qth+vntxWpmBXVtk76etOyyKKvaYI\n
 1463* export VAULT_ADDR='http://127.0.0.1:8200'
 1464* vault login 
 1465* vault operator unseal 5yjQG37paIit+X0qth+vntxWpmBXVtk76etOyyKKvaYI\nvault operator unseal VoXQPgcFzNJGH7fMouZzg1IcO91m/Q0Q6ZWyT6LVsO62\nvault operator unseal WctoS+LUW8d12ov6xocd/cSlnaTT7QLmcVngVYCPdc3X\n
 1466* export VAULT_ADDR='http://127.0.0.1:8200'\nvault login hvs.S7NI9wNuh4YaMgwD3Ka2N2Zz\n
 1467* vault status\n
 1468* kubectl logs vault-0 -n default\n
 1469* clear
 1470* vault auth list\n
 1471* vault auth enable token\n
 1472* vault operator stop\n
 1473* vault operator init
 1474* vault token lookup\n
 1475* clear
 1476* kubectl delete statefulset vault -n default\nkubectl delete service vault vault-internal vault-agent-injector-svc -n default\nkubectl delete pod vault-agent-injector-655c77ddb4-2557j vault-0 -n default\nkubectl delete configmap vault-config -n default\nkubectl delete pvc -l app=vault -n default\nkubectl delete role,rolebinding,secret -l app=vault -n default\n
 1477* rm -rf /path/to/vault/data\n
 1478* kubectl get all -n default | grep vault\n
 1479* kubectl delete pod,vault-agent-injector-655c77ddb4-gfqc8,vault-helper -n default\nkubectl delete deployment vault-agent-injector -n default\nkubectl delete replicaset vault-agent-injector-655c77ddb4 -n default\n
 1480* kubectl delete svc vault vault-internal vault-agent-injector-svc -n default\nkubectl delete configmap vault-config -n default\nkubectl delete pvc -l app=vault -n default\nkubectl delete secret -l app=vault -n default\nkubectl delete clusterrolebinding vault-auth-default-main-binding -n default\nkubectl delete clusterrolebinding vault-auth -n default\n
 1481* kubectl get all -n default | grep vault\n
 1482* kubectl delete pod vault-helper -n default\n
 1483* kubectl delete deployment vault-agent-injector -n default\n
 1484* clear
 1485* helm repo add hashicorp https://helm.releases.hashicorp.com
 1486* helm repo update\n
 1487* helm install vault hashicorp/vault -n default --create-namespace \\n  --set "server.ha.enabled=true" \\n  --set "server.ha.raft.enabled=true" \\n  --set "ui.enabled=true"\n
 1488* helm upgrade vault hashicorp/vault -n default \\n  --set "server.ha.enabled=true" \\n  --set "server.ha.raft.enabled=true" \\n  --set "ui.enabled=true"\n
 1489* helm status vault
 1490* helm get manifest vault
 1491* export VAULT_ADDR='http://vault.default:8200'\n
 1492* vault operator init -key-shares=5 -key-threshold=3 > /Users/memoor/Vochub/ikay/vault-init-output.txt\n
 1493* clear
 1494* kubectl get svc -n default | grep vault\n
 1495* kubectl port-forward -n default svc/vault-ui 8200:8200\n
 1496* kubectl get pods -n default | grep vault\n
 1497* clear
 1498* k logs vault-0 -n defaul
 1499* export CLUSTER_NAME=mtnrwanda-stage\nexport GPG_TTY=$(tty)\nkubectl config use-context VOC_CLUSTER\nexport KUBECONFIG=~/.kube/config\nchmod 600 ~/.kube/config\necho "source <(kubectl completion zsh)" >> ~/.zshrc\nsource ~/.zshrc\n alias k=kubectl\ncomplete -o default -F __start_kubectl k
 1500* k logs vault-0 -n default
 1501* k9s
 1502* kubectl get pvc -n default\n
 1503* kubectl describe pvc data-vault-0 -n default\n
 1504* kubectl get storageclass\n
 1505* clear
 1506* helm upgrade vault hashicorp/vault -n default \\n  --set "server.ha.enabled=true" \\n  --set "server.ha.raft.enabled=true" \\n  --set "ui.enabled=true" \\n  --set "server.ha.raft.storageClass=vochub" \\n  --set "server.ha.raft.resources.requests.storage=10Gi" \\n  --set "server.ha.raft.resources.requests.storageClass=vochub"\n
 1507* kubectl get pvc -n default\n
 1508* ssh -p 9052 ikay@10.150.55.103
 1509* kubectl get pv -n default
 1510* kubectl describe pvc data-vault-0 -n default
 1511* kubectl get storageclass
 1512* clear
 1513* kubectl get storageclass vochub\n
 1514* kubectl edit pvc data-vault-0 -n default\nkubectl edit pvc data-vault-1 -n default\nkubectl edit pvc data-vault-2 -n default\n
 1515* kubectl delete pvc data-vault-0 -n default\nkubectl delete pvc data-vault-1 -n default\nkubectl delete pvc data-vault-2 -n default\n
 1516* sudo vi vault-pvc.yaml
 1517* kubectl apply -f vault-pvc.yaml\n
 1518* kubectl get pvc -n default\n
 1519* kubectl delete pod -l app.kubernetes.io/name=vault -n default\n
 1520* kubectl get pods -n default | grep vault\n
 1521* k9s
 1522* clear
 1523* export VAULT_ADDR='http://vault.default:8200'\n
 1524* vault operator init -key-shares=5 -key-threshold=3 > /Users/memoor/Vochub/ikay/vault-init-output.txt\n
 1525* kubectl port-forward -n default svc/vault-ui 8200:8200\n
 1526* export VAULT_ADDR='http://vault.default:8200'\n
 1527* vault operator init -key-shares=5 -key-threshold=3 > /Users/memoor/Vochub/ikay/vault-init-output.txt
 1528* kubectl get svc -n default | grep vault\n
 1529* kubectl get pods -n default | grep vault\n
 1530* kubectl logs -n default vault-0\n
 1531* export VAULT_ADDR='http://127.0.0.1:8200'\n
 1532* vault operator init -key-shares=5 -key-threshold=3 > /Users/memoor/Vochub/ikay/vault-init-output.txt\n
 1533* cat /Users/memoor/Vochub/ikay/vault-init-output.txt\n
 1534* vault operator unseal ngSh1s9WAMjh7T8si3KY6uEj9ITeiuiNOlVuvd5/LeZp
 1535* vault operator unseal hJtvhnHnY0aqkg1GibkO571+CcpJnjlKbOSV2JudabmU
 1536* vault operator unseal 1X4WT4/6ENbrcdycJHDeGfPeNY3Cnm5YrHoZ8+Ou/+QU
 1537* vault login hvs.XoBFIiwn2seL66dDs8y2eAVX\n
 1538* vault status\n
 1539* vault auth enable kubernetes\n
 1540* vault write auth/kubernetes/config \\n  token_reviewer_jwt=@/Users/memoor/Vochub/ikay/vault-token-new \\n  kubernetes_host="https://voc-mtn.mtn.co.rw:8443" \\n  kubernetes_ca_cert=@/Users/memoor/Vochub/ikay/vault-ca.crt\n
 1541* k get role -n default
 1542* vault write auth/kubernetes/role/default-main-vault-role \\n  bound_service_account_names=default-main \\n  bound_service_account_namespaces=default \\n  policies=default-policy \\n  ttl=1h\n
 1543* vault policy write default-policy - <<EOF\npath "secret/data/*" {\n  capabilities = ["read", "list"]\n}\nEOF\n
 1544* kubectl exec -it netshoot -n default -- sh
 1545* vault status\n
 1546* clear
 1547* vault read auth/kubernetes/config\n
 1548* k9s
 1549* vault status -address="http://vault-1.vault-internal:8200"\n
 1550* vault status -address="http://vault-2.vault-internal:8200"\n
 1551* vault operator unseal -address="http://vault-1.vault-internal:8200" ngSh1s9WAMjh7T8si3KY6uEj9ITeiuiNOlVuvd5/LeZp
 1552* kubectl get pods -n default -o wide | grep vault\n
 1553* vault operator unseal -address="http://10.156.98.42:8200" ngSh1s9WAMjh7T8si3KY6uEj9ITeiuiNOlVuvd5/LeZp
 1554* vault status -address="http://10.156.98.37:8200"\n
 1555* clear
 1556* kubectl logs vault-1 -n default\n
 1557* clear
 1558* vault operator raft join -address="http://10.156.98.42:8200" http://10.156.98.37:8200\n
 1559* vault operator raft join -address="http://10.156.98.40:8200" http://10.156.98.37:8200\n
 1560* cat /Users/memoor/Vochub/ikay/vault-init-output.txt\n
 1561* vault operator unseal -address="http://10.156.98.42:8200" ngSh1s9WAMjh7T8si3KY6uEj9ITeiuiNOlVuvd5/LeZp
 1562* vault operator unseal -address="http://10.156.98.42:8200" hJtvhnHnY0aqkg1GibkO571+CcpJnjlKbOSV2JudabmU
 1563* vault operator unseal -address="http://10.156.98.42:8200" 1X4WT4/6ENbrcdycJHDeGfPeNY3Cnm5YrHoZ8+Ou/+QU
 1564* vault operator unseal -address="http://10.156.98.40:8200" ngSh1s9WAMjh7T8si3KY6uEj9ITeiuiNOlVuvd5/LeZp\n
 1565* vault operator unseal -address="http://10.156.98.40:8200" hJtvhnHnY0aqkg1GibkO571+CcpJnjlKbOSV2JudabmU\n
 1566* vault operator unseal -address="http://10.156.98.40:8200" 1X4WT4/6ENbrcdycJHDeGfPeNY3Cnm5YrHoZ8+Ou/+QU\n
 1567* vault operator raft list-peers -address="http://10.156.98.37:8200"\n
 1568* vault operator raft promote -address="http://10.156.98.42:8200"\n
 1569* vault operator raft join -address="http://10.156.98.42:8200" "http://vault-0.vault-internal:8200"\n
 1570* vault operator raft join -address="http://10.156.98.40:8200" "http://vault-0.vault-internal:8200"\n
 1571* vault operator raft list-peers -address="http://10.156.98.37:8200"\n
 1572* vault operator raft promote -address="http://10.156.98.42:8200"\n
 1573* vault operator raft autopilot set-config -address="http://10.156.98.37:8200" \\n  -cleanup-dead-servers=true \\n  -last-contact-threshold=200ms \\n  -max-trailing-logs=250 \\n  -min-quorum=2 \\n  -server-stabilization-time=10s \\n  -promote-standbys=true\n
 1574* clear
 1575* vault operator raft autopilot set-config -address="http://10.156.98.37:8200" \\n  -cleanup-dead-servers=true \\n  -last-contact-threshold="200ms" \\n  -max-trailing-logs=250 \\n  -min-quorum=2 \\n  -server-stabilization-time="10s" \\n  -promote-standbys=true\n
 1576* vault operator raft autopilot set-config -address="http://10.156.98.37:8200" \\n  -cleanup-dead-servers=true \\n  -last-contact-threshold="200ms" \\n  -max-trailing-logs=250 \\n  -min-quorum=2 \\n  -server-stabilization-time="10s"\n
 1577* vault operator raft autopilot set-config -address="http://10.156.98.37:8200" \\n  -cleanup-dead-servers=true \\n  -last-contact-threshold="200ms" \\n  -max-trailing-logs=250 \\n  -min-quorum=3 \\n  -server-stabilization-time="10s"\n
 1578* vault operator raft autopilot get-config -address="http://10.156.98.37:8200"\n
 1579* vault operator raft list-peers -address="http://10.156.98.37:8200"\n
 1580* vault operator raft promote -address="http://10.156.98.42:8200"\n
 1581* vault operator raft list-peers -address="http://10.156.98.37:8200"\n
 1582* k9s
 1583* vault operator raft autopilot set-config -address="http://10.156.98.37:8200" \\n  -cleanup-dead-servers=true \\n  -last-contact-threshold="200ms" \\n  -max-trailing-logs=250 \\n  -min-quorum=3 \\n  -server-stabilization-time="10s" \\n  -promote-standbys=true\n
 1584* clear
 1585* vault operator raft autopilot set-config -address="http://10.156.98.37:8200" \\n  -cleanup-dead-servers=true \\n  -last-contact-threshold="200ms" \\n  -max-trailing-logs=250 \\n  -min-quorum=3 \\n  -server-stabilization-time="10s"\n
 1586* vault operator raft list-peers -address="http://10.156.98.37:8200"\n
 1587* curl --header "X-Vault-Token: <your-root-token>" \\n  --request PUT \\n  --data '{"promote_standbys": true}' \\n  http://10.156.98.37:8200/v1/sys/storage/raft/autopilot/config\n
 1588* cat vault.hcl
 1589* vi raft-autopilot-admin.hcl
 1590* vault policy write raft-autopilot-admin raft-autopilot-admin.hcl\n
 1591* vault write auth/token/roles/raft-autopilot-admin-role \\n  allowed_policies="raft-autopilot-admin" \\n  orphan=true \\n  period="24h" \\n  renewable=true\n
 1592* vault token create -role="raft-autopilot-admin-role" -description="Raft Autopilot Admin Role Token"\n
 1593* vault token create -role="raft-autopilot-admin-role" \\n  -metadata description="Raft Autopilot Admin Role Token"\n
 1594* curl --header "X-Vault-Token: hvs.CAESIAX1rj80y2-Rmor1tYbUZqAMTcqitL4anwF0_ppYvyC7Gh4KHGh2cy5iVm9jeTZXMDE4b2pHdlkycVZCZFlrcDA" \\n  --request PUT \\n  --data '{"promote_standbys": true}' \\n  http://10.156.98.37:8200/v1/sys/storage/raft/autopilot/config\n
 1595* cat vault.hcl
 1596* cp -r /Users/memoor/Vochub/ikay/vault/data /Users/memoor/Vochub/ikay/vault/data-backup\n
 1597* vi vault.hcl
 1598* pkill -f vault\nvault server -config=/Users/memoor/Vochub/ikay/vault.hcl &\n
 1599* vi vault.hcl
 1600* ps aux | grep vault\n
 1601* clear
 1602* vault server -config=/Users/memoor/Vochub/ikay/vault.hcl &\n
 1603* mkdir -p /Users/memoor/Vochub/ikay/vault/raft\n
 1604* chmod 700 /Users/memoor/Vochub/ikay/vault/raft\n
 1605* vault server -config=/Users/memoor/Vochub/ikay/vault.hcl &\n
 1606  clear
 1607  vault operator init\n
 1608  export VAULT_ADDR='http://127.0.0.1:8200'\n
 1609  vault operator init\n
 1610  vault operator unseal\n
 1611  vault status\n
 1612  curl --header "X-Vault-Token: hvs.CAESIAX1rj80y2-Rmor1tYbUZqAMTcqitL4anwF0_ppYvyC7Gh4KHGh2cy5iVm9jeTZXMDE4b2pHdlkycVZCZFlrcDA" \\n  --request PUT \\n  --data '{"promote_standbys": true}' \\n  http://127.0.0.1:8200/v1/sys/storage/raft/autopilot/config\n
 1613  vault login hvs.R2lJXXBUkqm6GsSHBSXdSVJE
 1614  curl --header "X-Vault-Token: hvs.CAESIAX1rj80y2-Rmor1tYbUZqAMTcqitL4anwF0_ppYvyC7Gh4KHGh2cy5iVm9jeTZXMDE4b2pHdlkycVZCZFlrcDA" \\n  --request PUT \\n  --data '{"promote_standbys": true}' \\n  http://127.0.0.1:8200/v1/sys/storage/raft/autopilot/config\n
 1615  path "sys/storage/raft/autopilot/config" {\n  capabilities = ["update", "read"]\n}\n
 1616  vi raft-autopilot-admin.hcl
 1617  vault write auth/token/roles/raft-autopilot-admin-role \\n  allowed_policies="raft-autopilot-admin" \\n  orphan=true \\n  period="24h" \\n  renewable=true\n
 1618  vault token create -role="raft-autopilot-admin-role" \\n  -metadata description="Raft Autopilot Admin Role Token"\n
 1619  curl --header "X-Vault-Token: hvs.CAESIIKk8Mzr67QBSKVHg9ypBcGYU6TA8-MkD8dAAets1EOQGh4KHGh2cy5CYkpEWG5DS3kxWUk5NkRudjBHQjVHcDg" \\n  --request PUT \\n  --data '{"promote_standbys": true}' \\n  http://127.0.0.1:8200/v1/sys/storage/raft/autopilot/config\n
 1620  k9s
 1621  vi raft-autopilot-admin.hcl
 1622  vault policy write raft-autopilot-admin raft-autopilot-admin.hcl\n
 1623  vault write auth/token/roles/raft-autopilot-admin-role \\n  allowed_policies="raft-autopilot-admin" \\n  orphan=true \\n  period="24h" \\n  renewable=true\n
 1624  vault token create -role="raft-autopilot-admin-role" \\n  -metadata description="Raft Autopilot Admin Role Token"\n
 1625  curl --header "X-Vault-Token: hvs.CAESIC4IG_12okrYAZt3shYLui_a65r_EJAxypc01lplCenCGh4KHGh2cy5rdmFMeVN3amFNbURDYVppdjJMN2FENmQ" \\n  --request PUT \\n  --data '{"promote_standbys": true}' \\n  http://127.0.0.1:8200/v1/sys/storage/raft/autopilot/config\n
 1626  vi vault.hcl
 1627  vi raft-autopilot-admin.hcl
 1628  vault policy write raft-autopilot-admin raft-autopilot-admin.hcl\n
 1629  vault write auth/token/roles/raft-autopilot-admin-role \\n  allowed_policies="raft-autopilot-admin" \\n  orphan=true \\n  period="24h" \\n  renewable=true\n
 1630  vault token create -role="raft-autopilot-admin-role" \\n  -metadata description="Raft Autopilot Admin Role Token"\n
 1631  curl --header "X-Vault-Token: hvs.CAESIIKk8Mzr67QBSKVHg9ypBcGYU6TA8-MkD8dAAets1EOQGh4KHGh2cy5rdmFMeVN3amFNbURDYVppdjJMN2FENmQ" \\n  --request PUT \\n  --data '{"promote_standbys": true}' \\n  http://127.0.0.1:8200/v1/sys/storage/raft/autopilot/config\n
 1632  curl --header "X-Vault-Token: hvs.CAESIKuQ9zcQ7ZmcUaavdXwAy_R8RQFqsH_M_OuGrxrRVwJxGh4KHGh2cy5OWVF5bDM5YzRpdGtIeUJGQmdOOWVQdlI" \\n  --request PUT \\n  --data '{"promote_standbys": true}' \\n  http://127.0.0.1:8200/v1/sys/storage/raft/autopilot/config\n
 1633  clear
 1634  curl --header "X-Vault-Token: hvs.CAESIKuQ9zcQ7ZmcUaavdXwAy_R8RQFqsH_M_OuGrxrRVwJxGh4KHGh2cy5OWVF5bDM5YzRpdGtIeUJGQmdOOWVQdlI" \\n  --request PUT \\n  --data '{"promote_standbys": true}' \\n  http://127.0.0.1:8200/v1/sys/storage/raft/autopilot/config\n
 1635  vault token capabilities hvs.CAESIKuQ9zcQ7ZmcUaavdXwAy_R8RQFqsH_M_OuGrxrRVwJxGh4KHGh2cy5OWVF5bDM5YzRpdGtIeUJGQmdOOWVQdlI sys/storage/raft/autopilot/config\n
 1636  curl --header "X-Vault-Token: hvs.CAESIKuQ9zcQ7ZmcUaavdXwAy_R8RQFqsH_M_OuGrxrRVwJxGh4KHGh2cy5OWVF5bDM5YzRpdGtIeUJGQmdOOWVQdlI" \\n  http://127.0.0.1:8200/v1/sys/storage/raft/autopilot/config\n
 1637  vault version\n
 1638  vi vault.hcl
 1639  vault server -config=/Users/memoor/Vochub/ikay/vault.hcl &\n
 1640  vault status\n
 1641  chmod 700 /Users/memoor/Vochub/ikay/vault/raft\n
 1642  /etc/security/limits.conf
 1643  vault server -config=/Users/memoor/Vochub/ikay/vault.hcl &\n
 1644  clear
 1645  sudo vi /Library/LaunchDaemons/limit.maxfiles.plist\n
 1646  sudo vi /Library/LaunchDaemons/limit.maxproc.plist\n
 1647  sudo launchctl load -w /Library/LaunchDaemons/limit.maxfiles.plist\nsudo launchctl load -w /Library/LaunchDaemons/limit.maxproc.plist\n
 1648  launchctl limit\n
 1649  vault server -config=/Users/memoor/Vochub/ikay/vault.hcl &\n
 1650  chmod 700 /Users/memoor/Vochub/ikay/vault/raft\n
 1651  ls -ld /Users/memoor/Vochub/ikay/vault/raft\n
 1652  vi vault.hcl
 1653  rm -rf /Users/memoor/Vochub/ikay/vault/raft/*\n
 1654  vault server -config=/Users/memoor/Vochub/ikay/vault.hcl &\n
 1655  vault status\n
 1656  curl --header "X-Vault-Token: hvs.CAESIKuQ9zcQ7ZmcUaavdXwAy_R8RQFqsH_M_OuGrxrRVwJxGh4KHGh2cy5OWVF5bDM5bDM5b" \\n  --request PUT \\n  --data '{"promote_standbys": true}' \\n  http://127.0.0.1:8200/v1/sys/storage/raft/autopilot/config\n
 1657  vault token capabilities hvs.CAESIKuQ9zcQ7ZmcUaavdXwAy_R8RQFqsH_M_OuGrxrRVwJxGh4KHGh2cy5OWVF5bDM5bDM5b sys/storage/raft/autopilot/config\n
 1658  vault policy write raft-autopilot-admin raft-autopilot-admin.hcl\n
 1659  vault write auth/token/roles/raft-autopilot-admin-role \\n  allowed_policies="raft-autopilot-admin" \\n  orphan=true \\n  period="24h" \\n  renewable=true\n
 1660  vault token create -role="raft-autopilot-admin-role" \\n  -display-name "Raft Autopilot Admin Role Token"\n
 1661  curl --header "X-Vault-Token: hvs.CAESIKuQ9zcQ7ZmcUaavdXwAy_R8RQFqsH_M_OuGrxrRVwJxGh4KHGh2cy5OWVF5bDM5bDM5b" \\n  --request PUT \\n  --data '{"promote_standbys": true}' \\n  http://127.0.0.1:8200/v1/sys/storage/raft/autopilot/config\n
 1662  sudo curl --header "X-Vault-Token: hvs.CAESIKuQ9zcQ7ZmcUaavdXwAy_R8RQFqsH_M_OuGrxrRVwJxGh4KHGh2cy5OWVF5bDM5bDM5b" \\n  --request PUT \\n  --data '{"promote_standbys": true}' \\n  http://127.0.0.1:8200/v1/sys/storage/raft/autopilot/config\n
 1663  vault token capabilities hvs.CAESIKuQ9zcQ7ZmcUaavdXwAy_R8RQFqsH_M_OuGrxrRVwJxGh4KHGh2cy5OWVF5bDM5bDM5b sys/storage/raft/autopilot/config\n
 1664  vault policy list\n
 1665  vault policy read raft-autopilot-admin\n
 1666* k9s
 1667* k get po
 1668* k describe po vault-1 
 1669* clear
 1670* kubectl exec -it vault-1 -- /bin/sh\n
 1671  clear
 1672  kubectl logs vault-1\n
 1673  clear
 1674  vi vault.hcl
 1675  vault operator raft list-peers\n
 1676  kubectl cp vault-1:/vault/data /path/to/local/backup\n
 1677  vi vault.hcl
 1678  chmod -R 700 /Users/memoor/Vochub/ikay/vault/raft\nchown -R $(whoami):$(whoami) /Users/memoor/Vochub/ikay/vault/raft\n
 1679  chmod -R 700 /Users/memoor/Vochub/ikay/vault/raft\n
 1680  chown -R memoor:staff /Users/memoor/Vochub/ikay/vault/raft\n
 1681  ls -ld /Users/memoor/Vochub/ikay/vault/raft\n
 1682  kubectl delete po vault-1\n
 1683  k9s
 1684  k get pvc
 1685  k describe pvc vault-0 vault-1
 1686  k describe pvc vault-0 
 1687  k describe pvc data-vault-0
 1688  k describe pvc data-vault-1
 1689  k describe pvc data-vault-2
 1690  k edit sts vault
 1691  vi vault.hcl
 1692  kubectl exec -it vault-0 -- /bin/sh\nvault operator init -key-shares=5 -key-threshold=3\n
 1693  kubectl exec -it vault-2 -- /bin/sh\n
 1694* k get po
 1695* k9s
 1696  kubectl exec -it vault-1 -- /bin/sh\n
 1697* k edit sts vault
 1698* kubectl delete po -l app.kubernetes.io/name=vault\n
 1699* kubectl get pods -l app.kubernetes.io/name=vault -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.serviceAccountName}{"\n"}{end}'\n
 1700* kubectl exec -it vault-1 -- /bin/sh\n
 1701* vault operator raft list-peers\n
 1702* clear
 1703* kubectl exec -it vault-1 -- /bin/sh\n
 1704* kubectl delete po vault-1
 1705* kubectl exec -it vault-1 -- /bin/sh
 1706* k get secret -n default
 1707* clear
 1708* k edit sts vault
 1709* sudo vi vault-config.yaml
 1710* kubectl apply -f vault-config.yaml\n
 1711* kubectl delete po -l app.kubernetes.io/name=vault\n
 1712  clear
 1713  k9s
 1714* clear
 1715* k edit sts vault
 1716* kubectl delete po -l app.kubernetes.io/name=vault\n
 1717* k9s
 1718* clear
 1719* k edit sts vault
 1720* kubectl replace -f /var/folders/xg/4pfmq0l11cj63d8b6gyz28q40000gq/T/kubectl-edit-2440759313.yaml
 1721* sudo vi vault-sts.yaml
 1722* k replace -f vault-sts.yaml --force
 1723* kubectl delete po -l app.kubernetes.io/name=vault\n
 1724* k9s
 1725* k edit sts vault
 1726* sudo vi vault-sts.yaml
 1727* ls
 1728* sudo vi vault-config.yaml
 1729* k replace -f vault-config.yaml --force
 1730* sudo vi vault-sts.yaml
 1731* k replace -f vault-sts.yaml --force
 1732* kubectl delete po -l app.kubernetes.io/name=vault\n
 1733* clear
 1734* sudo vi vault-config.yaml
 1735* k replace -f vault-config.yaml --force
 1736* sudo vi vault-sts.yaml
 1737* k replace -f vault-sts.yaml --force
 1738* kubectl get pods -l app.kubernetes.io/name=vault\n
 1739* kubectl logs vault-0 -c vault\n
 1740* sudo vi vault-config.yaml
 1741* sudo vi vault-sts.yaml
 1742* k replace -f vault-sts.yaml --force
 1743* kubectl get pods -l app.kubernetes.io/name=vault\n
 1744* kubectl logs vault-0 -c vault\n
 1745* sudo vi vault-config.yaml
 1746* k replace -f vault-sts.yaml --force
 1747* sudo vi vault-sts.yaml
 1748* k replace -f vault-sts.yaml --force
 1749* kubectl get pods -l app.kubernetes.io/name=vault\n
 1750* kubectl logs vault-0 -c vault\n
 1751* kubectl logs vault-1 -c vault\n
 1752* kubectl logs vault-2 -c vault\n
 1753* clear
 1754* sudo vi vault-config.yaml
 1755* k replace -f vault-config.yaml --force
 1756* sudo vi vault-sts.yaml
 1757* k replace -f vault-sts.yaml --force
 1758* kubectl get pods -l app.kubernetes.io/name=vault\n
 1759* kubectl logs vault-0 -c vault\n
 1760* kubectl logs vault-1 -c vault\n
 1761* kubectl logs vault-2 -c vault\n
 1762* sudo vi vault-config.yaml
 1763* k replace -f vault-config.yaml --force
 1764* sudo vi vault-sts.yaml
 1765* k replace -f vault-sts.yaml --force
 1766* kubectl logs vault-0 -c vault\n
 1767* kubectl get pods -l app.kubernetes.io/name=vault\n
 1768* kubectl logs vault-2 -c vault\n
 1769* kubectl logs vault-1 -c vault\n
 1770* kubectl get pods -l app.kubernetes.io/name=vault\n
 1771* kubectl logs vault-0 -c vault\n
 1772* sudo vi vault-config.yaml
 1773* k replace -f vault-config.yaml --force
 1774* sudo vi vault-sts.yaml
 1775* k replace -f vault-sts.yaml --force
 1776* kubectl get pods -l app.kubernetes.io/name=vault\n
 1777* kubectl logs vault-0 -c vault\n
 1778* sudo vi vault-sts.yaml
 1779* k replace -f vault-sts.yaml --force
 1780* kubectl get pods -l app.kubernetes.io/name=vault\n
 1781* kubectl logs vault-0 -c vault\n
 1782* sudo vi vault-sts.yaml
 1783* k replace -f vault-sts.yaml --force
 1784* kubectl get pods -l app.kubernetes.io/name=vault\n
 1785* kubectl logs vault-0 -c vault\n
 1786* sudo vi vault-sts.yaml
 1787* clear
 1788* sudo vi vault-config.yaml
 1789* k replace -f vault-config.yaml --force
 1790* sudo vi vault-sts.yaml
 1791* k replace -f vault-sts.yaml --force
 1792* kubectl get pods -l app.kubernetes.io/name=vault\n
 1793* kubectl delete statefulset vault --namespace default\nkubectl delete svc vault --namespace default\nkubectl delete configmap vault-config --namespace default
 1794* kubectl delete pvc data-vault-1 data-vault-2 data-vault-0 --namespace default
 1795* rm -rf /Users/memoor/Vochub/ikay/vault/raft\n
 1796* sudo vi vault-pvc.yaml
 1797* helm repo add hashicorp https://helm.releases.hashicorp.com\nhelm repo update\n
 1798* k apply -f vault-pvc.yaml
 1799* sudo vi vault-values.yaml
 1800* kubectl apply -f vault-pvcs.yaml\n
 1801* kubectl apply -f vault-values.yaml\n
 1802* helm install vault hashicorp/vault --namespace default -f vault-values.yaml\n
 1803* helm uninstall vault --namespace default\n
 1804* helm install vault hashicorp/vault --namespace default -f vault-values.yaml\n
 1805* sudo vi vault-values.yaml
 1806* helm install vault hashicorp/vault --namespace default -f vault-values.yaml\n
 1807* sudo vi vault-values.yaml
 1808* clear
 1809* helm pull hashicorp/vault --untar\n
 1810* helm pull hashicorp/vault \n
 1811* cd vault
 1812* ls
 1813* cd
 1814* cd Vochub/ikay
 1815* ls
 1816* tar -xvzf vault-0.28.0.tgz\n
 1817* cd vault
 1818* ls
 1819* cd templates
 1820* ls
 1821* sudo vi server-statefulset.yaml
 1822* cd
 1823* ls
 1824* cd Vochub/ikay
 1825* clear
 1826* helm install vault ./vault --namespace default -f vault-values.yaml\n
 1827* kubectl apply -f - <<EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: vault-config\n  namespace: default\ndata:\n  storageconfig.hcl: |\n    disable_mlock = false\n    ui = true\n\n    listener "tcp" {\n      address = "0.0.0.0:8200"\n      tls_cert_file = "/vault/tls/vault.crt"\n      tls_key_file = "/vault/tls/vault.key"\n      cluster_address = "0.0.0.0:8201"\n    }\n\n    storage "raft" {\n      path = "/vault/data"\n      node_id = "vault-0"  # This will be replaced dynamically\n      cluster_addr = "http://127.0.0.1:8201"\n      bolt_open_timeout = "10s"\n      autopilot {\n        cleanup_dead_servers      = true\n        last_contact_threshold    = "200ms"\n        max_trailing_logs         = 250\n        min_quorum                = 3\n        server_stabilization_time = "10s"\n        promote_standbys          = true\n      }\n    }\n\n    telemetry {\n      unauthenticated_metrics_access = true\n    }\n\n    service_registration "kubernetes" {}\nEOF\n
 1828* kubectl apply -f - <<EOF\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: vault\n  namespace: default\n  labels:\n    app.kubernetes.io/name: vault\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: vault\n  serviceName: "vault-internal"\n  podManagementPolicy: Parallel\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: vault\n        component: server\n    spec:\n      serviceAccountName: default-main\n      containers:\n      - name: vault\n        image: hashicorp/vault:1.16.1\n        imagePullPolicy: IfNotPresent\n        command:\n        - /bin/sh\n        - -ec\n        - |\n          cp /vault/config/storageconfig.hcl /tmp/storageconfig.hcl;\n          sed -i "s|node_id = .*|node_id = \"$(hostname)\"|" /tmp/storageconfig.hcl;\n          sed -i "s|cluster_addr = .*|cluster_addr = \"http://${POD_IP}:8201\"|" /tmp/storageconfig.hcl;\n          /usr/local/bin/docker-entrypoint.sh vault server -config=/tmp/storageconfig.hcl\n        env:\n        - name: HOST_IP\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: status.hostIP\n        - name: POD_IP\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: status.podIP\n        - name: VAULT_ADDR\n          value: "http://127.0.0.1:8200"\n        - name: VAULT_API_ADDR\n          value: "http://${POD_IP}:8200"\n        - name: VAULT_CLUSTER_ADDR\n          value: "http://${POD_IP}:8201"\n        - name: SKIP_CHOWN\n          value: "true"\n        - name: SKIP_SETCAP\n          value: "true"\n        ports:\n        - containerPort: 8200\n          name: http\n          protocol: TCP\n        - containerPort: 8201\n          name: https-internal\n          protocol: TCP\n        - containerPort: 8202\n          name: http-rep\n          protocol: TCP\n        readinessProbe:\n          exec:\n            command:\n            - /bin/sh\n            - -ec\n            - vault status -tls-skip-verify\n          initialDelaySeconds: 10\n          periodSeconds: 10\n          timeoutSeconds: 5\n        volumeMounts:\n        - mountPath: /vault/data\n          name: data\n        - mountPath: /vault/config\n          name: config\n        - mountPath: /vault/tls\n          name: tls\n      volumes:\n      - name: config\n        configMap:\n          name: vault-config\n      - name: tls\n        secret:\n          secretName: common-tlssecret\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      accessModes: ["ReadWriteOnce"]\n      resources:\n        requests:\n          storage: 10Gi\nEOF\n
 1829* kubectl apply -f - <<EOF\napiVersion: v1\nkind: Service\nmetadata:\n  name: vault\n  namespace: default\n  labels:\n    app.kubernetes.io/name: vault\nspec:\n  ports:\n  - port: 8200\n    targetPort: 8200\n    protocol: TCP\n  selector:\n    app.kubernetes.io/name: vault\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: vault-internal\n  namespace: default\n  labels:\n    app.kubernetes.io/name: vault\nspec:\n  clusterIP: None\n  ports:\n  - port: 8201\n    targetPort: 8201\n    protocol: TCP\n  selector:\n    app.kubernetes.io/name: vault\nEOF\n
 1830* clear
 1831* kubectl get pods -l app.kubernetes.io/name=vault\n
 1832* k9s
 1833* sudo vi vault-config.yaml
 1834* k replace -f vault-config.yaml --force
 1835* sudo vi vault-sts.yaml
 1836* k replace -f vault-sts.yaml --force
 1837* kubectl get pods -l app.kubernetes.io/name=vault\n
 1838* kubectl logs vault-0 -c vault\n
 1839* sudo vi vault-sts.yaml
 1840* kubectl delete statefulset vault -n default\nkubectl delete service vault vault-internal vault-agent-injector-svc -n default\nkubectl delete pod vault-agent-injector-655c77ddb4-2557j vault-0 -n default\nkubectl delete configmap vault-config -n default
 1841* helm uninstall vault -n default
 1842* helm uninstall vault --namespace default\n
 1843* rm -rf /Users/memoor/Vochub/ikay/vault/raft\n
 1844* kubectl delete pvc data-vault-1 data-vault-2 data-vault-0 --namespace default
 1845* kubectl get all -n default | grep vault\n
 1846* helm repo add hashicorp https://helm.releases.hashicorp.com\nhelm repo update\n
 1847* helm install vault hashicorp/vault -n default --create-namespace \\n  --set "server.ha.enabled=true" \\n  --set "server.ha.raft.enabled=true" \\n  --set "ui.enabled=true"\n
 1848* export VAULT_ADDR='http://vault.default:8200'\n
 1849* vault operator init -key-shares=5 -key-threshold=3 > /Users/memoor/Vochub/ikay/vault-init-output.txt\n
 1850* kubectl get svc -n default | grep vault\n
 1851  kubectl port-forward -n default svc/vault 8200:8200\n
 1852  kubectl port-forward -n default svc/vault-ui 8200:8200\n
 1853* clear
 1854* k apply -f vault-pvc.yaml
 1855* clear
 1856* kubectl get pvc -n default | grep vault\n
 1857* k get pv -n default
 1858* clear
 1859* kubectl delete pvc data-vault-0 -n default\nkubectl delete pvc data-vault-1 -n default\nkubectl delete pvc data-vault-2 -n default\n
 1860* kubectl delete pv pvc-3f7ac874-5adc-470e-8038-1eb214441ea7\nkubectl delete pv pvc-bfc710c0-6c9f-470e-84fa-a173011de69f\nkubectl delete pv pvc-d5bcb818-e9c2-458c-9b2c-f384025d060b\nkubectl delete pv pvc-f85a759c-a9f9-4b7a-ac2b-3f59dbb881a6\nkubectl delete pv pvc-81db95a1-36b6-40ff-ab7d-76d3145f295b\nkubectl delete pv pvc-b8653ab6-405b-4d54-900c-4f12d0a7f702\n
 1861* k apply -f vault-pvc.yaml
 1862* kubectl delete pod -l app.kubernetes.io/name=vault -n default\n
 1863* kubectl get pvc -n default\n
 1864  kubectl port-forward -n default svc/vault-ui 8200:8200\n
 1865* export VAULT_ADDR='http://127.0.0.1:8200'\n
 1866* vault operator init -key-shares=5 -key-threshold=3 > /Users/memoor/Vochub/ikay/vault-init-output.txt\n
 1867* cat vault-init-output.txt
 1868* kubectl get pods -n default -o wide | grep vault\n
 1869* vault operator unseal KnCqkcJpXoyI2+0Guc8oiBrR7H/2P/HIlfWgdMPd0Xyr
 1870* vault operator unseal sN+En4WO8KHPoJ4mb5Q430eq3yNaq3b2Zeu49IYq6BwK
 1871* vault operator unseal vDx4y2HRnBrIHUpo6z22cTQHCmDIPyPNN6RCRTLk7yZm
 1872* vault login hvs.MY2ahhSQBuzxBpvIthYypl2b
 1873* kubectl delete pod -l app.kubernetes.io/name=vault -n default\n
 1874* kubectl get pods -n default
 1875* clear
 1876* vault status\n
 1877* kubectl logs vault-0 -n default\nkubectl logs vault-1 -n default\nkubectl logs vault-2 -n default\n
 1878* sudo vi vault.hcl
 1879* export VAULT_ADDR='http://127.0.0.1:8200'\nvault status\n\n
 1880* kubectl logs vault-0 -n default\nkubectl logs vault-1 -n default\nkubectl logs vault-2 -n default\n
 1881* clear
 1882* vault operator unseal -address="http://vault-1.vault-internal:8200"
 1883* ls
 1884* cat vault-init-output.txt
 1885* k9s
 1886  sudo vi vault.hcl
 1887  vault operator unseal -address="http://vault-0.vault-internal:8200"
 1888  kubectl run -it --rm debug --image=busybox --restart=Never -- nslookup vault-0.vault-internal\n
 1889  k edit sts vault 
 1890* k get pvc
 1891* sudo vi vault-sts.yaml
 1892* k replace -f vault-sts.yaml --force
 1893* kubectl get pods -l app.kubernetes.io/instance=vault -n default\n
 1894* k logs vault-0
 1895* clear
 1896* kubectl get rolebindings,clusterrolebindings -n default -o wide\n
 1897* kubectl get rolebinding,clusterrolebinding \\n  --all-namespaces \\n  -o custom-columns='KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,SERVICE_ACCOUNTS:subjects[?(@.kind=="ServiceAccount")].name' |\\n  { head -1; grep "default-main"; }\n
 1898* clear
 1899* kubectl describe rolebinding voc-role-binding -n default\n
 1900* kubectl describe clusterrolebinding default-main-pks-privileged\n
 1901* sudo vi vault-clusterrole.yaml
 1902* kubectl apply -f vault-clusterrole.yaml\n
 1903* sudo vi vault-clusterrolebinding.yaml
 1904* kubectl apply -f vault-clusterrolebinding.yaml\n
 1905* kubectl auth can-i list pods --as=system:serviceaccount:default:default-main\nkubectl auth can-i create pods --as=system:serviceaccount:default:default-main\n
 1906* kubectl get pods -l app.kubernetes.io/instance=vault -n default\n
 1907* kubectl rollout restart statefulset/vault -n default\n
 1908* k logs vault-0
 1909* clear
 1910* kubectl get clusterrole use-pks-privileged-psp -o yaml > use-pks-privileged-psp.yaml\n
 1911* sudo vi use-pks-privileged-psp.yaml\n
 1912* kubectl apply -f use-pks-privileged-psp.yaml\n
 1913* kubectl rollout restart statefulset/vault -n default\n
 1914* k logs vault-0
 1915* clear
 1916* ls
 1917* sudo vi vault-clusterrole.yaml
 1918* k apply -f vault-clusterrole.yaml
 1919* sudo vi vault-clusterrole.yaml
 1920* k apply -f vault-clusterrole.yaml
 1921* kubectl get pod vault-0 -n default -o yaml | grep serviceAccountName\n
 1922* kubectl delete pod vault-0 -n default\n
 1923* kubectl delete pod vault-1 -n default\n
 1924* kubectl delete pod vault-2 -n default\n
 1925* k logs vault-0
 1926* clear
 1927* kubectl get pods -n default\n
 1928* k logs vault-0
 1929* curl http://localhost:8500/v1/catalog/services\n
 1930* kubectl get pod vault-0 -n default -o yaml | grep serviceAccountName\n
 1931* k get svc -n default
 1932* clear
 1933* kubectl exec -it vault-0 -n default -- sh\nnc -z -v vault-1.vault-internal 8201\nnc -z -v vault-2.vault-internal 8201\n
 1934* clear
 1935* k logs vault-0
 1936* k9s
 1937* sudo vi vault.hcl
 1938* sudo vi vault-0.hcl
 1939* sudo vi vault-1.hcl
 1940* sudo vi vault-2.hcl
 1941* sudo vi vault-config.yaml
 1942* kubectl replace -f vault-config.yaml --force\n
 1943* clear
 1944* k edit sts vault
 1945* sudo vi vault-config.yaml
 1946* k edit sts vault
 1947  sudo vi vault-sts.yaml
 1948  k replace -f vault-sts.yaml --force
 1949  k delete po vault-0 vault-1 vault-2
 1950  k9s
 1951* clear
 1952* sudo vi vault-sts.yaml
 1953* k replace -f vault-sts.yaml --force
 1954* k delete po vault-0 vault-1 vault-2
 1955* clear
 1956* sudo vi vault-sts.yaml
 1957* k replace -f vault-sts.yaml --force
 1958* k delete po vault-0 vault-1 vault-2
 1959* k logs vault-0
 1960* k logs vault-1
 1961* k logs vault-2
 1962* sudo vi vault.hcl
 1963* sudo vi vault-sts.yaml
 1964* sudo vi vault.hcl
 1965* sudo vi vault-sts.yaml
 1966* k replace -f vault-sts.yaml --force
 1967* k delete po vault-0 vault-1 vault-2
 1968* sudo vi vault-sts.yaml
 1969* k replace -f vault-sts.yaml --force
 1970* k delete po vault-0 vault-1 vault-2
 1971* sudo vi vault-sts.yaml
 1972* k replace -f vault-sts.yaml --force
 1973* sudo vi vault-config.yaml
 1974* k delete po vault-0 vault-1 vault-2
 1975* kubectl logs vault-0\n
 1976* kubectl delete statefulset vault -n default\n
 1977* kubectl get pods -n default | grep vault\n
 1978* clear
 1979* sudo vi vault-config.yaml
 1980* k replace -f vault-config.yaml --force
 1981* sudo vi vault-sts.yaml
 1982* k replace -f vault-sts.yaml --force
 1983* kubectl delete statefulset vault -n default\nkubectl delete pod vault-0 vault-1 vault-2 -n default\n
 1984* sudo vi vault-sts.yaml
 1985* k apply -f vault-sts.yaml 
 1986* kubectl get pods -n default | grep vault\n
 1987* k get pvc
 1988* kubectl get pvc -n default | grep data\n
 1989* kubectl describe pvc data-vault-0 -n default\n
 1990* kubectl describe pvc data-vault-1 -n default\n
 1991* kubectl describe pvc data-vault-2 -n default\n
 1992* kubectl describe node\n
 1993* clear
 1994* kubectl describe statefulset vault -n default\n
 1995* clear
 1996* sudo vi vault-sts.yaml
 1997* k replace -f vault-sts.yaml --force
 1998* kubectl get pods -n default | grep vault\n
 1999* kubectl logs vault-0\n
 2000* sudo vi vault-sts.yaml
 2001* sudo vi vault-config.yaml
 2002* vi extraconfig-from-values.hcl
 2003* vault server -config=extraconfig-from-values.hcl\n
 2004* vi extraconfig-from-values.hcl
 2005* vault server -config=extraconfig-from-values.hcl\n
 2006* vi extraconfig-from-values.hcl
 2007* vault server -config=extraconfig-from-values.hcl\n
 2008* vi vault.hcl
 2009* vi extraconfig-from-values.hcl
 2010* vault server -config=extraconfig-from-values.hcl\n
 2011* sudo vi vault-config.yaml
 2012* k replace -f vault-config.yaml --force
 2013* sudo vi vault-sts.yaml
 2014* k replace -f vault-sts.yaml --force
 2015* k delete po vault-0 vault-1 vault-2
 2016* kubectl logs vault-0\n
 2017* sudo vi vault-sts.yaml
 2018* k replace -f vault-sts.yaml --force
 2019* k delete po vault-0 vault-1 vault-2
 2020* kubectl logs vault-0\n
 2021* kubectl logs vault-1\n
 2022* kubectl logs vault-2\n
 2023* clear
 2024* kubectl describe configmap vault-config
 2025* clear
 2026* kubectl describe statefulset vault
 2027* clear
 2028* sudo vi vault-config.yaml
 2029* k replace -f vault-config.yaml --force
 2030* sudo vi vault-sts.yaml
 2031* k replace -f vault-sts.yaml --force
 2032* k delete po vault-0 vault-1 vault-2
 2033* sudo vi vault-sts.yaml
 2034* k replace -f vault-sts.yaml --force
 2035* k delete po vault-0 vault-1 vault-2
 2036  k9s
 2037* sudo vi vault-sts.yaml
 2038* sudo vi vault-config.yaml
 2039* k9s
 2040* clear
 2041* sudo vi vault.hcl
 2042* sudo vi vault-config.yaml
 2043* k delete configmaps vault-config -n default
 2044* kubectl create configmap vault-config --from-file=vault.hcl -o yaml --dry-run=client | kubectl apply -f -\n
 2045* sudo vi vault-sts.yaml
 2046* kubectl rollout restart statefulset/vault\n
 2047* kubectl logs statefulset/vault-0\nkubectl logs statefulset/vault-1\nkubectl logs statefulset/vault-2\n
 2048* k get sts 
 2049* k describe sts vault 
 2050  k9s
 2051  clear
 2052  sudo vi vault-config.yaml
 2053  k describe configmap vault-config
 2054* sudo vi extraconfig-from-values.hcl
 2055* kubectl create configmap vault-config \\n  --from-file=vault.hcl \\n  --from-file=extraconfig-from-values.hcl \\n  -o yaml --dry-run=client | kubectl apply -f -\n
 2056* kubectl rollout restart statefulset/vault\n
 2057* k describe configmap vault-config
 2058* kubectl logs statefulset/vault-0\nkubectl logs statefulset/vault-1\nkubectl logs statefulset/vault-2\n
 2059* k9s
 2060  k describe configmap vault-config
 2061  clear
 2062  sudo vi vault-sts.yaml
 2063  k replace -f vault-sts.yaml --force
 2064  sudo vi vault-sts.yaml
 2065  k replace -f vault-sts.yaml --force
 2066  kubectl rollout restart statefulset/vault\n
 2067  sudo vi vault-sts.yaml
 2068  k replace -f vault-sts.yaml --force
 2069  kubectl rollout restart statefulset/vault\n
 2070  sudo vi vault-sts.yaml
 2071  k describe pvc data-vault-0
 2072  clear
 2073* ssh -p 9052 ikay@10.150.55.103
 2074  kubectl describe pv pvc-787a88a0-6e71-4f21-b3b0-5a7ea911268f
 2075  kubectl get pods -n default
 2076  k logs nfs-subdir-external-provisioner-6f44b88dd-xr8z5
 2077  clear
 2078  kubectl get pvc data-vault-0 -n default -o jsonpath='{.spec.volumeName}'\n
 2079  kubectl get pv 
 2080  kubectl get pv pvc-787a88a0-6e71-4f21-b3b0-5a7ea911268f -o jsonpath='{.spec.nfs}'\n
 2081  kubectl get pv pvc-8bdd9c28-2a97-40f7-bb03-1855f752cbd3 -o jsonpath='{.spec.nfs}'\n
 2082  kubectl get pv pvc-c03bb332-a065-4017-b21f-2b52ad8dde7c -o jsonpath='{.spec.nfs}'\n
 2083  sudo vi vault-sts.yaml
 2084  kubectl rollout restart statefulset/vault -n default\n
 2085  k replace -f vault-sts.yaml --force
 2086  kubectl rollout restart statefulset/vault -n default\n
 2087  kubectl get pods -l app.kubernetes.io/name=vault -n default\n
 2088  kubectl logs vault-0 -n default\nkubectl logs vault-1 -n default\nkubectl logs vault-2 -n default\n
 2089  clear
 2090  sudo vi vault-config.yaml
 2091* kubectl create configmap vault-config \\n  --from-file=vault.hcl \\n  --from-file=extraconfig-from-values.hcl \\n  -o yaml --dry-run=client | kubectl apply -f -\n
 2092  sudo vi vault-sts.yaml
 2093  k replace -f vault-sts.yaml --force
 2094  kubectl rollout restart statefulset/vault -n default\n
 2095  kubectl get pods -l app.kubernetes.io/name=vault -n default\n
 2096* k9s
 2097* k describe po vault-0
 2098* clear
 2099  sudo vi vault-sts.yaml
 2100  k replace -f vault-sts.yaml --force
 2101  kubectl rollout restart statefulset/vault -n default\n
 2102  kubectl get pods -l app.kubernetes.io/name=vault -n default\n
 2103* k9s
 2104  sudo vi vault-sts.yaml
 2105  k replace -f vault-sts.yaml --force
 2106  kubectl rollout restart statefulset/vault -n default\n
 2107  kubectl get pods -l app.kubernetes.io/name=vault -n default\n
 2108  kubectl get psp\n\n
 2109  clear
 2110  sudo vi permissive-psp.yaml
 2111  vi psp-role.yaml
 2112  vi psp-rolebinding.yaml\n\n
 2113  kubectl apply -f permissive-psp.yaml\nkubectl apply -f psp-role.yaml\nkubectl apply -f psp-rolebinding.yaml\n
 2114  sudo vi vault-sts.yaml
 2115  k replace -f vault-sts.yaml --force
 2116  kubectl rollout restart statefulset/vault -n default\n
 2117  kubectl get pods -l app.kubernetes.io/name=vault -n default\n
 2118  kubectl logs vault-0 -n default\nkubectl logs vault-1 -n default\nkubectl logs vault-2 -n default\n
 2119  clear
 2120  kubectl delete pvc data-vault-0 data-vault-1 data-vault-2 -n default\n
 2121* k delete pv pvc-787a88a0-6e71-4f21-b3b0-5a7ea911268f
 2122  k get pvc
 2123* k get pv
 2124* kubectl patch pvc data-vault-0 -n default -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc data-vault-1 -n default -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc data-vault-2 -n default -p '{"metadata":{"finalizers":null}}'\n\nkubectl delete pvc data-vault-0 data-vault-1 data-vault-2 -n default\n
 2125* k get pv
 2126* k get pvc
 2127* clear
 2128* vi pv-vault-0.yaml\n\n
 2129* vi pv-vault-1.yaml\n\n
 2130* vi pv-vault-2.yaml\n\n
 2131* vi pv-vault-0.yaml\n\n
 2132* vi pv-vault-1.yaml\n\n
 2133* vi pv-vault-2.yaml\n\n
 2134* kubectl apply -f pv-vault-0.yaml\nkubectl apply -f pv-vault-1.yaml\nkubectl apply -f pv-vault-2.yaml\n
 2135* vi pvc-vault-0.yaml\n\n
 2136* vi pvc-vault-1.yaml\n\n
 2137* vi pvc-vault-2.yaml\n\n
 2138* vi pvc-vault-1.yaml\n\n
 2139* kubectl apply -f pvc-vault-0.yaml\nkubectl apply -f pvc-vault-1.yaml\nkubectl apply -f pvc-vault-2.yaml\n
 2140* k get pvc
 2141* clear
 2142* k9s
 2143  sudo vi vault-sts.yaml
 2144  k replace -f vault-sts.yaml --force
 2145  kubectl rollout restart statefulset/vault -n default\n
 2146  kubectl get pods -l app.kubernetes.io/name=vault -n default\n
 2147* k9s
 2148  kubectl logs vault-0 -n default\nkubectl logs vault-1 -n default\nkubectl logs vault-2 -n default\n
 2149  k get sts
 2150  k describe sts vault
 2151  clear
 2152  sudo vi vault-sts.yaml
 2153  k replace -f vault-sts.yaml --force
 2154  kubectl rollout restart statefulset/vault -n default\n
 2155  kubectl get pods -l app.kubernetes.io/name=vault -n default\n
 2156  sudo vi vault-sts.yaml
 2157  k replace -f vault-sts.yaml --force
 2158  kubectl rollout restart statefulset/vault -n default\n
 2159  kubectl get pods -l app.kubernetes.io/name=vault -n default\n
 2160  kubectl get secrets -n default | grep common-tlssecret\n
 2161  sudo vi vault.hcl
 2162  kubectl create configmap vault-config \\n  --from-file=vault.hcl \\n  --from-file=extraconfig-from-values.hcl \\n  -o yaml --dry-run=client | kubectl apply -f -\n
 2163  sudo vi vault-sts.yaml
 2164  k replace -f vault-sts.yaml --force
 2165  kubectl rollout restart statefulset/vault -n default\n
 2166  kubectl get pods -l app.kubernetes.io/name=vault -n default\n
 2167  k describe configmaps vault-config
 2168  clear
 2169  k get secrets -n default | grep common-tls
 2170  kubectl describe secret common-tlssecret
 2171  sudo vi vault.hcl
 2172  kubectl create configmap vault-config \\n  --from-file=vault.hcl \\n  --from-file=extraconfig-from-values.hcl \\n  -o yaml --dry-run=client | kubectl apply -f -\n
 2173  sudo vi vault-sts.yaml
 2174  k replace -f vault-sts.yaml --force
 2175  kubectl rollout restart statefulset/vault -n default\n
 2176  kubectl get pods -l app.kubernetes.io/name=vault -n default\n
 2177  vault operator raft list-peers\n
 2178* clear
 2179* vault operator init -key-shares=5 -key-threshold=3 > vault-init-output.txt\n
 2180* vault operator init\n
 2181  vault operator raft list-peers\n
 2182  export VAULT_ADDR='https://127.0.0.1:8200'\n
 2183  vault operator raft list-peers\n
 2184  cd star_mtn_co_rw_691059851
 2185  ls
 2186  openssl x509 -in combined.crt -text -noout\n
 2187  cd ..
 2188  clear
 2189  export VAULT_ADDR='https://vault.mtn.co.rw:8200'\n
 2190  curl -kv https://vault.mtn.co.rw:8200/v1/sys/health\n
 2191  kubectl exec -it vault-0 vault status
 2192  kubectl exec -it vault-0 -- /bin/sh -c "export VAULT_ADDR='https://127.0.0.1:8200'"\n
 2193  kubectl exec -it vault-0 vault status\n
 2194  vault status
 2195  export VAULT_ADDR=https://vault-internal:8200 \n
 2196  vault status -address=https://<your-vault-address>:8200\n
 2197* vault operator unseal -address="http://vault-0.vault-internal:8200"
 2198* clear
 2199* kubectl port-forward vault-0 8200:8200\n
 2200* VAULT_ADDR=https://localhost:8200
 2201* vault status\n
 2202* vault status -address=https://vault-internal:8200 -cacert=ca.crt\n
 2203* export VAULT_SKIP_VERIFY=true\n
 2204* vault status -address=https://localhost:8200\n
 2205* vault operator init\n
 2206* clear
 2207* vault operator unseal\n
 2208* vault login\n
 2209* vault operator raft list-peers\n
 2210* clear
 2211* kubectl get pods -l "app.kubernetes.io/name=vault,component=server"\n
 2212* kubectl describe pods -l "app.kubernetes.io/name=vault,component=server"\n
 2213* clear
 2214* sudo vi vault-sts.yaml
 2215* k replace -f vault-sts.yaml --force
 2216* kubectl rollout restart statefulset/vault -n default\n
 2217* kubectl get pods -l "app.kubernetes.io/name=vault,component=server"\n
 2218* kubectl exec -it vault-0 -- vault operator raft list-peers\n
 2219* export VAULT_SKIP_VERIFY=true\n
 2220* kubectl exec -it vault-0 -- vault operator raft list-peers\n
 2221* kubectl exec -it vault-0 -- export VAULT_SKIP_VERIFY=true\n\n
 2222* k9s\n\n
 2223* cd ../../..
 2224* clear
 2225* k9s
 2226* clear
 2227* kubectl describe service vault-internal\n
 2228* vault operator raft join http://vault-0.vault-internal:8201\n
 2229* vault status\n
 2230* export VAULT_ADDR=https://vault-internal:8200\n
 2231* export VAULT_SKIP_VERIFY=true\n
 2232* vault status\n
 2233* vi vault.hcl
 2234* vi extraconfig-from-values.hcl
 2235* vi vault.hcl
 2236* kubectl create configmap vault-config \\n  --from-file=vault.hcl \\n  --from-file=extraconfig-from-values.hcl \\n  -o yaml --dry-run=client | kubectl apply -f -\n
 2237* kubectl rollout restart statefulset vault\n
 2238* vault operator raft list-peers -address=https://127.0.0.1:8200\n
 2239* export VAULT_ADDR=https://vault-internal:8200\n
 2240* export VAULT_SKIP_VERIFY=true\n
 2241* vault operator raft list-peers -address=https://127.0.0.1:8200\n
 2242* vault operator raft list-peers -address=https://vault-internal:8200\n
 2243* clear
 2244* export VAULT_SKIP_VERIFY=true\nvault operator raft list-peers -address=https://vault-internal:8200\n
 2245  kubectl logs vault-0\n
 2246  kubectl logs vault-1\n
 2247  kubectl logs vault-2\n
 2248  clear
 2249  vi vault.hcl
 2250  kubectl create configmap vault-config \\n  --from-file=vault.hcl \\n  --from-file=extraconfig-from-values.hcl \\n  -o yaml --dry-run=client | kubectl apply -f -\n
 2251  kubectl rollout restart statefulset vault\n
 2252  kubectl get pods -l "app.kubernetes.io/name=vault,component=server"\n
 2253  kubectl delete po vault-0 vault-1 vault-2\n
 2254  kubectl get pods -l "app.kubernetes.io/name=vault,component=server"\n
 2255  vi vault.hcl
 2256  kubectl create configmap vault-config \\n  --from-file=vault.hcl \\n  --from-file=extraconfig-from-values.hcl \\n  -o yaml --dry-run=client | kubectl apply -f -\n
 2257  kubectl delete po vault-0 vault-1 vault-2\n
 2258  vi vault.hcl
 2259  kubectl create configmap vault-config \\n  --from-file=vault.hcl \\n  --from-file=extraconfig-from-values.hcl \\n  -o yaml --dry-run=client | kubectl apply -f -\n
 2260  kubectl delete po vault-0 vault-1 vault-2\n
 2261  kubectl get pods -l "app.kubernetes.io/name=vault,component=server"\n
 2262  vi vault.hcl
 2263  clear
 2264  kubectl describe configmap vault-config\n
 2265  clear
 2266  vi vault.hcl
 2267  k describe po vault-0
 2268  clear
 2269  kubectl logs vault-0 --previous\n
 2270  vi vault.hcl
 2271  kubectl create configmap vault-config \\n  --from-file=vault.hcl \\n  --from-file=extraconfig-from-values.hcl \\n  -o yaml --dry-run=client | kubectl apply -f -\n
 2272  kubectl delete po vault-0 vault-1 vault-2\n
 2273  kubectl get pods -l "app.kubernetes.io/name=vault,component=server"\n
 2274* sudo vi vault.hcl
 2275* ls
 2276* sudo vi vault-config.yaml
 2277* k9s
 2278* k get po
 2279* export CLUSTER_NAME=mtnrwanda-stage\nexport GPG_TTY=$(tty)\nkubectl config use-context VOC_CLUSTER\nexport KUBECONFIG=~/.kube/config\nchmod 600 ~/.kube/config\necho "source <(kubectl completion zsh)" >> ~/.zshrc\nsource ~/.zshrc\n alias k=kubectl\ncomplete -o default -F __start_kubectl k
 2280* k get po
 2281* k9s
 2282  vi vault-sts.yaml
 2283  k replace -f vault-sts.yaml --force
 2284  kubectl delete po vault-0 vault-1 vault-2\n
 2285  k get po
 2286* k9s
 2287  clear
 2288  sudo vi vault.hcl
 2289  kubectl describe secret common-tlssecret\n
 2290  kubectl scale statefulset vault --replicas=0\n
 2291  kubectl get pods -l app.kubernetes.io/name=vault,component=server\n
 2292  kubectl scale statefulset vault --replicas=3\n
 2293  kubectl get pods -l app.kubernetes.io/name=vault,component=server -w\n
 2294  kubectl logs vault-0\nkubectl logs vault-1\nkubectl logs vault-2\n
 2295  vi vault-sts.yaml
 2296  k replace -f vault-sts.yaml --force
 2297  kubectl scale statefulset vault --replicas=0\n
 2298  kubectl logs vault-0\nkubectl logs vault-1\nkubectl logs vault-2\n
 2299  kubectl scale statefulset vault --replicas=3\n
 2300  kubectl logs vault-0\nkubectl logs vault-1\nkubectl logs vault-2\n
 2301  kubectl get pods -l app.kubernetes.io/name=vault,component=server -w\n
 2302  ls
 2303  cat fluent
 2304  cat fluent.conf
 2305  cd helm-onprem
 2306  ls
 2307  cd ..
 2308  ls
 2309  cd ikay
 2310  ls
 2311  cat commandlines
 2312  clear
 2313  ls
 2314* clear
 2315* k9s
 2316  clear
 2317  vault operator raft list-peers -address=https://vault-internal:8200\n
 2318  vault operator raft list-peers \n
 2319  k get svc
 2320  k get svc -n default
 2321* clear
 2322* k9s
 2323  clear
 2324  export VAULT_ADDR=http://127.0.0.1:8200\n
 2325  vault operator raft list-peers\n
 2326  export VAULT_ADDR=https://127.0.0.1:8200\n
 2327  vault operator raft list-peers\n
 2328  k describe secrets common-tlssecret 
 2329  vault operator raft list-peers -insecure\n
 2330  kubectl proxy
 2331* clear
 2332* export VAULT_ADDR=http://127.0.0.1:8001/api/v1/namespaces/default/services/vault:8200/proxy\n
 2333* export VAULT_ADDR=https://127.0.0.1:8001/api/v1/namespaces/default/services/vault:8200/proxy\n
 2334* vault operator raft list-peers\n
 2335* export VAULT_ADDR=https://127.0.0.1:8001/api/v1/namespaces/default/services/vault:8200/proxy\n
 2336* vault operator raft list-peers\n
 2337* vault operator raft list-peers -tls-skip-verify\n
 2338* sudo vi vault.hcl
 2339* openssl req -x509 -newkey rsa:4096 -sha256 -days 365 -nodes \\n  -keyout local-tls.key -out local-tls.crt -subj "/CN=local-vault-server" \\n  -addext "subjectAltName=IP:127.0.0.1"\n
 2340* ls
 2341* clear
 2342* sudo vi vault.hcl
 2343* pwd
 2344* kubectl create secret tls vault-tls-secret --cert=/Users/memoor/Vochub/ikay/local-tls.crt --key=/Users/memoor/Vochub/ikay/local-tls.key -n default\n
 2345* sudo vi vault.hcl
 2346* kubectl create configmap vault-config \\n  --from-file=vault.hcl \\n  --from-file=extraconfig-from-values.hcl \\n  -o yaml --dry-run=client | kubectl apply -f -\n
 2347* sudo vi vault-sts.yaml
 2348* k replace -f vault-sts.yaml --force
 2349* kubectl delete po vault-0 vault-1 vault-2\n
 2350* k9s
 2351* clear
 2352* k9s
 2353* curl https://127.0.0.1:8201/v1/sys/health --insecure\n
 2354* vault operator raft list-peers \n
 2355* clear
 2356* export VAULT_ADDR=https://127.0.0.1:8001/api/v1/namespaces/default/services/vault:8200/proxy\n
 2357* vault operator raft list-peers
 2358* k9s
 2359  vault operator raft list-peers \n
 2360  k describe configmaps vault-config
 2361  sudo vi vault.hcl
 2362  kubectl create configmap vault-config \\n  --from-file=vault.hcl \\n  --from-file=extraconfig-from-values.hcl \\n  -o yaml --dry-run=client | kubectl apply -f -\n
 2363  k describe configmaps vault-config
 2364  clear
 2365  vault operator raft list-peers \n
 2366  export VAULT_ADDR=https://127.0.0.1:8001/api/v1/namespaces/default/services/vault:8200/proxy\n
 2367  vault operator raft list-peers \n
 2368* clear
 2369* k9s
 2370  sudo vi vault-sts.yaml
 2371* k get secrets -n default | grep vault
 2372  k replace -f vault-sts.yaml --force
 2373  kubectl delete po vault-0 vault-1 vault-2\n
 2374  kubectl get secret local-tls-secret -n default -o jsonpath="{.data}"\n
 2375  kubectl get secret vault-tls-secret -n default -o jsonpath="{.data}"\n
 2376  clear
 2377  sudo vi vault-sts.yaml
 2378  sudo vi vault.hcl
 2379  sudo vi vault-sts.yaml
 2380  kubectl rollout restart statefulset/vault -n default
 2381  clear
 2382  kubectl get secret vault-tls-secret -n default -o jsonpath="{.data['tls\.crt']}" | base64 --decode\nkubectl get secret vault-tls-secret -n default -o jsonpath="{.data['tls\.key']}" | base64 --decode\n
 2383  clear
 2384  kubectl describe pod vault-0 -n default\n
 2385  clear
 2386  sudo vi vault.hcl
 2387  k describe secrets vault-tls-secret 
 2388  sudo vi vault.hcl
 2389  kubectl create configmap vault-config \\n  --from-file=vault.hcl \\n  --from-file=extraconfig-from-values.hcl \\n  -o yaml --dry-run=client | kubectl apply -f -\n
 2390  kubectl rollout restart statefulset/vault -n default
 2391  kubectl exec -it vault-1 -- curl -k https://127.0.0.1:8201/v1/sys/health\n
 2392  vault operator raft list-peers \n
 2393* k9s
 2394  vault operator raft list-peers \n
 2395  curl -k https://127.0.0.1:8201/v1/sys/health\n
 2396  export VAULT_ADDR='https://127.0.0.1:8201'\n\n
 2397  vault status\n
 2398  export VAULT_ADDR='https://127.0.0.1:8200'\n
 2399  vault operator raft list-peers\n
 2400* kubectl get secret vault-tls-secret -n default -o jsonpath="{.data['tls\.crt']}" | base64 --decode > vault-extracted.crt\n
 2401* openssl x509 -in vault-extracted.crt -text -noout\n
 2402  ls
 2403  pwd
 2404* k9s
 2405* clear
 2406* pwd\n
 2407* sudo vi vault-sts.yaml
 2408* k9s
 2409* ls
 2410  clear
 2411  kubectl cp default/vault-0:/vault/local-tls/tls.crt ./tls.crt\nopenssl x509 -in tls.crt -text -noout | grep -A1 "Subject Alternative Name"\n
 2412  k describe secrets vault-tls-secret 
 2413  vi vault-hcl
 2414  vi vault.hcl
 2415  kubectl cp default/vault-0:/vault/local-tls/local-tls.crt ./local-tls.crt\nopenssl x509 -in local-tls.crt -text -noout\n
 2416  k describe secrets vault-tls-secret 
 2417* k9s
 2418* kubectl get svc --namespace default | grep vault\n
 2419* kubectl get ingress --namespace default -o wide\n
 2420* export VAULT_ADDR='https://127.0.0.1:8200'\n
 2421* openssl s_client -connect 127.0.0.1:8200
 2422* kubectl port-forward svc/vault 8200:8200 -n default\n
 2423  clear
 2424  curl -k https://127.0.0.1:8200/v1/sys/health\n
 2425  vault operator unseal <unseal-key>\n
 2426  vault operator unseal \n
 2427  export VAULT_SKIP_VERIFY=true\n
 2428  vault operator unseal \n
 2429  vault status
 2430  vault status\nvault operator raft list-peers\n
 2431  vault token lookup\n
 2432  vault status\nvault operator raft list-peers\n
 2433* k get po -A
 2434* k get deployments.apps -A
 2435* clear
 2436* kubectl delete statefulset vault --namespace default\nkubectl delete svc vault --namespace default\nkubectl delete configmap vault-config --namespace default
 2437* kubectl delete pvc data-vault-1 data-vault-2 --namespace default
 2438* kubectl delete pvc data-vault-0 --namespace default
 2439* rm -rf /Users/memoor/Vochub/ikay/vault/raft\n
 2440* helm uninstall vault
 2441* helm version
 2442* kubectl create namespace vault
 2443* ls
 2444* sudo vi vault-pvc.yaml
 2445* k apply -f vault-pvc.yaml
 2446* k describe secrets common-tlssecret 
 2447* sudo vi override-values.yaml
 2448* clear
 2449* helm repo add hashicorp https://helm.releases.hashicorp.com
 2450* helm search repo hashicorp/vault
 2451* sudo vi override-values.yaml
 2452* helm install vault hashicorp/vault --namespace vault --dry-run
 2453* sudo vi override-values.yaml
 2454* clear
 2455* helm search repo hashicorp/vault --versions
 2456* helm install vault hashicorp/vault --namespace vault --version 0.28.0
 2457* helm install vault hashicorp/vault \\n    --namespace vault \\n    -f override-values.yml \\n    --dry-run\n
 2458* ls -l\n
 2459* clear
 2460* helm install vault hashicorp/vault \\n    --namespace vault \\n    -f override-values.yaml \\n    --dry-run\n
 2461* sudo chmod 644 override-values.yaml\n
 2462* helm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2463* kubectl delete statefulset --namespace vault vault --cascade=false\nhelm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2464* k9s
 2465* k get pvc
 2466* kubectl get statefulset -n vault\n
 2467* k desrcibe sts vault
 2468* k describe sts vault
 2469* k describe sts vault -n vault
 2470* kubectl delete pods -n vault --selector='app.kubernetes.io/name=vault'\n
 2471* k9s
 2472* clear
 2473* kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2474* k get pvc
 2475* k get pvc -n vault
 2476* k describe pvc -n vault data-vault-0    
 2477* kubectl get storageclass\n
 2478* sudo vi override-values.yaml
 2479* helm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2480* k describe pvc -n vault data-vault-0    
 2481* k get pvc -n vault
 2482* kubectl delete pods -n vault --selector='app.kubernetes.io/name=vault'\n
 2483* k9s
 2484* k describe sts vault -n vault
 2485* k get sts -n vault
 2486* k get po -n vault
 2487* k descibe po vault -n vault 
 2488* k describe po vault -n vault 
 2489* sudo vi override-values.yaml
 2490* kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2491* helm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2492* k get po -n vault
 2493* k describe po vault -n vault
 2494* k9s
 2495* k get sts -n vault
 2496* k describe vault -n vault
 2497* k describe sts vault -n vault
 2498* k get po -n vault
 2499* k get pv -vault
 2500* k get pv -n vault
 2501* k delete pv -n default pvc-8bdd9c28-2a97-40f7-bb03-1855f752cbd3 pvc-c03bb332-a065-4017-b21f-2b52ad8dde7c pv-vault-0 pv-vault-1 pv-vault-2
 2502* clear
 2503* k get pv -n vault
 2504* k get pvs - vault
 2505* k get pvs -n vault
 2506* k get pvc -n vault
 2507* sudo vi override-values.yaml
 2508* kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2509* ls
 2510* sudo vi pv-vault-0.yaml
 2511* sudo vi vault-pvc.yaml
 2512* clear
 2513* k get pvc -n vault
 2514* k get storageclasses.storage.k8s.io
 2515* k delete pvc vault-data-0 vault-data-1 vault-data-2 -n vault
 2516* kubectl delete pvc audit-vault-0 -n vault\nkubectl delete pvc audit-vault-1 -n vault\nkubectl delete pvc audit-vault-2 -n vault\nkubectl delete pvc data-vault-0 -n vault\nkubectl delete pvc data-vault-1 -n vault\nkubectl delete pvc data-vault-2 -n vault\n
 2517* k get sts -n vault
 2518* helm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2519* k get pvc -n vault
 2520* k get po -n vault
 2521* k logs vault-0 -n vault
 2522* k describe po -n vault vault-0
 2523* k get pvc
 2524* k get pvc -A
 2525* k get sts
 2526* k get sts -n vault
 2527* k describe sts vault -n vault
 2528* clear
 2529* k get po 
 2530* k describe po nfs-subdir-external-provisioner-6f44b88dd-xr8z5
 2531* kubectl describe storageclass vochub\n
 2532* k get pv -n vault
 2533* k delete pvc pvc-2407e407-218b-4d92-b8b5-70786b1fc4b8 pvc-a513b1db-b95c-44fd-9312-ca9f93753ccd pvc-e4909bf4-3939-4b1c-95e8-bf842039f676
 2534* k delete pvc pvc-2407e407-218b-4d92-b8b5-70786b1fc4b8 pvc-a513b1db-b95c-44fd-9312-ca9f93753ccd pvc-e4909bf4-3939-4b1c-95e8-bf842039f676 -n vault
 2535* k delete pv pvc-2407e407-218b-4d92-b8b5-70786b1fc4b8 pvc-a513b1db-b95c-44fd-9312-ca9f93753ccd pvc-e4909bf4-3939-4b1c-95e8-bf842039f676 -n vault
 2536* clear
 2537* kubectl describe storageclass vochub\nkubectl get pvc -n vault\nkubectl describe pvc -n vault\n
 2538* sudo vi override-values.yaml
 2539* kubectl logs -f -n default nfs-subdir-external-provisioner-6f44b88dd-xr8z5\n
 2540* clear
 2541* kubectl describe deployment nfs-subdir-external-provisioner -n default\n
 2542* clear
 2543* kubectl get clusterrole | grep nfs\n
 2544* kubectl get clusterrolebinding | grep nfs\n
 2545* k describe clusterrole nfs-subdir-external-provisioner-runner
 2546* k describe clusterrolebinding  ClusterRole/nfs-subdir-external-provisioner-runner run-nfs-subdir-external-provisioner
 2547* k describe clusterrolebinding  ClusterRole/nfs-subdir-external-provisioner-runner 
 2548* sudo vi test-pvc.yaml
 2549* k apply -f test-pvc.yaml
 2550* sudo vi test-pvc.yaml
 2551* k apply -f test-pvc.yaml
 2552* kubectl logs -f -n default nfs-subdir-external-provisioner-<pod_id>\n
 2553* kubectl logs -f -n default nfs-subdir-external-provisioner-6f44b88dd-xr8z5\n
 2554* clear
 2555* kubectl describe pvc test-pvc -n vault
 2556* k get pv
 2557* kubectl describe pv pvc-309bd3d6-ad1a-4048-835f-06abe33d12e9
 2558* clear
 2559* sudo vi override-values.yaml
 2560* kubectl get events -n vault\n
 2561* kubectl describe statefulset vault -n vault\n
 2562* kubectl describe pvc data-vault-0 -n vault\n
 2563* sudo vi override-values.yaml
 2564* k delete sts -n vault vault
 2565* clear
 2566* helm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2567* kubectl get pvc -n vault\nkubectl get events -n vault\n
 2568* clear
 2569* kubectl get storageclass vochub -o yaml\n
 2570* kubectl get statefulset vault -n vault -o yaml\n
 2571* k edit sts vault -n vault
 2572* clear
 2573* k delete sts -n vault vault
 2574* kubectl delete pvc -l app.kubernetes.io/name=vault -n vault\n
 2575  clear
 2576  k get pv
 2577  k get pvc
 2578* helm get manifest vault -n vault\n\n
 2579* clear
 2580* helm get manifest vault -n vault\n
 2581* clear
 2582  sudo vi override-values.yaml
 2583  helm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2584  k edit sts vault -n vault
 2585  sudo vi vault-sts.yaml
 2586  k replace -f sts vault -n vault --force
 2587  k replace -f vault-sts.yaml -n vault --force
 2588  sudo vi vault-sts.yaml
 2589  k replace -f vault-sts.yaml -n vault --force
 2590  kubectl rollout restart statefulset/vault -n vault\n
 2591  kubectl get pvc -n vault\n
 2592  kubectl delete pvc audit-vault-0 audit-vault-1 audit-vault-2 data-vault-0 data-vault-1 data-vault-2 -n vault\n
 2593  clear
 2594  kubectl get pvc -n vault\n
 2595  k get sts
 2596  k get sts -n vault
 2597  k describe sts -n vault vault
 2598  kubectl get pvc \n
 2599  k delete sts -n vault vault
 2600  k get po -n vault
 2601  clear
 2602  ls
 2603  clear
 2604  cat pv-vault-0.yaml
 2605* ssh -p 9052 ikay@10.150.55.103
 2606  sudo vi pv-pvc-vault.yaml
 2607  k apply -f pv-pvc-vault.yaml -n vault
 2608  helm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2609  k get pv pvc
 2610  clear
 2611  k get pv
 2612  k get pvc
 2613  k get sts
 2614  k get sts -n vault
 2615  k describe sts vault -n vault
 2616  kubectl get pvc -n vault\n
 2617  clear
 2618  k get po -n vault
 2619  k logs vault-0
 2620  k describe po vault-0
 2621* k9s
 2622* k9s -n vault
 2623  # Export the secret from the default namespace\nkubectl get secret common-tlssecret -n default -o yaml > common-tlssecret.yaml\n\n# You might need to edit the file to remove any namespace-specific metadata\n# Then create the secret in the vault namespace\nkubectl apply -f common-tlssecret.yaml -n vault\n
 2624  sudo vi common-tlssecret.yaml
 2625  kubectl apply -f common-tlssecret.yaml -n vault
 2626* clear
 2627* ssh -p 9052 ikay@10.150.55.103
 2628* k9s -n vault
 2629  kubectl delete pod vault-0 vault-1 vault-2 -n vault\n
 2630  kubectl describe pv pv-vault-0\nkubectl describe pvc data-vault-0 -n vault\n
 2631  clear
 2632  k get pv
 2633  k describe pv pv-audit-vault-0
 2634  kubectl describe pvc data-vault-0 -n vault
 2635  sudo vi override-values.yaml
 2636  kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2637  helm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2638* ssh -p 9052 ikay@10.150.55.103
 2639  helm get manifest vault
 2640* k9s -n vault
 2641  sudo vi override-values.yaml
 2642  kubectl delete pod -n vault --all\n
 2643  clear
 2644  kubectl get secrets -n vault\n
 2645  kubectl exec -it vault-0 -n vault -- ls /etc/vault/tls\n
 2646  sudo vi override-values.yaml
 2647  kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2648  helm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2649  sudo vi override-values.yaml
 2650  kubectl get secret common-tlssecret -n vault -o jsonpath="{.data}"\n
 2651  clear
 2652  helm get values vault -n vault\n
 2653  sudo vi override-values.yaml
 2654  kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2655  kubectl delete pod -n vault --all\n
 2656  helm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2657  helm get values vault -n vault\n
 2658  sudo vi override-values.yaml
 2659  k edit sts vault -n vault
 2660  sudo vi override-values.yaml
 2661  helm get values vault -n vault\n
 2662  sudo vi override-values.yaml
 2663  kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2664  kubectl delete pod -n vault --all\n
 2665  helm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2666  helm get values vault -n vault\n
 2667  sudo vi override-values.yaml
 2668  kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2669  helm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2670  k edit sts vault -n vault
 2671  helm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2672  clear
 2673  kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2674  sudo vi override-values.yaml
 2675  kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2676  helm upgrade --install vault hashicorp/vault --namespace vault -f override-values.yaml\n
 2677* k9s
 2678  k edit sts vault -n vault
 2679  k log -n vault vault-0
 2680  k logs -n vault vault-0
 2681  sudo vi override-values.yaml
 2682  clear
 2683  cd vault
 2684  ls
 2685  ca LICENSE
 2686  cat LICENSE
 2687  clear
 2688  cd templates
 2689  ls
 2690  sudo vi server-statefulset.yaml
 2691  cd ..
 2692  ls
 2693  sudo vi values.yaml
 2694  cd ..
 2695  clear
 2696  kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2697  k delete sts -n vault vault
 2698  kubectl delete pvc audit-vault-0 audit-vault-1 audit-vault-2 data-vault-0 data-vault-1 data-vault-2 -n vault\n
 2699  k get pv
 2700  k delete pv pv-audit-vault-0 pv-audit-vault-1 pv-audit-vault-2 pv-data-vault-0 pv-data-vault-1 pv-data-vault-2
 2701  k get pv
 2702  kubectl patch pv pv-audit-vault-0 -p '{"metadata":{"finalizers":null}}'\n
 2703  kubectl patch pv pv-audit-vault-1 -p '{"metadata":{"finalizers":null}}'\n
 2704  kubectl patch pv pv-audit-vault-2 -p '{"metadata":{"finalizers":null}}'\n
 2705  kubectl patch pv pv-data-vault-2 -p '{"metadata":{"finalizers":null}}'\n
 2706  kubectl patch pv pv-data-vault-1 -p '{"metadata":{"finalizers":null}}'\n
 2707  kubectl patch pv pv-data-vault-0 -p '{"metadata":{"finalizers":null}}'\n
 2708  k delete pv pv-audit-vault-0 pv-audit-vault-1 pv-audit-vault-2 pv-data-vault-0 pv-data-vault-1 pv-data-vault-2
 2709  kubectl delete pvc audit-vault-0 audit-vault-1 audit-vault-2 data-vault-0 data-vault-1 data-vault-2 -n vault\n
 2710  k get pvc -n vault
 2711  kubectl patch pvc audit-vault-0 -p '{"metadata":{"finalizers":null}}'\n
 2712  k get ov
 2713  k get pv
 2714  kubectl get pvc audit-vault-0 -n vault -o jsonpath="{.metadata.finalizers}"\n
 2715  kubectl patch pvc audit-vault-0 -n vault -p '{"metadata":{"finalizers": []}}' --type=merge\n
 2716  kubectl patch pvc audit-vault-1 -n vault -p '{"metadata":{"finalizers": []}}' --type=merge\n
 2717  kubectl patch pvc audit-vault-2 -n vault -p '{"metadata":{"finalizers": []}}' --type=merge\n
 2718  kubectl patch pvc data-vault-2 -n vault -p '{"metadata":{"finalizers": []}}' --type=merge\n
 2719  kubectl patch pvc data-vault-1 -n vault -p '{"metadata":{"finalizers": []}}' --type=merge\n
 2720  kubectl patch pvc data-vault-0 -n vault -p '{"metadata":{"finalizers": []}}' --type=merge\n
 2721  k get pvc -n vault
 2722  helm uninstall vault
 2723  helm uninstall vault -n vault
 2724  sudo vi override-values.yaml
 2725  clear
 2726  helm version
 2727  helm search repo hashicorp/vault
 2728  helm search repo hashicorp/vault --versions
 2729  k describe secrets common-tls 
 2730  clear
 2731* sudo vi override-values.yaml
 2732  cat > override-values.yml << EOF\n# Vault Helm Chart Value Overrides\nglobal:\n  enabled: true\n  tlsDisable: false\n\ninjector:\n  enabled: true\n  # Use the Vault K8s Image https://github.com/hashicorp/vault-k8s/\n  image:\n    repository: "hashicorp/vault-k8s"\n    tag: "latest"\n\n  resources:\n      requests:\n        memory: 256Mi\n        cpu: 250m\n      limits:\n        memory: 256Mi\n        cpu: 250m\n\nserver:\n  image:\n    repository: "hashicorp/vault"\n    tag: "1.16.1"\n\n  # These Resource Limits are in line with node requirements in the\n  # Vault Reference Architecture for a Small Cluster\n  resources:\n    requests:\n      memory: 8Gi\n      cpu: 2000m\n    limits:\n      memory: 16Gi\n      cpu: 2000m\n\n  # For HA configuration and because we need to manually init the vault,\n  # we need to define custom readiness/liveness Probe settings\n  readinessProbe:\n    enabled: true\n    path: "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"\n  livenessProbe:\n    enabled: true\n    path: "/v1/sys/health?standbyok=true"\n    initialDelaySeconds: 60\n\n  # extraEnvironmentVars is a list of extra environment variables to set with the stateful set. These could be\n  # used to include variables required for auto-unseal.\n  #extraEnvironmentVars:\n  #  VAULT_CACERT: /vault/userconfig/tls-ca/ca.crt\n\n  # extraVolumes is a list of extra volumes to mount. These will be exposed\n  # to Vault in the path `/vault/userconfig/<name>/`.\n  extraVolumes:\n    - type: secret\n      name: common-tlssecret\n    \n  # This configures the Vault Statefulset to create a PVC for audit logs.\n  # See https://www.vaultproject.io/docs/audit/index.html to know more\n  auditStorage:\n    enabled: true\n\n  standalone:\n    enabled: false\n\n  # Run Vault in "HA" mode.\n  ha:\n    enabled: true\n    replicas: 5\n    raft:\n      enabled: true\n      setNodeId: true\n\n      config: |\n        ui = true\n        cluster_name = "vault-integrated-storage"\n        listener "tcp" {\n          address = "[::]:8200"\n          cluster_address = "[::]:8201"\n          tls_cert_file = "/vault/userconfig/common-tlssecret/tls.crt"\n          tls_key_file = "/vault/userconfig/common-tlssecret/tls.key"\n          #tls_client_ca_file = "/vault/userconfig/tls-server/client-auth-ca.pem"\n        }\n\n        storage "raft" {\n          path = "/vault/data"\n            retry_join {\n            leader_api_addr = "https://vault-0.vault-internal:8200"\n            leader_ca_cert_file = "/vault/userconfig/common-tlssecret/cacert.crt"\n            leader_client_cert_file = "/vault/userconfig/common-tlssecret/tls.crt"\n            leader_client_key_file = "/vault/userconfig/common-tlssecret/tls.key"\n          }\n          retry_join {\n            leader_api_addr = "https://vault-1.vault-internal:8200"\n            leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"\n            leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"\n            leader_client_key_file = "/vault/userconfig/tls-server/server.key"\n          }\n          retry_join {\n            leader_api_addr = "https://vault-2.vault-internal:8200"\n            leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"\n            leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"\n            leader_client_key_file = "/vault/userconfig/tls-server/server.key"\n          }\n          retry_join {\n              leader_api_addr = "https://vault-3.vault-internal:8200"\n              leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"\n              leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"\n              leader_client_key_file = "/vault/userconfig/tls-server/server.key"\n          }\n          retry_join {\n              leader_api_addr = "https://vault-4.vault-internal:8200"\n              leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"\n              leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"\n              leader_client_key_file = "/vault/userconfig/tls-server/server.key"\n          }\n\n        }\n\n# Vault UI\nui:\n  enabled: true\n  serviceType: "LoadBalancer"\n  serviceNodePort: null\n  externalPort: 8200\n\n  # For Added Security, edit the below\n  #loadBalancerSourceRanges:\n  #   - < Your IP RANGE Ex. 10.0.0.0/16 >\n  #   - < YOUR SINGLE IP Ex. 1.78.23.3/32 >\nEOF\n
 2733* cat > mtnrw-override-values.yml
 2734* clear
 2735* ls
 2736* cat mtnrw-override-values.yml
 2737  sudo vi mtnrw-override-values.yml
 2738* cat mtnrw-override-values.yml
 2739* sudo vi override-values.yaml
 2740  k get secrets -n vault
 2741  helm uninstall vault -n vault
 2742  helm repo add hashicorp https://helm.releases.hashicorp.com
 2743  helm search repo hashicorp/vault
 2744  helm install vault hashicorp/vault --namespace vault --dry-run
 2745  clear
 2746  helm install vault hashicorp/vault \\n    --namespace vault \\n    --set "server.ha.enabled=true" \\n    --set "server.ha.replicas=5" \\n    --dry-run\n
 2747  clear
 2748  helm install vault hashicorp/vault \\n    --namespace vault \\n    -f mtnrw-override-values.yml \\n    --dry-run\n
 2749  clear
 2750  helm install vault hashicorp/vault --namespace vault -f mtnrw-override-values.yaml
 2751  ls
 2752  clear
 2753  helm install vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 2754  k get po
 2755  k get po -vault
 2756  k get po -n vault
 2757* clear
 2758* k9s
 2759  sudo vi mtnrw-override-values.yml
 2760  clear
 2761  k get pv
 2762  k get pv -vault
 2763  k get pv -n vault
 2764  k get pvc -n vault
 2765  kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2766  sudo vi mtnrw-override-values.yml
 2767* k9s -n wvault
 2768* cat mtnrw-override-values.yml
 2769* clear
 2770* kubectl get configmap vault-config -n vault -o yaml\n
 2771* clear
 2772* sudo vi vault.hcl
 2773* hclfmt -w vault.hcl\n
 2774* /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n
 2775* brew install go\n
 2776* export GOPATH=$HOME/go\nexport PATH=$PATH:$GOPATH/bin\n
 2777* source ~/.bash_profile\n# or\nsource ~/.zshrc\n
 2778* go install github.com/fatih/hclfmt@latest\n
 2779* hclfmt --version\n
 2780* clear
 2781* hclfmt -w vault.hcl\n
 2782* nomad job validate vault.hcl
 2783* sudo vi mtnrw-override-values.yml
 2784* rm -rf .mtnrw-override-values.yml.swp
 2785* sudo vi mtnrw-override-values.yml
 2786* kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2787* helm install vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 2788* helm uninstall vault -n vault
 2789* helm install vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 2790* k9s -n vault
 2791* clear
 2792* k9s -n vault
 2793  sudo vi mtnrw-override-values.yml
 2794* sudo vi vault.hcl
 2795* hclfmt -w vault.hcl\n
 2796* kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 2797* kubectl get configmap vault-config -n vault -o yaml\n
 2798* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 2799* clear
 2800* kubectl get pods -n vault -w\n
 2801* kubectl get pvc -n vault\n
 2802* kubectl get storageclass\n
 2803* kubectl get pv\n
 2804* clear
 2805* ssh -p 9052 ikay@10.150.55.103
 2806* clear
 2807* sudo vi pv-pvc-vault.yaml
 2808* k apply -f pv-pvc-vault.yaml
 2809* clear
 2810* kubectl delete pvc audit-vault-0 audit-vault-1 audit-vault-2 audit-vault-3 audit-vault-4 -n vault\nkubectl delete pvc data-vault-0 data-vault-1 data-vault-2 data-vault-3 data-vault-4 -n vault\n
 2811* k apply -f pv-pvc-vault.yaml
 2812* kubectl get secret common-tlssecret -n vault -o yaml\n
 2813* kubectl describe pod vault-0 -n vault\n
 2814* clear
 2815* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 2816* kubectl get secret common-tlssecret -n vault -o yaml\n
 2817* clear
 2818* echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lVSDFGZVJVa25KKzc1cm84VjJpTCt0cG9tZUljd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0xURUxNQWtHQTFVRUF4TUNRMEV4RFRBTEJnTlZCQXNUQkZSTFIwa3hEekFOQmdOVkJBb1RCbFpOZDJGeQpaVEFlRncweU16QTJNekF3TmpJNU1UVmFGdzB5TnpBMk16QXdOakk1TVRWYU1DMHhDekFKQmdOVkJBTVRBa05CCk1RMHdDd1lEVlFRTEV3UlVTMGRKTVE4d0RRWURWUVFLRXdaV1RYZGhjbVV3Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURFK0NBWFFnZjFMZm9CcTFMdjRodmZVMHpCY216by9XWjU3L2xWbUlEbAppQmZ0YnBRZ2hpMlFRdGRGNmFjYUxLMEZsWEpGdEIxT1dHNkdVeG9tUFhaRk9nWGJZbnJ4WWZlLzc3aW1teG55CmJnYzlBVXU0ZndBZ0J5cU43dzBhTml3QlVWZHBMK29Tb3RsblVjbUVyblJldVBRdXBhaW0xdXdVaVNpOGdBSlEKdXlUREJKMHFtUkZWcWx2RDFubHJwT0o5MmwwTzhkOG1ma2h4enJGR2dZOGl4aVNlZ2UzN3p4SWtNdnVwdHpVUwp4VlV0VUFwUWthbjlYa0F2UzFWajNOc0dpL3ViVWlva3dGRDkwMEE1V3huTTlXQ2Z6T05NdmYzWHM2MHpLSUhlCkZqOU9jckk3TUZUa1ZoV0NCNkVWNHZ2OTVkdFpBTnE1VEpGdVlwSG1zM1dCQWdNQkFBR2pVekJSTUIwR0ExVWQKRGdRV0JCUzlHb1BzTEZPOXZnR25vVCtTc2NOVEh0NCtxVEFmQmdOVkhTTUVHREFXZ0JTOUdvUHNMRk85dmdHbgpvVCtTc2NOVEh0NCtxVEFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVClREc0FlNlViaVB5VnRqRmxvMm5lblhpcUNqRnoxZkMrVEl3R1ZPUyt6QUNWL29BTHBJTXpXOUZpN29VdmhmR1MKMWE2aEVCeHFqeDdjQnVsS3Z5VkhJWkhqUjVFMmE3ZkZmOFJQNTA3QVNGbmJSSVRrVGZpSjRMQlJUT0o0WkEvbAp3RHJpVW1xL25lSFhRSWthWjFnS1ViWXl4MlljdDBiQ2N4ZC9leE8yYjJZSEhsL2U5cWVmY2t4Mk10SllCcmVPCkZ2M1FhY3h5Q3U0eDJnUUtJQS9xQzZ6TExQd0Ftc1RsSEtrWmttUitJbmdIaWZnN0RJQ0kvSVg3ejNWNDBHUzkKNSt2QnVFWkxvcnV5LzNGd21IUzJlVTB0MGJRaGZudHREUDZKZDhORUdlbnlyRWRyMHZSMGcvMHNKRlhibWtQWQoyS2FoRmtCVWo5aWR0aHVnOEQ2RgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" | base64 --decode | openssl x509 -text -noout\n
 2819* clear
 2820* sudo vi vault-hcl
 2821* sudo vi vault.hcl
 2822* kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 2823* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 2824* kubectl get secret common-tlssecret -n vault -o jsonpath="{.data['tls\.crt']}" | base64 --decode >vault-tls.crt\n
 2825* cat vault-tls.crt
 2826* clear
 2827* awk '-----BEGIN CERTIFICATE-----\nMIIGvjCCBaagAwIBAgIQAcfkM8lWuZPqPbZe6P+2djANBgkqhkiG9w0BAQsFADBZ\nMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMTMwMQYDVQQDEypE\naWdpQ2VydCBHbG9iYWwgRzIgVExTIFJTQSBTSEEyNTYgMjAyMCBDQTEwHhcNMjQw\nMzI2MDAwMDAwWhcNMjUwNDAxMjM1OTU5WjBRMQswCQYDVQQGEwJSVzEPMA0GA1UE\nBxMGS2lnYWxpMRswGQYDVQQKExJNVE4gUndhbmRhQ2VsbCBQTEMxFDASBgNVBAMM\nCyoubXRuLmNvLnJ3MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxgOT\nUBtfzCr/p6P/l1MGqzO4Dqp/jZ7sVpgDdxZboobPWa1frKES7jh+2SuimKLVa/yN\nx/MAoSployVCG3ilPu5mzgAd2wgW3I5rfFV4PX6DehwfAPbx4c5a8VMniRFkT92u\nx4IMeNEsC665a3UhTQzGAxtYYIjri0ByreTwxvCYMDzGAOdXCTNHHF90Y73IpPtN\n6Kr0RxEsX3gBWxbbApbkrZVm8k9WBhcxxWJWg68LHVHL7l0R/jM6I7FVlUAy7AAz\nZKuAeD25wiWvgAuvtNQDCdYgYVa2GVv0ifHjCIBEPcHpWMSgnxDvlyMCb4T+wlGE\nvmDBQjI7zuGAtlRhDQIDAQABo4IDiDCCA4QwHwYDVR0jBBgwFoAUdIWAwGbH3zfe\nz70pN6oDHb7tzRcwHQYDVR0OBBYEFPCnEzTnPqwjm0n+dugbm7uHHTmuMBYGA1Ud\nEQQPMA2CCyoubXRuLmNvLnJ3MD4GA1UdIAQ3MDUwMwYGZ4EMAQICMCkwJwYIKwYB\nBQUHAgEWG2h0dHA6Ly93d3cuZGlnaWNlcnQuY29tL0NQUzAOBgNVHQ8BAf8EBAMC\nBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMIGfBgNVHR8EgZcwgZQw\nSKBGoESGQmh0dHA6Ly9jcmwzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydEdsb2JhbEcy\nVExTUlNBU0hBMjU2MjAyMENBMS0xLmNybDBIoEagRIZCaHR0cDovL2NybDQuZGln\naWNlcnQuY29tL0RpZ2lDZXJ0R2xvYmFsRzJUTFNSU0FTSEEyNTYyMDIwQ0ExLTEu\nY3JsMIGHBggrBgEFBQcBAQR7MHkwJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRp\nZ2ljZXJ0LmNvbTBRBggrBgEFBQcwAoZFaHR0cDovL2NhY2VydHMuZGlnaWNlcnQu\nY29tL0RpZ2lDZXJ0R2xvYmFsRzJUTFNSU0FTSEEyNTYyMDIwQ0ExLTEuY3J0MAwG\nA1UdEwEB/wQCMAAwggF/BgorBgEEAdZ5AgQCBIIBbwSCAWsBaQB2AE51oydcmhDD\nOFts1N8/Uusd8OCOG41pwLH6ZLFimjnfAAABjnpaMOEAAAQDAEcwRQIhAJB1EK6r\nwpv/mp34NdTMUDpQXV/GjKsTAVkhAT/EagCbAiBid2D7HPv1rPQwJ94HaU1LtQpu\n8g7qPukSu9kQARRnoQB3AH1ZHhLheCp7HGFnfF79+NCHXBSgTpWeuQMv2Q6MLnm4\nAAABjnpaMDMAAAQDAEgwRgIhANj0wEEWsSmGf65CDkWtppvlw1+aWl4JTi9DoE+O\nexi6AiEAh7fXoRo00a909cIcQAKcy3upuEEKhU+zOIbTDSLTLlYAdgDm0jFjQHeM\nwRBBBtdxuc7B0kD2loSG+7qHMh39HjeOUAAAAY56WjBDAAAEAwBHMEUCIQCPYJ7c\nLPZN9Dyv7ooxrffnWLsaATXFvXFGk+frIXMEGAIgQMXuBhaogQhkhUmN+Chnxbn+\nqd1ChPG6o/2n/ghh+54wDQYJKoZIhvcNAQELBQADggEBAE5lPq24ZO9FDxNDwiEK\np9FAZXrblSBDXN6PjuHfh0OuxRwzAfnijBGy2TI8igkUM2fJzGym3h+RRvy33Mrp\nW2ameELLcI2mk6vNtL5bmrLqWW95mcdxOlYbk8/rihUpt0fTqlpwR5RqRBcgE2wH\ngDSPYwNrmwxd5bjknon4yAA7MIn6zt+UanvTneQFYrNQ/NQL3/qimNh4GX9ovHpQ\nS8fO1P6ydIL7/pJcBbKk7Z8k0dLi01Yo6mOh9G3v9xWLPCZvG85sM64DTyvMMGNm\nqy7UZDNWjYKYQRuWj6gYBmFKS9jWJkcHXkVIS/dHJaabH1Ex+WpTJzgbt0tG6rDY\nP/8=\n-----END CERTIFICATE----- {print}' tls.crt | head -n $(awk '/BEGIN CERTIFICATE/,/END CERTIFICATE/ {print}' tls.crt | wc -l | awk '{print int($1/3)*1}') > vault-server.crt\n
 2828* clear
 2829* kubectl get secret common-tlssecret -n vault -o jsonpath="{.data['tls\.crt']}" | base64 --decode > vault-tls.crt\n
 2830* csplit -f cert- -b '%02d.crt' vault-tls.crt '/-----BEGIN CERTIFICATE-----/' '{*}'\n
 2831* csplit -f cert- vault-tls.crt '/-----BEGIN CERTIFICATE-----/' '{*}'\n
 2832* kubectl get secret common-tlssecret -n vault -o jsonpath="{.data['tls\.crt']}" | base64 --decode > vault-tls.crt\n
 2833* csplit -f cert- vault-tls.crt '/-----BEGIN CERTIFICATE-----/' '{*}'\n
 2834* cd star_mtn_co_rw_6
 2835* cd star_mtn_co_rw_691059851
 2836* ls
 2837* cat star_mtn_co_rw.crt ca_chain.crt > new-tls.crt\n
 2838* rm -rf new-tls.crt
 2839* cat star_mtn_co_rw.crt DigiCertCA.crt TrustedRoot.crt > new-tls.crt\n
 2840* k delete secrets -n vault common-tlssecret
 2841* kubectl create secret tls common-tlssecret --cert=new-tls.crt --key=server.key --dry-run=client -o yaml | kubectl apply -f -\n
 2842* cd ..
 2843* ls
 2844* cp server.key star_mtn_co_rw_691059851/\n
 2845* cp private.key star_mtn_co_rw_691059851/\n
 2846* cd star_mtn_co_rw_691059851
 2847* clear
 2848* kubectl create secret tls common-tlssecret --cert=new-tls.crt --key=private.key --dry-run=client -o yaml | kubectl apply -f -\n
 2849* clear
 2850* ls
 2851* cat common-tlssecret.yaml
 2852* k apply -f common-tlssecret.yaml
 2853* clear
 2854* k9s
 2855* kubectl create secret tls common-tlssecret -n vault --cert=new-tls.crt --key=private.key --dry-run=client -o yaml | kubectl apply -f -
 2856* k describe secrets -n vault common-tlssecret
 2857* k get po
 2858* k describe secrets common-tlssecret
 2859* clear
 2860* sudo vi vault.hcl
 2861* openssl verify -CAfile DigiCertCA.crt -untrusted TrustedRoot.crt tls.crt\n
 2862* ls
 2863* openssl verify -CAfile DigiCertCA.crt -untrusted TrustedRoot.crt new-tls.crt\n
 2864* kubectl get secret common-tlssecret -n vault -o jsonpath='{.data.tls\.crt}' | base64 --decode > tls.crt\nkubectl get secret common-tlssecret -n vault -o jsonpath='{.data.tls\.key}' | base64 --decode > tls.key\n
 2865* openssl verify -CAfile DigiCertCA.crt -untrusted TrustedRoot.crt tls.crt\n
 2866* kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 2867* kubectl rollout restart statefulset vault -n vault\n
 2868* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 2869* k get configmaps -n vault vault-config
 2870* k describe configmaps -n vault vault-config
 2871* clear
 2872* sudo vi vault.hcl
 2873* sudo vi mtnrw-override-values.yml
 2874* rm -rf .mtnrw-override-values.yml.swp
 2875* sudo vi mtnrw-override-values.yml
 2876* kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2877* helm uninstall vault -n vault
 2878* sudo vi mtnrw-override-values.yml
 2879* ps aux | grep vault\n
 2880* pkill vault\n
 2881* rm -rf ~/.vault\nrm -rf ~/.vault-token\nrm -rf /etc/vault.d/*\nrm -rf /var/lib/vault/*\n
 2882* which vault\n
 2883* sudo multipass stop --all\n
 2884* sudo pkill -f vault\n
 2885* ps aux | grep vault\n
 2886* clear
 2887* sudo vi mtnrw-override-values.yml
 2888* helm install vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 2889* k9s -n vault
 2890* sudo vi vault.hcl
 2891* kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 2892* kubectl rollout restart statefulset vault -n vault\n
 2893* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 2894  sudo vi mtnrw-override-values.yml
 2895  sudo vi vault.hcl
 2896  kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 2897  kubectl rollout restart statefulset vault -n vault\n
 2898  kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 2899* sudo vi mtnrw-override-values.yml
 2900* kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2901* helm uninstall vault -n vault
 2902* helm install vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 2903* kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 2904* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 2905  kubectl rollout restart statefulset vault -n vault\n
 2906  kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 2907  clear
 2908  kubectl get secrets -n vault\n
 2909  k describe secrets -n vault common-tlssecret
 2910  cat  mtnrw-override-values.yml
 2911* k delete secrets -n vault common-tlssecret
 2912* k apply -f common-tlssecret.yaml -n vault
 2913* k describe secrets -n vault common-tlssecret
 2914* kubectl rollout restart statefulset vault -n vault\n
 2915* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 2916  clear
 2917* pwd
 2918  openssl x509 -in /Users/memoor/Vochub/ikay/cacert.crt -noout -text\n
 2919  openssl x509 -in /Users/memoor/Vochub/ikay/tls.crt -noout -text\n
 2920  ls
 2921  cd star_mtn_co_rw_691059851
 2922  ls
 2923* cd star_mtn_co_rw_6
 2924* cd star_mtn_co_rw_691059851
 2925* pwd
 2926  openssl x509 -in /Users/memoor/Vochub/ikay/star_mtn_co_rw_691059851/tls.crt -noout -text
 2927  clear
 2928  ls
 2929  cat DigiCertCA.crt TrustedRoot.crt > cacert.crt\n
 2930  kubectl delete secret common-tlssecret -n vault\n
 2931  kubectl create secret generic common-tlssecret -n vault \\n  --from-file=tls.crt=/Users/memoor/Vochub/ikay/star_mtn_co_rw_691059851/star_mtn_co_rw.crt \\n  --from-file=tls.key=/Users/memoor/Vochub/ikay/star_mtn_co_rw_691059851/private.key \\n  --from-file=cacert.crt=./cacert.crt
 2932  kubectl describe secret common-tlssecret -n vault\n
 2933  helm upgrade vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 2934  cd
 2935  cd Vochub/ikay
 2936  helm upgrade vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 2937  kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 2938* clear
 2939* sudo vi mtnrw-override-values.yml
 2940* sudo vi /etc/hosts
 2941* cat /etc/hosts\n
 2942* clear
 2943* kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 2944* helm uninstall vault -n vault
 2945* helm install vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 2946* kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 2947* kubectl rollout restart statefulset vault -n vault\n
 2948* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 2949* k9s -n vault
 2950* export VAULT_SKIP_VERIFY=true\n
 2951* clear
 2952* sudo vi mtnrw-override-values.yml
 2953* helm upgrade vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 2954* export VAULT_SKIP_VERIFY=true\n
 2955* vault operator init\n
 2956* kubectl rollout restart statefulset vault -n vault\n
 2957* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 2958* clear
 2959* kubectl exec --stdin=true --tty=true vault-0 -- vault operator unseal
 2960* export VAULT_SKIP_VERIFY=true\n
 2961* vault operator unseal
 2962* clear
 2963* k9s -n vault
 2964* sudo vi mtnrw-override-values.yml
 2965* cd ..
 2966* kubectl get services -n vault\n
 2967  clear
 2968* sudo vi vault.hcl
 2969* helm upgrade vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 2970* kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 2971* kubectl rollout restart statefulset vault -n vault\n
 2972* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 2973* k9s -n vault
 2974* kubectl run -i --tty dns-test --image=busybox --restart=Never --rm\n# Inside the pod\nnslookup vault-internal.vault.svc.cluster.local\n
 2975  openssl x509 -in /vault/userconfig/common-tlssecret/tls.crt -text -noout\n
 2976  sudo vi vault.hcl
 2977* kubectl run -i --tty openssl-pod --image=alpine --restart=Never -- sh\n
 2978* clear
 2979* kubectl run -i --tty -n vault openssl-pod --image=alpine --restart=Never -- sh\n
 2980* cd ..
 2981* kubectl cp vault/vault-0:/vault/userconfig/common-tlssecret/tls.crt tls.crt -n vault\n
 2982* kubectl cp vault/vault-0:/vault/userconfig/common-tlssecret/tls.crt tls.crt
 2983* cd Vochub/ikay
 2984* mkdir Vault-CSR
 2985* cd Vault-CSR/
 2986* cd ..
 2987* cp private.key Vault-CSR
 2988* cd Vault-CSR
 2989* kubectl get secret common-tlssecret -n vault -o yaml > common-tlssecret-backup.yaml\n
 2990* sudo vi csr.conf
 2991* clear
 2992* k desribe secret common-tlssecret.yaml
 2993* k describe secret common-tlssecret.yaml
 2994* k describe secret common-tlssecret
 2995* cd Vault-CSR
 2996* ls
 2997* sudo vi csr.conf
 2998* openssl req -new -nodes -out server.csr -config csr.conf -keyout server.key\n
 2999* sudo vi csr.conf
 3000* cat <<EOF > csr.conf\n[ req ]\ndefault_bits       = 2048\ndefault_md         = sha256\ndistinguished_name = req_distinguished_name\nreq_extensions     = req_ext\nprompt             = no\n\n[ req_distinguished_name ]\ncountryName                = RW\nstateOrProvinceName        = Kigali\nlocalityName               = Kigali\norganizationName           = MTN RwandaCell PLC\ncommonName                 = *.mtn.co.rw\n\n[ req_ext ]\nsubjectAltName = @alt_names\n\n[ alt_names ]\nDNS.1   = *.mtn.co.rw\nDNS.2   = vault\nDNS.3   = vault.vault.svc.cluster.local\nIP.1    = 127.0.0.1\nEOF\n
 3001* sudo cat <<EOF > csr.conf\n[ req ]\ndefault_bits       = 2048\ndefault_md         = sha256\ndistinguished_name = req_distinguished_name\nreq_extensions     = req_ext\nprompt             = no\n\n[ req_distinguished_name ]\ncountryName                = RW\nstateOrProvinceName        = Kigali\nlocalityName               = Kigali\norganizationName           = MTN RwandaCell PLC\ncommonName                 = *.mtn.co.rw\n\n[ req_ext ]\nsubjectAltName = @alt_names\n\n[ alt_names ]\nDNS.1   = *.mtn.co.rw\nDNS.2   = vault\nDNS.3   = vault.vault.svc.cluster.local\nIP.1    = 127.0.0.1\nEOF\n
 3002* sudo vi csr.conf
 3003* openssl req -new -nodes -out server.csr -config csr.conf -keyout server.key\n
 3004* openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 -extfile csr.conf -extensions req_ext\n
 3005* kubectl get secret common-tlssecret -n default -o jsonpath='{.data.cacert\.crt}' | base64 --decode > ca.crt\nkubectl get secret common-tlssecret -n default -o jsonpath='{.data.tls\.key}' | base64 --decode > ca.key\n
 3006* openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 -extfile csr.conf -extensions req_ext\n
 3007* openssl req -new -nodes -out server.csr -config csr.conf -keyout private.key\n
 3008* openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 -extfile csr.conf -extensions req_ext\n
 3009* clear
 3010* ls
 3011* rm -rf ca.key
 3012* rm -rm server.key
 3013* rm -rf server.key
 3014* rm -rf server.crt
 3015* ls
 3016* kubectl get secret common-tlssecret -n default -o jsonpath='{.data.cacert\.crt}' | base64 --decode > ca.crt\nkubectl get secret common-tlssecret -n default -o jsonpath='{.data.tls\.crt}' | base64 --decode > existing-server.crt\nkubectl get secret common-tlssecret -n default -o jsonpath='{.data.tls\.key}' | base64 --decode > existing-server.key\n
 3017* rm -rf server.csr
 3018* openssl req -new -key private.key -out server.csr -config csr.conf\n
 3019* openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 -extfile csr.conf -extensions req_ext\n
 3020* ls -l ca.key\n
 3021* ls
 3022* kubectl get secret common-tlssecret -n default -o jsonpath='{.data.cacert\.crt}' | base64 --decode > ca.crt\nkubectl get secret common-tlssecret -n default -o jsonpath='{.data.tls\.key}' | base64 --decode > ca.key\n
 3023* ls -l ca.key\n
 3024* openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 -extfile csr.conf -extensions req_ext\n
 3025* clear
 3026* openssl x509 -noout -modulus -in ca.crt | openssl md5\n
 3027* openssl rsa -noout -modulus -in ca.key | openssl md5\n
 3028* ls
 3029* openssl rsa -noout -modulus -in private.key | openssl md5\n
 3030* cat private.key
 3031* sudo vi private.key
 3032* openssl rsa -noout -modulus -in private.key | openssl md5\n
 3033* clear
 3034* openssl rsa -noout -modulus -in private.key | openssl md5\n
 3035* openssl rsa -noout -modulus -in ca.key | openssl md5\n
 3036* openssl x509 -noout -modulus -in ca.crt | openssl md5\n
 3037* openssl req -new -key private.key -out server.csr -config csr.conf\n
 3038* openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 -extfile csr.conf -extensions req_ext\n
 3039* kubectl get secret common-tlssecret -n default -o jsonpath='{.data.cacert\.crt}' | base64 --decode > ca.crt\nkubectl get secret common-tlssecret -n default -o jsonpath='{.data.tls\.key}' | base64 --decode > ca.key\n
 3040* openssl x509 -noout -modulus -in ca.crt | openssl md5\n
 3041* openssl rsa -noout -modulus -in ca.key | openssl md5\n
 3042* kubectl run -i -n vault --tty openssl-pod --image=alpine --restart=Never -- sh
 3043* openssl rsa -noout -modulus -in private.key | openssl md5\n
 3044* clear
 3045* cat common-tlssecret.yaml
 3046* clear
 3047* cd helm-onprem
 3048* ls
 3049* echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlHdmpDQ0JhYWdBd0lCQWdJUUFjZmtNOGxXdVpQcVBiWmU2UCsyZGpBTkJna3Foa2lHOXcwQkFRc0ZBREJaDQpNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZ1NXNWpNVE13TVFZRFZRUURFeXBFDQphV2RwUTJWeWRDQkhiRzlpWVd3Z1J6SWdWRXhUSUZKVFFTQlRTRUV5TlRZZ01qQXlNQ0JEUVRFd0hoY05NalF3DQpNekkyTURBd01EQXdXaGNOTWpVd05EQXhNak0xT1RVNVdqQlJNUXN3Q1FZRFZRUUdFd0pTVnpFUE1BMEdBMVVFDQpCeE1HUzJsbllXeHBNUnN3R1FZRFZRUUtFeEpOVkU0Z1VuZGhibVJoUTJWc2JDQlFURU14RkRBU0JnTlZCQU1NDQpDeW91YlhSdUxtTnZMbkozTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4Z09UDQpVQnRmekNyL3A2UC9sMU1HcXpPNERxcC9qWjdzVnBnRGR4WmJvb2JQV2ExZnJLRVM3amgrMlN1aW1LTFZhL3lODQp4L01Bb1NwbG95VkNHM2lsUHU1bXpnQWQyd2dXM0k1cmZGVjRQWDZEZWh3ZkFQYng0YzVhOFZNbmlSRmtUOTJ1DQp4NElNZU5Fc0M2NjVhM1VoVFF6R0F4dFlZSWpyaTBCeXJlVHd4dkNZTUR6R0FPZFhDVE5ISEY5MFk3M0lwUHRODQo2S3IwUnhFc1gzZ0JXeGJiQXBia3JaVm04azlXQmhjeHhXSldnNjhMSFZITDdsMFIvak02STdGVmxVQXk3QUF6DQpaS3VBZUQyNXdpV3ZnQXV2dE5RRENkWWdZVmEyR1Z2MGlmSGpDSUJFUGNIcFdNU2dueER2bHlNQ2I0VCt3bEdFDQp2bURCUWpJN3p1R0F0bFJoRFFJREFRQUJvNElEaURDQ0E0UXdId1lEVlIwakJCZ3dGb0FVZElXQXdHYkgzemZlDQp6NzBwTjZvREhiN3R6UmN3SFFZRFZSME9CQllFRlBDbkV6VG5QcXdqbTBuK2R1Z2JtN3VISFRtdU1CWUdBMVVkDQpFUVFQTUEyQ0N5b3ViWFJ1TG1OdkxuSjNNRDRHQTFVZElBUTNNRFV3TXdZR1o0RU1BUUlDTUNrd0p3WUlLd1lCDQpCUVVIQWdFV0cyaDBkSEE2THk5M2QzY3VaR2xuYVdObGNuUXVZMjl0TDBOUVV6QU9CZ05WSFE4QkFmOEVCQU1DDQpCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVITUFLRwpOR2gwZEhBNkx5OWpZV05sY25SekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWRzYjJKaGJGSnZiM1JICk1pNWpjblF3UWdZRFZSMGZCRHN3T1RBM29EV2dNNFl4YUhSMGNEb3ZMMk55YkRNdVpHbG5hV05sY25RdVkyOXQKTDBScFoybERaWEowUjJ4dlltRnNVbTl2ZEVjeUxtTnliREE5QmdOVkhTQUVOakEwTUFzR0NXQ0dTQUdHL1d3QwpBVEFIQmdWbmdRd0JBVEFJQmdabmdRd0JBZ0V3Q0FZR1o0RU1BUUlDTUFnR0JtZUJEQUVDQXpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFrUEZ3eXlpWGFaZDhkUDNBK2laN1U2dXR6V1g5dXB3R25JclhXa09IN1UxTVZsK3QKd2NXMUJTQXVXZEgvU3ZXZ0t0aXdsYTNKTGtvNzE2ZjJiNGdwL0RBL0pJUzd3N2Q3a3djc3I0ZHJkalB0QUZWUwpzbG1lNUxuUTg5L25ELzdkK01TNUVIS0JDUVJmejVlZUxqSjFqcythV05KWE1YNDNBWUd5Wm0wcEdyRm1DVzNSCmJwRDB1Zm92QVJURlhGWmtBZGw5aDZnNFU1K0xYVVp0WE1ZbmhJSFVmb3lNbzV0UzU4YUk3RGQ4S3Z2d1ZWbzQKY2hEWUFCUFBUSFBicWpjMXFDbUJhWngydk40WWU1RFV5cy92WndQOUJGb2hGckgvNmovZjNJTDE2L1Jaa2lNTgpKQ3FWSlV6S29aSG0xTGVzaDNTejhXMmptZHY1MWIyRVFKOEhtQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" | base64 --decode | openssl x509 -text -noout\n
 3050* echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lVSDFGZVJVa25KKzc1cm84VjJpTCt0cG9tZUljd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0xURUxNQWtHQTFVRUF4TUNRMEV4RFRBTEJnTlZCQXNUQkZSTFIwa3hEekFOQmdOVkJBb1RCbFpOZDJGeQpaVEFlRncweU16QTJNekF3TmpJNU1UVmFGdzB5TnpBMk16QXdOakk1TVRWYU1DMHhDekFKQmdOVkJBTVRBa05CCk1RMHdDd1lEVlFRTEV3UlVTMGRKTVE4d0RRWURWUVFLRXdaV1RYZGhjbVV3Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURFK0NBWFFnZjFMZm9CcTFMdjRodmZVMHpCY216by9XWjU3L2xWbUlEbAppQmZ0YnBRZ2hpMlFRdGRGNmFjYUxLMEZsWEpGdEIxT1dHNkdVeG9tUFhaRk9nWGJZ\n
 3051* echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlHdmpDQ0JhYWdBd0lCQWdJUUFjZmtNOGxXdVpQcVBiWmU2UCsyZGpBTkJna3Foa2lHOXcwQkFRc0ZBREJaDQpNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZ1NXNWpNVE13TVFZRFZRUURFeXBFDQphV2RwUTJWeWRDQkhiRzlpWVd3Z1J6SWdWRXhUSUZKVFFTQlRTRUV5TlRZZ01qQXlNQ0JEUVRFd0hoY05NalF3DQpNekkyTURBd01EQXdXaGNOTWpVd05EQXhNak0xT1RVNVdqQlJNUXN3Q1FZRFZRUUdFd0pTVnpFUE1BMEdBMVVFDQpCeE1HUzJsbllXeHBNUnN3R1FZRFZRUUtFeEpOVkU0Z1VuZGhibVJoUTJWc2JDQlFURU14RkRBU0JnTlZCQU1NDQpDeW91YlhSdUxtTnZMbkozTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4Z09UDQpVQnRmekNyL3A2UC9sMU1HcXpPNERxcC9qWjdzVnBnRGR4WmJvb2JQV2ExZnJLRVM3amgrMlN1aW1LTFZhL3lODQp4L01Bb1NwbG95VkNHM2lsUHU1bXpnQWQyd2dXM0k1cmZGVjRQWDZEZWh3ZkFQYng0YzVhOFZNbmlSRmtUOTJ1DQp4NElNZU5Fc0M2NjVhM1VoVFF6R0F4dFlZSWpyaTBCeXJlVHd4dkNZTUR6R0FPZFhDVE5ISEY5MFk3M0lwUHRODQo2S3IwUnhFc1gzZ0JXeGJiQXBia3JaVm04azlXQmhjeHhXSldnNjhMSFZITDdsMFIvak02STdGVmxVQXk3QUF6DQpaS3VBZUQyNXdpV3ZnQXV2dE5RRENkWWdZVmEyR1Z2MGlmSGpDSUJFUGNIcFdNU2dueER2bHlNQ2I0VCt3bEdFDQp2bURCUWpJN3p1R0F0bFJoRFFJREFRQUJvNElEaURDQ0E0UXdId1lEVlIwakJCZ3dGb0FVZElXQXdHYkgzemZlDQp6NzBwTjZvREhiN3R6UmN3SFFZRFZSME9CQllFRlBDbkV6VG5QcXdqbTBuK2R1Z2JtN3VISFRtdU1CWUdBMVVkDQpFUVFQTUEyQ0N5b3ViWFJ1TG1OdkxuSjNNRDRHQTFVZElBUTNNRFV3TXdZR1o0RU1BUUlDTUNrd0p3WUlLd1lCDQpCUVVIQWdFV0cyaDBkSEE2THk5M2QzY3VaR2xuYVdObGNuUXVZMjl0TDBOUVV6QU9CZ05WSFE4QkFmOEVCQU1DDQpCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVITUFLRwpOR2gwZEhBNkx5OWpZV05sY25SekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWRzYjJKaGJGSnZiM1JICk1pNWpjblF3UWdZRFZSMGZCRHN3T1RBM29EV2dNNFl4YUhSMGNEb3ZMMk55YkRNdVpHbG5hV05sY25RdVkyOXQKTDBScFoybERaWEowUjJ4dlltRnNVbTl2ZEVjeUxtTnliREE5QmdOVkhTQUVOakEwTUFzR0NXQ0dTQUdHL1d3QwpBVEFIQmdWbmdRd0JBVEFJQmdabmdRd0JBZ0V3Q0FZR1o0RU1BUUlDTUFnR0JtZUJEQUVDQXpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFrUEZ3eXlpWGFaZDhkUDNBK2laN1U2dXR6V1g5dXB3R25JclhXa09IN1UxTVZsK3QKd2NXMUJTQXVXZEgvU3ZXZ0t0aXdsYTNKTGtvNzE2ZjJiNGdwL0RBL0pJUzd3N2Q3a3djc3I0ZHJkalB0QUZWUwpzbG1lNUxuUTg5L25ELzdkK01TNUVIS0JDUVJmejVlZUxqSjFqcythV05KWE1YNDNBWUd5Wm0wcEdyRm1DVzNSCmJwRDB1Zm92QVJURlhGWmtBZGw5aDZnNFU1K0xYVVp0WE1ZbmhJSFVmb3lNbzV0UzU4YUk3RGQ4S3Z2d1ZWbzQKY2hEWUFCUFBUSFBicWpjMXFDbUJhWngydk40WWU1RFV5cy92WndQOUJGb2hGckgvNmovZjNJTDE2L1Jaa2lNTgpKQ3FWSlV6S29aSG0xTGVzaDNTejhXMmptZHY1MWIyRVFKOEhtQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" | base64 --decode | openssl x509 -text -noout\n
 3052* echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lVSDFGZVJVa25KKzc1cm84VjJpTCt0cG9tZUljd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0xURUxNQWtHQTFVRUF4TUNRMEV4RFRBTEJnTlZCQXNUQkZSTFIwa3hEekFOQmdOVkJBb1RCbFpOZDJGeQpaVEFlRncweU16QTJNekF3TmpJNU1UVmFGdzB5TnpBMk16QXdOakk1TVRWYU1DMHhDekFKQmdOVkJBTVRBa05CCk1RMHdDd1lEVlFRTEV3UlVTMGRKTVE4d0RRWURWUVFLRXdaV1RYZGhjbVV3Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURFK0NBWFFnZjFMZm9CcTFMdjRodmZVMHpCY216by9XWjU3L2xWbUlEbAppQmZ0YnBRZ2hpMlFRdGRGNmFjYUxLMEZsWEpGdEIxT1dHNkdVeG9tUFhaRk9nWGJZbnJ4WWZlLzc3aW1teG55CmJnYzlBVXU0ZndBZ0J5cU43dzBhTml3QlVWZHBMK29Tb3RsblVjbUVyblJldVBRdXBhaW0xdXdVaVNpOGdBSlEKdXlUREJKMHFtUkZWcWx2RDFubHJwT0o5MmwwTzhkOG1ma2h4enJGR2dZOGl4aVNlZ2UzN3p4SWtNdnVwdHpVUwp4VlV0VUFwUWthbjlYa0F2UzFWajNOc0dpL3ViVWlva3dGRDkwMEE1V3huTTlXQ2Z6T05NdmYzWHM2MHpLSUhlCkZqOU9jckk3TUZUa1ZoV0NCNkVWNHZ2OTVkdFpBTnE1VEpGdVlwSG1zM1dCQWdNQkFBR2pVekJSTUIwR0ExVWQKRGdRV0JCUzlHb1BzTEZPOXZnR25vVCtTc2NOVEh0NCtxVEFmQmdOVkhTTUVHREFXZ0JTOUdvUHNMRk85dmdHbgpvVCtTc2NOVEh0NCtxVEFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVClREc0FlNlViaVB5VnRqRmxvMm5lblhpcUNqRnoxZkMrVEl3R1ZPUyt6QUNWL29BTHBJTXpXOUZpN29VdmhmR1MKMWE2aEVCeHFqeDdjQnVsS3Z5VkhJWkhqUjVFMmE3ZkZmOFJQNTA3QVNGbmJSSVRrVGZpSjRMQlJUT0o0WkEvbAp3RHJpVW1xL25lSFhRSWthWjFnS1ViWXl4MlljdDBiQ2N4ZC9leE8yYjJZSEhsL2U5cWVmY2t4Mk10SllCcmVPCkZ2M1FhY3h5Q3U0eDJnUUtJQS9xQzZ6TExQd0Ftc1RsSEtrWmttUitJbmdIaWZnN0RJQ0kvSVg3ejNWNDBHUzkKNSt2QnVFWkxvcnV5LzNGd21IUzJlVTB0MGJRaGZudHREUDZKZDhORUdlbnlyRWRyMHZSMGcvMHNKRlhibWtQWQoyS2FoRmtCVWo5aWR0aHVnOEQ2RgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" | base64 --decode | openssl x509 -text -noout\n
 3053* echo "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRREdBNU5RRzEvTUt2K24Kby8rWFV3YXJNN2dPcW4rTm51eFdtQU4zRmx1aWhzOVpyVitzb1JMdU9IN1pLNktZb3RWci9JM0g4d0NoS21XagpKVUliZUtVKzdtYk9BQjNiQ0JiY2ptdDhWWGc5Zm9ONkhCOEE5dkhoemxyeFV5ZUpFV1JQM2E3SGdneDQwU3dMCnJybHJkU0ZORE1ZREcxaGdpT3VMUUhLdDVQREc4Smd3UE1ZQTUxY0pNMGNjWDNSanZjaWsrMDNvcXZSSEVTeGYKZUFGYkZ0c0NsdVN0bFdieVQxWUdGekhGWWxhRHJ3c2RVY3Z1WFJIK016b2pzVldWUURMc0FETmtxNEI0UGJuQwpKYStBQzYrMDFBTUoxaUJoVnJZWlcvU0o4ZU1JZ0VROXdlbFl4S0NmRU8rWEl3SnZoUDdDVVlTK1lNRkNNanZPCjRZQzJWR0VOQWdNQkFBRUNnZ0VBRXNpNkM4cGMveGhCSWwwTFhRYVNSbUZrbjNlTEhCc3NYbGFUVlpPNFk2V1kKTy9DWGQ5L2IxTjlsSVNMampNazlwNzNRa1Z3Ni9nN3dqMVowZS9pbzdGeGZRa0YrazQyajVZNVpJZlZWcjdlMQpyenJGc2lpNjcybk05TUducVhnTjVRbXBqK0dGWDF5d2FmZE1QYVpoMzFaTDNuV1VuNnU5ZEh0THBiVm5KZWY0Ck12UFY5UytnWGc2di9vRFBFY0VXaUhvWWdxRmw0Tm9rYXJidG8zQ3RwZHRRSHdzc2ZqaGpUeUhDRnFiWjhPeWkKRHZpUEVYYzRFMnY3Y2JDMi9yNEI1MVJmVUIzV3h4Rlc3VXQySDZpWlNQVmQxc2s3R0RaZ2cxdlVVamJHa29jawpuQkVpNGU3bVZlcWRIdzJFaHNvdTJTeFpJczhTUmRLdE02Z0IycG5ZQVFLQmdRRHNuVGM2Y1J4bUtjYWpaTWVMCnU1UlB0cjBpdmdTSUZXZWlMZzJDZjZoNGFKUEdlSFV0T05LZjgyN0hDTmdwdjMrbVAzeGdVZmVRdS9PbHR6NFoKNkpRZ1ZjRkJzUitmZnR4cTlYWTVJekFiSEtXU0lXK3U3UENqRXF0TUhRc2xJSndLMTI2SVR1R3puZGhoQzRiNAphbUQxdUg4K2J2UGpxcU1qdE1LcnlqaUNBUUtCZ1FEV1BNRG45b0dmVURVQnQ2U0cxbHRKQko0U1EvcGN5SWtVCnVFSUE2K09kRjdwN1lKamFiSDJEVWlhVFVnNnpWK2Z6cjZYN2U5ckJncVcvR00vdnVYcHRYb1YrNjNXR0dYUFcKZm9QQmdhNkk0SXRqQmxWUmU1WFo5eEhaakZ0ZGRMQlZ3eVpxVjRQTGZuR0xlSVNnWXlrbi9UYUhaOENvaE1pOQowOUp0Tm1mSERRS0JnRmswbkpISCt6RDVKdzZLL0VCT0pBZzVtT3owUHJrZmVNYklIZ2ZKSVRia0ZuS0pENFJSCkcvZDV5NVgyVzZqQnJkcDdyT1NUZ29acWxkMHdUSlZ2L2dpQ3pDMThIYlFBSEJHbklUOUJhTzJQeTB4Z2xyNlkKVGREdFJPK1pNNDUzME55MWc5S1lDcmV4RnRiZmhhODZTL3ZYNXdFZXk0eFYxTk90WG9kdDRnZ0JBb0dCQU5JRAppb09hTmVWcjVocUI0T3BCZGdrMVdwUERTY25zMTl5VTZEY3BCdDgzcEpwUHptZklsSjNJU1lKL25XT1lHQXpkCnNsTytUV3NIWE4zaFArM2JvRFZZeEhydjdTeUJCUHBPMlhBM1\n
 3054* clear
 3055* echo "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRREdBNU5RRzEvTUt2K24Kby8rWFV3YXJNN2dPcW4rTm51eFdtQU4zRmx1aWhzOVpyVitzb1JMdU9IN1pLNktZb3RWci9JM0g4d0NoS21XagpKVUliZUtVKzdtYk9BQjNiQ0JiY2ptdDhWWGc5Zm9ONkhCOEE5dkhoemxyeFV5ZUpFV1JQM2E3SGdneDQwU3dMCnJybHJkU0ZORE1ZREcxaGdpT3VMUUhLdDVQREc4Smd3UE1ZQTUxY0pNMGNjWDNSanZjaWsrMDNvcXZSSEVTeGYKZUFGYkZ0c0NsdVN0bFdieVQxWUdGekhGWWxhRHJ3c2RVY3Z1WFJIK016b2pzVldWUURMc0FETmtxNEI0UGJuQwpKYStBQzYrMDFBTUoxaUJoVnJZWlcvU0o4ZU1JZ0VROXdlbFl4S0NmRU8rWEl3SnZoUDdDVVlTK1lNRkNNanZPCjRZQzJWR0VOQWdNQkFBRUNnZ0VBRXNpNkM4cGMveGhCSWwwTFhRYVNSbUZrbjNlTEhCc3NYbGFUVlpPNFk2V1kKTy9DWGQ5L2IxTjlsSVNMampNazlwNzNRa1Z3Ni9nN3dqMVowZS9pbzdGeGZRa0YrazQyajVZNVpJZlZWcjdlMQpyenJGc2lpNjcybk05TUducVhnTjVRbXBqK0dGWDF5d2FmZE1QYVpoMzFaTDNuV1VuNnU5ZEh0THBiVm5KZWY0Ck12UFY5UytnWGc2di9vRFBFY0VXaUhvWWdxRmw0Tm9rYXJidG8zQ3RwZHRRSHdzc2ZqaGpUeUhDRnFiWjhPeWkKRHZpUEVYYzRFMnY3Y2JDMi9yNEI1MVJmVUIzV3h4Rlc3VXQySDZpWlNQVmQxc2s3R0RaZ2cxdlVVamJHa29jawpuQkVpNGU3bVZlcWRIdzJFaHNvdTJTeFpJczhTUmRLdE02Z0IycG5ZQVFLQmdRRHNuVGM2Y1J4bUtjYWpaTWVMCnU1UlB0cjBpdmdTSUZXZWlMZzJDZjZoNGFKUEdlSFV0T05LZjgyN0hDTmdwdjMrbVAzeGdVZmVRdS9PbHR6NFoKNkpRZ1ZjRkJzUitmZnR4cTlYWTVJekFiSEtXU0lXK3U3UENqRXF0TUhRc2xJSndLMTI2SVR1R3puZGhoQzRiNAphbUQxdUg4K2J2UGpxcU1qdE1LcnlqaUNBUUtCZ1FEV1BNRG45b0dmVURVQnQ2U0cxbHRKQko0U1EvcGN5SWtVCnVFSUE2K09kRjdwN1lKamFiSDJEVWlhVFVnNnpWK2Z6cjZYN2U5ckJncVcvR00vdnVYcHRYb1YrNjNXR0dYUFcKZm9QQmdhNkk0SXRqQmxWUmU1WFo5eEhaakZ0ZGRMQlZ3eVpxVjRQTGZuR0xlSVNnWXlrbi9UYUhaOENvaE1pOQowOUp0Tm1mSERRS0JnRmswbkpISCt6RDVKdzZLL0VCT0pBZzVtT3owUHJrZmVNYklIZ2ZKSVRia0ZuS0pENFJSCkcvZDV5NVgyVzZqQnJkcDdyT1NUZ29acWxkMHdUSlZ2L2dpQ3pDMThIYlFBSEJHbklUOUJhTzJQeTB4Z2xyNlkKVGREdFJPK1pNNDUzME55MWc5S1lDcmV4RnRiZmhhODZTL3ZYNXdFZXk0eFYxTk90WG9kdDRnZ0JBb0dCQU5JRAppb09hTmVWcjVocUI0T3BCZGdrMVdwUERTY25zMTl5VTZEY3BCdDgzcEpwUHptZklsSjNJU1lKL25XT1lHQXpkCnNsTytUV3NIWE4zaFArM2JvRFZZeEhydjdTeUJCUHBPMlhBM1pWWk84TFVwUHpmNmM2TFJQaEZLTTBLQklsOWcKUitkVlZTQ0dHbDdEelJmQlBWWXpObUkwaGp0c3Q3REcxbkF6TmpaOUFvR0FkdlVScDFRL1VxVXcweG1MUk03bgppVWYwbXBWV0NucWhVWHozTU85am5qYW5mL2I3ZlZ0OVllYlVXTGthdlZiTWtST1ZlR3VIOFhnVnNNejVrQVVLClQraFdWTEs5R0dGQkNvay9qbmcwQlludFRjM1BTN0dZdzZYaWY1V0lsUWYwS0E4TFJLay9iTzJUcitrYlloMVUKNUFFL3NycThGNUVEN0JmWXAzbFNINDQ9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K" | base64 --decode\n
 3056* echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lVSDFGZVJVa25KKzc1cm84VjJpTCt0cG9tZUljd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0xURUxNQWtHQTFVRUF4TUNRMEV4RFRBTEJnTlZCQXNUQkZSTFIwa3hEekFOQmdOVkJBb1RCbFpOZDJGeQpaVEFlRncweU16QTJNekF3TmpJNU1UVmFGdzB5TnpBMk16QXdOakk1TVRWYU1DMHhDekFKQmdOVkJBTVRBa05CCk1RMHdDd1lEVlFRTEV3UlVTMGRKTVE4d0RRWURWUVFLRXdaV1RYZGhjbVV3Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURFK0NBWFFnZjFMZm9CcTFMdjRodmZVMHpCY216by9XWjU3L2xWbUlEbAppQmZ0YnBRZ2hpMlFRdGRGNmFjYUxLMEZsWEpGdEIxT1dHNkdVeG9tUFhaRk9nWGJZbnJ4WWZlLzc3aW1teG55CmJnYzlBVXU0ZndBZ0J5cU43dzBhTml3QlVWZHBMK29Tb3RsblVjbUVyblJldVBRdXBhaW0xdXdVaVNpOGdBSlEKdXlUREJKMHFtUkZWcWx2RDFubHJwT0o5MmwwTzhkOG1ma2h4enJGR2dZOGl4aVNlZ2UzN3p4SWtNdnVwdHpVUwp4VlV0VUFwUWthbjlYa0F2UzFWajNOc0dpL3ViVWlva3dGRDkwMEE1V3huTTlXQ2Z6T05NdmYzWHM2MHpLSUhlCkZqOU9jckk3TUZUa1ZoV0NCNkVWNHZ2OTVkdFpBTnE1VEpGdVlwSG1zM1dCQWdNQkFBR2pVekJSTUIwR0ExVWQKRGdRV0JCUzlHb1BzTEZPOXZnR25vVCtTc2NOVEh0NCtxVEFmQmdOVkhTTUVHREFXZ0JTOUdvUHNMRk85dmdHbgpvVCtTc2NOVEh0NCtxVEFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVClREc0FlNlViaVB5VnRqRmxvMm5lblhpcUNqRnoxZkMrVEl3R1ZPUyt6QUNWL29BTHBJTXpXOUZpN29VdmhmR1MKMWE2aEVCeHFqeDdjQnVsS3Z5VkhJWkhqUjVFMmE3ZkZmOFJQNTA3QVNGbmJSSVRrVGZpSjRMQlJUT0o0WkEvbAp3RHJpVW1xL25lSFhRSWthWjFnS1ViWXl4MlljdDBiQ2N4ZC9leE8yYjJZSEhsL2U5cWVmY2t4Mk10SllCcmVPCkZ2M1FhY3h5Q3U0eDJnUUtJQS9xQzZ6TExQd0Ftc1RsSEtrWmttUitJbmdIaWZnN0RJQ0kvSVg3ejNWNDBHUzkKNSt2QnVFWkxvcnV5LzNGd21IUzJlVTB0MGJRaGZudHREUDZKZDhORUdlbnlyRWRyMHZSMGcvMHNKRlhibWtQWQoyS2FoRmtCVWo5aWR0aHVnOEQ2RgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" | base64 --decode | openssl x509 -text -noout\n
 3057* echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlHdmpDQ0JhYWdBd0lCQWdJUUFjZmtNOGxXdVpQcVBiWmU2UCsyZGpBTkJna3Foa2lHOXcwQkFRc0ZBREJaDQpNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZ1NXNWpNVE13TVFZRFZRUURFeXBFDQphV2RwUTJWeWRDQkhiRzlpWVd3Z1J6SWdWRXhUSUZKVFFTQlRTRUV5TlRZZ01qQXlNQ0JEUVRFd0hoY05NalF3DQpNekkyTURBd01EQXdXaGNOTWpVd05EQXhNak0xT1RVNVdqQlJNUXN3Q1FZRFZRUUdFd0pTVnpFUE1BMEdBMVVFDQpCeE1HUzJsbllXeHBNUnN3R1FZRFZRUUtFeEpOVkU0Z1VuZGhibVJoUTJWc2JDQlFURU14RkRBU0JnTlZCQU1NDQpDeW91YlhSdUxtTnZMbkozTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4Z09UDQpVQnRmekNyL3A2UC9sMU1HcXpPNERxcC9qWjdzVnBnRGR4WmJvb2JQV2ExZnJLRVM3amgrMlN1aW1LTFZhL3lODQp4L01Bb1NwbG95VkNHM2lsUHU1bXpnQWQyd2dXM0k1cmZGVjRQWDZEZWh3ZkFQYng0YzVhOFZNbmlSRmtUOTJ1DQp4NElNZU5Fc0M2NjVhM1VoVFF6R0F4dFlZSWpyaTBCeXJlVHd4dkNZTUR6R0FPZFhDVE5ISEY5MFk3M0lwUHRODQo2S3IwUnhFc1gzZ0JXeGJiQXBia3JaVm04azlXQmhjeHhXSldnNjhMSFZITDdsMFIvak02STdGVmxVQXk3QUF6DQpaS3VBZUQyNXdpV3ZnQXV2dE5RRENkWWdZVmEyR1Z2MGlmSGpDSUJFUGNIcFdNU2dueER2bHlNQ2I0VCt3bEdFDQp2bURCUWpJN3p1R0F0bFJoRFFJREFRQUJvNElEaURDQ0E0UXdId1lEVlIwakJCZ3dGb0FVZElXQXdHYkgzemZlDQp6NzBwTjZvREhiN3R6UmN3SFFZRFZSME9CQllFRlBDbkV6VG5QcXdqbTBuK2R1Z2JtN3VISFRtdU1CWUdBMVVkDQpFUVFQTUEyQ0N5b3ViWFJ1TG1OdkxuSjNNRDRHQTFVZElBUTNNRFV3TXdZR1o0RU1BUUlDTUNrd0p3WUlLd1lCDQpCUVVIQWdFV0cyaDBkSEE2THk5M2QzY3VaR2xuYVdObGNuUXVZMjl0TDBOUVV6QU9CZ05WSFE4QkFmOEVCQU1DDQpCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVITUFLRwpOR2gwZEhBNkx5OWpZV05sY25SekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWRzYjJKaGJGSnZiM1JICk1pNWpjblF3UWdZRFZSMGZCRHN3T1RBM29EV2dNNFl4YUhSMGNEb3ZMMk55YkRNdVpHbG5hV05sY25RdVkyOXQKTDBScFoybERaWEowUjJ4dlltRnNVbTl2ZEVjeUxtTnliREE5QmdOVkhTQUVOakEwTUFzR0NXQ0dTQUdHL1d3QwpBVEFIQmdWbmdRd0JBVEFJQmdabmdRd0JBZ0V3Q0FZR1o0RU1BUUlDTUFnR0JtZUJEQUVDQXpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFrUEZ3eXlpWGFaZDhkUDNBK2laN1U2dXR6V1g5dXB3R25JclhXa09IN1UxTVZsK3QKd2NXMUJTQXVXZEgvU3ZXZ0t0aXdsYTNKTGtvNzE2ZjJiNGdwL0RBL0pJUzd3N2Q3a3djc3I0ZHJkalB0QUZWUwpzbG1lNUxuUTg5L25ELzdkK01TNUVIS0JDUVJmejVlZUxqSjFqcythV05KWE1YNDNBWUd5Wm0wcEdyRm1DVzNSCmJwRDB1Zm92QVJURlhGWmtBZGw5aDZnNFU1K0xYVVp0WE1ZbmhJSFVmb3lNbzV0UzU4YUk3RGQ4S3Z2d1ZWbzQKY2hEWUFCUFBUSFBicWpjMXFDbUJhWngydk40WWU1RFV5cy92WndQOUJGb2hGckgvNmovZjNJTDE2L1Jaa2lNTgpKQ3FWSlV6S29aSG0xTGVzaDNTejhXMmptZHY1MWIyRVFKOEhtQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" | base64 --decode | openssl x509 -text -noout\n
 3058* clear
 3059* openssl x509 -in <(echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlHdmpDQ0JhYWdBd0lCQWdJUUFjZmtNOGxXdVpQcVBiWmU2UCsyZGpBTkJna3Foa2lHOXcwQkFRc0ZBREJaDQpNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZ1NXNWpNVE13TVFZRFZRUURFeXBFDQphV2RwUTJWeWRDQkhiRzlpWVd3Z1J6SWdWRXhUSUZKVFFTQlRTRUV5TlRZZ01qQXlNQ0JEUVRFd0hoY05NalF3DQpNekkyTURBd01EQXdXaGNOTWpVd05EQXhNak0xT1RVNVdqQlJNUXN3Q1FZRFZRUUdFd0pTVnpFUE1BMEdBMVVFDQpCeE1HUzJsbllXeHBNUnN3R1FZRFZRUUtFeEpOVkU0Z1VuZGhibVJoUTJWc2JDQlFURU14RkRBU0JnTlZCQU1NDQpDeW91YlhSdUxtTnZMbkozTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4Z09UDQpVQnRmekNyL3A2UC9sMU1HcXpPNERxcC9qWjdzVnBnRGR4WmJvb2JQV2ExZnJLRVM3amgrMlN1aW1LTFZhL3lODQp4L01Bb1NwbG95VkNHM2lsUHU1bXpnQWQyd2dXM0k1cmZGVjRQWDZEZWh3ZkFQYng0YzVhOFZNbmlSRmtUOTJ1DQp4NElNZU5Fc0M2NjVhM1VoVFF6R0F4dFlZSWpyaTBCeXJlVHd4dkNZTUR6R0FPZFhDVE5ISEY5MFk3M0lwUHRODQo2S3IwUnhFc1gzZ0JXeGJiQXBia3JaVm04azlXQmhjeHhXSldnNjhMSFZITDdsMFIvak02STdGVmxVQXk3QUF6DQpaS3VBZUQyNXdpV3ZnQXV2dE5RRENkWWdZVmEyR1Z2MGlmSGpDSUJFUGNIcFdNU2dueER2bHlNQ2I0VCt3bEdFDQp2bURCUWpJN3p1R0F0bFJoRFFJREFRQUJvNElEaURDQ0E0UXdId1lEVlIwakJCZ3dGb0FVZElXQXdHYkgzemZlDQp6NzBwTjZvREhiN3R6UmN3SFFZRFZSME9CQllFRlBDbkV6VG5QcXdqbTBuK2R1Z2JtN3VISFRtdU1CWUdBMVVkDQpFUVFQTUEyQ0N5b3ViWFJ1TG1OdkxuSjNNRDRHQTFVZElBUTNNRFV3TXdZR1o0RU1BUUlDTUNrd0p3WUlLd1lCDQpCUVVIQWdFV0cyaDBkSEE2THk5M2QzY3VaR2xuYVdObGNuUXVZMjl0TDBOUVV6QU9CZ05WSFE4QkFmOEVCQU1DDQpCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVITUFLRwpOR2gwZEhBNkx5OWpZV05sY25SekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWRzYjJKaGJGSnZiM1JICk1pNWpjblF3UWdZRFZSMGZCRHN3T1RBM29EV2dNNFl4YUhSMGNEb3ZMMk55YkRNdVpHbG5hV05sY25RdVkyOXQKTDBScFoybERaWEowUjJ4dlltRnNVbTl2ZEVjeUxtTnliREE5QmdOVkhTQUVOakEwTUFzR0NXQ0dTQUdHL1d3QwpBVEFIQmdWbmdRd0JBVEFJQmdabmdRd0JBZ0V3Q0FZR1o0RU1BUUlDTUFnR0JtZUJEQUVDQXpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFrUEZ3eXlpWGFaZDhkUDNBK2laN1U2dXR6V1g5dXB3R25JclhXa09IN1UxTVZsK3QKd2NXMUJTQXVXZEgvU3ZXZ0t0aXdsYTNKTGtvNzE2ZjJiNGdwL0RBL0pJUzd3N2Q3a3djc3I0ZHJkalB0QUZWUwpzbG1lNUxuUTg5L25ELzdkK01TNUVIS0JDUVJmejVlZUxqSjFqcythV05KWE1YNDNBWUd5Wm0wcEdyRm1DVzNSCmJwRDB1Zm92QVJURlhGWmtBZGw5aDZnNFU1K0xYVVp0WE1ZbmhJSFVmb3lNbzV0UzU4YUk3RGQ4S3Z2d1ZWbzQKY2hEWUFCUFBUSFBicWpjMXFDbUJhWngydk40WWU1RFV5cy92WndQOUJGb2hGckgvNmovZjNJTDE2L1Jaa2lNTgpKQ3FWSlV6S29aSG0xTGVzaDNTejhXMmptZHY1MWIyRVFKOEhtQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" | base64 --decode) -text -noout\n
 3060* echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlHdmpDQ0JhYWdBd0lCQWdJUUFjZmtNOGxXdVpQcVBiWmU2UCsyZGpBTkJna3Foa2lHOXcwQkFRc0ZBREJaDQpNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZ1NXNWpNVE13TVFZRFZRUURFeXBFDQphV2RwUTJWeWRDQkhiRzlpWVd3Z1J6SWdWRXhUSUZKVFFTQlRTRUV5TlRZZ01qQXlNQ0JEUVRFd0hoY05NalF3DQpNekkyTURBd01EQXdXaGNOTWpVd05EQXhNak0xT1RVNVdqQlJNUXN3Q1FZRFZRUUdFd0pTVnpFUE1BMEdBMVVFDQpCeE1HUzJsbllXeHBNUnN3R1FZRFZRUUtFeEpOVkU0Z1VuZGhibVJoUTJWc2JDQlFURU14RkRBU0JnTlZCQU1NDQpDeW91YlhSdUxtTnZMbkozTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4Z09UDQpVQnRmekNyL3A2UC9sMU1HcXpPNERxcC9qWjdzVnBnRGR4WmJvb2JQV2ExZnJLRVM3amgrMlN1aW1LTFZhL3lODQp4L01Bb1NwbG95VkNHM2lsUHU1bXpnQWQyd2dXM0k1cmZGVjRQWDZEZWh3ZkFQYng0YzVhOFZNbmlSRmtUOTJ1DQp4NElNZU5Fc0M2NjVhM1VoVFF6R0F4dFlZSWpyaTBCeXJlVHd4dkNZTUR6R0FPZFhDVE5ISEY5MFk3M0lwUHRODQo2S3IwUnhFc1gzZ0JXeGJiQXBia3JaVm04azlXQmhjeHhXSldnNjhMSFZITDdsMFIvak02STdGVmxVQXk3QUF6DQpaS3VBZUQyNXdpV3ZnQXV2dE5RRENkWWdZVmEyR1Z2MGlmSGpDSUJFUGNIcFdNU2dueER2bHlNQ2I0VCt3bEdFDQp2bURCUWpJN3p1R0F0bFJoRFFJREFRQUJvNElEaURDQ0E0UXdId1lEVlIwakJCZ3dGb0FVZElXQXdHYkgzemZlDQp6NzBwTjZvREhiN3R6UmN3SFFZRFZSME9CQllFRlBDbkV6VG5QcXdqbTBuK2R1Z2JtN3VISFRtdU1CWUdBMVVkDQpFUVFQTUEyQ0N5b3ViWFJ1TG1OdkxuSjNNRDRHQTFVZElBUTNNRFV3TXdZR1o0RU1BUUlDTUNrd0p3WUlLd1lCDQpCUVVIQWdFV0cyaDBkSEE2THk5M2QzY3VaR2xuYVdObGNuUXVZMjl0TDBOUVV6QU9CZ05WSFE4QkFmOEVCQU1DDQpCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVITUFLRwpOR2gwZEhBNkx5OWpZV05sY25SekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWRzYjJKaGJGSnZiM1JICk1pNWpjblF3UWdZRFZSMGZCRHN3T1RBM29EV2dNNFl4YUhSMGNEb3ZMMk55YkRNdVpHbG5hV05sY25RdVkyOXQKTDBScFoybERaWEowUjJ4dlltRnNVbTl2ZEVjeUxtTnliREE5QmdOVkhTQUVOakEwTUFzR0NXQ0dTQUdHL1d3QwpBVEFIQmdWbmdRd0JBVEFJQmdabmdRd0JBZ0V3Q0FZR1o0RU1BUUlDTUFnR0JtZUJEQUVDQXpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFrUEZ3eXlpWGFaZDhkUDNBK2laN1U2dXR6V1g5dXB3R25JclhXa09IN1UxTVZsK3QKd2NXMUJTQXVXZEgvU3ZXZ0t0aXdsYTNKTGtvNzE2ZjJiNGdwL0RBL0pJUzd3N2Q3a3djc3I0ZHJkalB0QUZWUwpzbG1lNUxuUTg5L25ELzdkK01TNUVIS0JDUVJmejVlZUxqSjFqcythV05KWE1YNDNBWUd5Wm0wcEdyRm1DVzNSCmJwRDB1Zm92QVJURlhGWmtBZGw5aDZnNFU1K0xYVVp0WE1ZbmhJSFVmb3lNbzV0UzU4YUk3RGQ4S3Z2d1ZWbzQKY2hEWUFCUFBUSFBicWpjMXFDbUJhWngydk40WWU1RFV5cy92WndQOUJGb2hGckgvNmovZjNJTDE2L1Jaa2lNTgpKQ3FWSlV6S29aSG0xTGVzaDNTejhXMmptZHY1MWIyRVFKOEhtQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" | base64 --decode | openssl x509 -text -noout\n
 3061* clear
 3062* echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlHdmpDQ0JhYWdBd0lCQWdJUUFjZmtNOGxXdVpQcVBiWmU2UCsyZGpBTkJna3Foa2lHOXcwQkFRc0ZBREJaDQpNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZ1NXNWpNVE13TVFZRFZRUURFeXBFDQphV2RwUTJWeWRDQkhiRzlpWVd3Z1J6SWdWRXhUSUZKVFFTQlRTRUV5TlRZZ01qQXlNQ0JEUVRFd0hoY05NalF3DQpNekkyTURBd01EQXdXaGNOTWpVd05EQXhNak0xT1RVNVdqQlJNUXN3Q1FZRFZRUUdFd0pTVnpFUE1BMEdBMVVFDQpCeE1HUzJsbllXeHBNUnN3R1FZRFZRUUtFeEpOVkU0Z1VuZGhibVJoUTJWc2JDQlFURU14RkRBU0JnTlZCQU1NDQpDeW91YlhSdUxtTnZMbkozTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4Z09UDQpVQnRmekNyL3A2UC9sMU1HcXpPNERxcC9qWjdzVnBnRGR4WmJvb2JQV2ExZnJLRVM3amgrMlN1aW1LTFZhL3lODQp4L01Bb1NwbG95VkNHM2lsUHU1bXpnQWQyd2dXM0k1cmZGVjRQWDZEZWh3ZkFQYng0YzVhOFZNbmlSRmtUOTJ1DQp4NElNZU5Fc0M2NjVhM1VoVFF6R0F4dFlZSWpyaTBCeXJlVHd4dkNZTUR6R0FPZFhDVE5ISEY5MFk3M0lwUHRODQo2S3IwUnhFc1gzZ0JXeGJiQXBia3JaVm04azlXQmhjeHhXSldnNjhMSFZITDdsMFIvak02STdGVmxVQXk3QUF6DQpaS3VBZUQyNXdpV3ZnQXV2dE5RRENkWWdZVmEyR1Z2MGlmSGpDSUJFUGNIcFdNU2dueER2bHlNQ2I0VCt3bEdFDQp2bURCUWpJN3p1R0F0bFJoRFFJREFRQUJvNElEaURDQ0E0UXdId1lEVlIwakJCZ3dGb0FVZElXQXdHYkgzemZlDQp6NzBwTjZvREhiN3R6UmN3SFFZRFZSME9CQllFRlBDbkV6VG5QcXdqbTBuK2R1Z2JtN3VISFRtdU1CWUdBMVVkDQpFUVFQTUEyQ0N5b3ViWFJ1TG1OdkxuSjNNRDRHQTFVZElBUTNNRFV3TXdZR1o0RU1BUUlDTUNrd0p3WUlLd1lCDQpCUVVIQWdFV0cyaDBkSEE2THk5M2QzY3VaR2xuYVdObGNuUXVZMjl0TDBOUVV6QU9CZ05WSFE4QkFmOEVCQU1DDQpCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVITUFLRwpOR2gwZEhBNkx5OWpZV05sY25SekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWRzYjJKaGJGSnZiM1JICk1pNWpjblF3UWdZRFZSMGZCRHN3T1RBM29EV2dNNFl4YUhSMGNEb3ZMMk55YkRNdVpHbG5hV05sY25RdVkyOXQKTDBScFoybERaWEowUjJ4dlltRnNVbTl2ZEVjeUxtTnliREE5QmdOVkhTQUVOakEwTUFzR0NXQ0dTQUdHL1d3QwpBVEFIQmdWbmdRd0JBVEFJQmdabmdRd0JBZ0V3Q0FZR1o0RU1BUUlDTUFnR0JtZUJEQUVDQXpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFrUEZ3eXlpWGFaZDhkUDNBK2laN1U2dXR6V1g5dXB3R25JclhXa09IN1UxTVZsK3QKd2NXMUJTQXVXZEgvU3ZXZ0t0aXdsYTNKTGtvNzE2ZjJiNGdwL0RBL0pJUzd3N2Q3a3djc3I0ZHJkalB0QUZWUwpzbG1lNUxuUTg5L25ELzdkK01TNUVIS0JDUVJmejVlZUxqSjFqcythV05KWE1YNDNBWUd5Wm0wcEdyRm1DVzNSCmJwRDB1Zm92QVJURlhGWmtBZGw5aDZnNFU1K0xYVVp0WE1ZbmhJSFVmb3lNbzV0UzU4YUk3RGQ4S3Z2d1ZWbzQKY2hEWUFCUFBUSFBicWpjMXFDbUJhWngydk40WWU1RFV5cy92WndQOUJGb2hGckgvNmovZjNJTDE2L1Jaa2lNTgpKQ3FWSlV6S29aSG0xTGVzaDNTejhXMmptZHY1MWIyRVFKOEhtQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" | base64 --decode | openssl x509 -text -noout\n
 3063* echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlHdmpDQ0JhYWdBd0lCQWdJUUFjZmtNOGxXdVpQcVBiWmU2UCsyZGpBTkJna3Foa2lHOXcwQkFRc0ZBREJaDQpNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZ1NXNWpNVE13TVFZRFZRUURFeXBFDQphV2RwUTJWeWRDQkhiRzlpWVd3Z1J6SWdWRXhUSUZKVFFTQlRTRUV5TlRZZ01qQXlNQ0JEUVRFd0hoY05NalF3DQpNekkyTURBd01EQXdXaGNOTWpVd05EQXhNak0xT1RVNVdqQlJNUXN3Q1FZRFZRUUdFd0pTVnpFUE1BMEdBMVVFDQpCeE1HUzJsbllXeHBNUnN3R1FZRFZRUUtFeEpOVkU0Z1VuZGhibVJoUTJWc2JDQlFURU14RkRBU0JnTlZCQU1NDQpDeW91YlhSdUxtTnZMbkozTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4Z09UDQpVQnRmekNyL3A2UC9sMU1HcXpPNERxcC9qWjdzVnBnRGR4WmJvb2JQV2ExZnJLRVM3amgrMlN1aW1LTFZhL3lODQp4L01Bb1NwbG95VkNHM2lsUHU1bXpnQWQyd2dXM0k1cmZGVjRQWDZEZWh3ZkFQYng0YzVhOFZNbmlSRmtUOTJ1DQp4NElNZU5Fc0M2NjVhM1VoVFF6R0F4dFlZSWpyaTBCeXJlVHd4dkNZTUR6R0FPZFhDVE5ISEY5MFk3M0lwUHRODQo2S3IwUnhFc1gzZ0JXeGJiQXBia3JaVm04azlXQmhjeHhXSldnNjhMSFZITDdsMFIvak02STdGVmxVQXk3QUF6DQpaS3VBZUQyNXdpV3ZnQXV2dE5RRENkWWdZVmEyR1Z2MGlmSGpDSUJFUGNIcFdNU2dueER2bHlNQ2I0VCt3bEdFDQp2bURCUWpJN3p1R0F0bFJoRFFJREFRQUJvNElEaURDQ0E0UXdId1lEVlIwakJCZ3dGb0FVZElXQXdHYkgzemZlDQp6NzBwTjZvREhiN3R6UmN3SFFZRFZSME9CQllFRlBDbkV6VG5QcXdqbTBuK2R1Z2JtN3VISFRtdU1CWUdBMVVkDQpFUVFQTUEyQ0N5b3ViWFJ1TG1OdkxuSjNNRDRHQTFVZElBUTNNRFV3TXdZR1o0RU1BUUlDTUNrd0p3WUlLd1lCDQpCUVVIQWdFV0cyaDBkSEE2THk5M2QzY3VaR2xuYVdObGNuUXVZMjl0TDBOUVV6QU9CZ05WSFE4QkFmOEVCQU1DDQpCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVITUFLRwpOR2gwZEhBNkx5OWpZV05sY25SekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWRzYjJKaGJGSnZiM1JICk1pNWpjblF3UWdZRFZSMGZCRHN3T1RBM29EV2dNNFl4YUhSMGNEb3ZMMk55YkRNdVpHbG5hV05sY25RdVkyOXQKTDBScFoybERaWEowUjJ4dlltRnNVbTl2ZEVjeUxtTnliREE5QmdOVkhTQUVOakEwTUFzR0NXQ0dTQUdHL1d3QwpBVEFIQmdWbmdRd0JBVEFJQmdabmdRd0JBZ0V3Q0FZR1o0RU1BUUlDTUFnR0JtZUJEQUVDQXpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFrUEZ3eXlpWGFaZDhkUDNBK2laN1U2dXR6V1g5dXB3R25JclhXa09IN1UxTVZsK3QKd2NXMUJTQXVXZEgvU3ZXZ0t0aXdsYTNKTGtvNzE2ZjJiNGdwL0RBL0pJUzd3N2Q3a3djc3I0ZHJkalB0QUZWUwpzbG1lNUxuUTg5L25ELzdkK01TNUVIS0JDUVJmejVlZUxqSjFqcythV05KWE1YNDNBWUd5Wm0wcEdyRm1DVzNSCmJwRDB1Zm92QVJURlhGWmtBZGw5aDZnNFU1K0xYVVp0WE1ZbmhJSFVmb3lNbzV0UzU4YUk3RGQ4S3Z2d1ZWbzQKY2hEWUFCUFBUSFBicWpjMXFDbUJhWngydk40WWU1RFV5cy92WndQOUJGb2hGckgvNmovZjNJTDE2L1Jaa2lNTgpKQ3FWSlV6S29aSG0xTGVzaDNTejhXMmptZHY1MWIyRVFKOEhtQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" | base64 --decode > tls.crt\n
 3064* cat tls.crt\n
 3065* cd star_mtn_co_rw_691059851
 3066* ls
 3067* cat combined.crt
 3068* cat private.key
 3069* clear
 3070* ls
 3071* k get secrets | grep common
 3072* cat cacert.crt
 3073* clear
 3074* k get secrets common-tlssecret -0 yaml > exiting-tls.yaml
 3075* k get secrets common-tlssecret -o yaml > exiting-tls.yaml
 3076* cat exiting-tls.yaml
 3077* cat retrieved-tls.crt
 3078* clear
 3079* cat exiting-tls.yaml
 3080* clear
 3081* echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlHdmpDQ0JhYWdBd0lCQWdJUUFjZmtNOGxXdVpQcVBiWmU2UCsyZGpBTkJna3Foa2lHOXcwQkFRc0ZBREJaDQpNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZ1NXNWpNVE13TVFZRFZRUURFeXBFDQphV2RwUTJWeWRDQkhiRzlpWVd3Z1J6SWdWRXhUSUZKVFFTQlRTRUV5TlRZZ01qQXlNQ0JEUVRFd0hoY05NalF3DQpNekkyTURBd01EQXdXaGNOTWpVd05EQXhNak0xT1RVNVdqQlJNUXN3Q1FZRFZRUUdFd0pTVnpFUE1BMEdBMVVFDQpCeE1HUzJsbllXeHBNUnN3R1FZRFZRUUtFeEpOVkU0Z1VuZGhibVJoUTJWc2JDQlFURU14RkRBU0JnTlZCQU1NDQpDeW91YlhSdUxtTnZMbkozTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4Z09UDQpVQnRmekNyL3A2UC9sMU1HcXpPNERxcC9qWjdzVnBnRGR4WmJvb2JQV2ExZnJLRVM3amgrMlN1aW1LTFZhL3lODQp4L01Bb1NwbG95VkNHM2lsUHU1bXpnQWQyd2dXM0k1cmZGVjRQWDZEZWh3ZkFQYng0YzVhOFZNbmlSRmtUOTJ1DQp4NElNZU5Fc0M2NjVhM1VoVFF6R0F4dFlZSWpyaTBCeXJlVHd4dkNZTUR6R0FPZFhDVE5ISEY5MFk3M0lwUHRODQo2S3IwUnhFc1gzZ0JXeGJiQXBia3JaVm04azlXQmhjeHhXSldnNjhMSFZITDdsMFIvak02STdGVmxVQXk3QUF6DQpaS3VBZUQyNXdpV3ZnQXV2dE5RRENkWWdZVmEyR1Z2MGlmSGpDSUJFUGNIcFdNU2dueER2bHlNQ2I0VCt3bEdFDQp2bURCUWpJN3p1R0F0bFJoRFFJREFRQUJvNElEaURDQ0E0UXdId1lEVlIwakJCZ3dGb0FVZElXQXdHYkgzemZlDQp6NzBwTjZvREhiN3R6UmN3SFFZRFZSME9CQllFRlBDbkV6VG5QcXdqbTBuK2R1Z2JtN3VISFRtdU1CWUdBMVVkDQpFUVFQTUEyQ0N5b3ViWFJ1TG1OdkxuSjNNRDRHQTFVZElBUTNNRFV3TXdZR1o0RU1BUUlDTUNrd0p3WUlLd1lCDQpCUVVIQWdFV0cyaDBkSEE2THk5M2QzY3VaR2xuYVdObGNuUXVZMjl0TDBOUVV6QU9CZ05WSFE4QkFmOEVCQU1DDQpCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVITUFLRwpOR2gwZEhBNkx5OWpZV05sY25SekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWRzYjJKaGJGSnZiM1JICk1pNWpjblF3UWdZRFZSMGZCRHN3T1RBM29EV2dNNFl4YUhSMGNEb3ZMMk55YkRNdVpHbG5hV05sY25RdVkyOXQKTDBScFoybERaWEowUjJ4dlltRnNVbTl2ZEVjeUxtTnliREE5QmdOVkhTQUVOakEwTUFzR0NXQ0dTQUdHL1d3QwpBVEFIQmdWbmdRd0JBVEFJQmdabmdRd0JBZ0V3Q0FZR1o0RU1BUUlDTUFnR0JtZUJEQUVDQXpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFrUEZ3eXlpWGFaZDhkUDNBK2laN1U2dXR6V1g5dXB3R25JclhXa09IN1UxTVZsK3QKd2NXMUJTQXVXZEgvU3ZXZ0t0aXdsYTNKTGtvNzE2ZjJiNGdwL0RBL0pJUzd3N2Q3a3djc3I0ZHJkalB0QUZWUwpzbG1lNUxuUTg5L25ELzdkK01TNUVIS0JDUVJmejVlZUxqSjFqcythV05KWE1YNDNBWUd5Wm0wcEdyRm1DVzNSCmJwRDB1Zm92QVJURlhGWmtBZGw5aDZnNFU1K0xYVVp0WE1ZbmhJSFVmb3lNbzV0UzU4YUk3RGQ4S3Z2d1ZWbzQKY2hEWUFCUFBUSFBicWpjMXFDbUJhWngydk40WWU1RFV5cy92WndQOUJGb2hGckgvNmovZjNJTDE2L1Jaa2lNTgpKQ3FWSlV6S29aSG0xTGVzaDNTejhXMmptZHY1MWIyRVFKOEhtQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" | base64 --decode\n
 3082* echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lVSDFGZVJVa25KKzc1cm84VjJpTCt0cG9tZUljd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0xURUxNQWtHQTFVRUF4TUNRMEV4RFRBTEJnTlZCQXNUQkZSTFIwa3hEekFOQmdOVkJBb1RCbFpOZDJGeQpaVEFlRncweU16QTJNekF3TmpJNU1UVmFGdzB5TnpBMk16QXdOakk1TVRWYU1DMHhDekFKQmdOVkJBTVRBa05CCk1RMHdDd1lEVlFRTEV3UlVTMGRKTVE4d0RRWURWUVFLRXdaV1RYZGhjbVV3Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURFK0NBWFFnZjFMZm9CcTFMdjRodmZVMHpCY216by9XWjU3L2xWbUlEbAppQmZ0YnBRZ2hpMlFRdGRGNmFjYUxLMEZsWEpGdEIxT1dHNkdVeG9tUFhaRk9nWGJZbnJ4WWZlLzc3aW1teG55CmJnYzlBVXU0ZndBZ0J5cU43dzBhTml3QlVWZHBMK29Tb3RsblVjbUVyblJldVBRdXBhaW0xdXdVaVNpOGdBSlEKdXlUREJKMHFtUkZWcWx2RDFubHJwT0o5MmwwTzhkOG1ma2h4enJGR2dZOGl4aVNlZ2UzN3p4SWtNdnVwdHpVUwp4VlV0VUFwUWthbjlYa0F2UzFWajNOc0dpL3ViVWlva3dGRDkwMEE1V3huTTlXQ2Z6T05NdmYzWHM2MHpLSUhlCkZqOU9jckk3TUZUa1ZoV0NCNkVWNHZ2OTVkdFpBTnE1VEpGdVlwSG1zM1dCQWdNQkFBR2pVekJSTUIwR0ExVWQKRGdRV0JCUzlHb1BzTEZPOXZnR25vVCtTc2NOVEh0NCtxVEFmQmdOVkhTTUVHREFXZ0JTOUdvUHNMRk85dmdHbgpvVCtTc2NOVEh0NCtxVEFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVClREc0FlNlViaVB5VnRqRmxvMm5lblhpcUNqRnoxZkMrVEl3R1ZPUyt6QUNWL29BTHBJTXpXOUZpN29VdmhmR1MKMWE2aEVCeHFqeDdjQnVsS3Z5VkhJWkhqUjVFMmE3ZkZmOFJQNTA3QVNGbmJSSVRrVGZpSjRMQlJUT0o0WkEvbAp3RHJpVW1xL25lSFhRSWthWjFnS1ViWXl4MlljdDBiQ2N4ZC9leE8yYjJZSEhsL2U5cWVmY2t4Mk10SllCcmVPCkZ2M1FhY3h5Q3U0eDJnUUtJQS9xQzZ6TExQd0Ftc1RsSEtrWmttUitJbmdIaWZnN0RJQ0kvSVg3ejNWNDBHUzkKNSt2QnVFWkxvcnV5LzNGd21IUzJlVTB0MGJRaGZudHREUDZKZDhORUdlbnlyRWRyMHZSMGcvMHNKRlhibWtQWQoyS2FoRmtCVWo5aWR0aHVnOEQ2RgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" | base64 --decode\n
 3083* echo "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRREdBNU5RRzEvTUt2K24Kby8rWFV3YXJNN2dPcW4rTm51eFdtQU4zRmx1aWhzOVpyVitzb1JMdU9IN1pLNktZb3RWci9JM0g4d0NoS21XagpKVUliZUtVKzdtYk9BQjNiQ0JiY2ptdDhWWGc5Zm9ONkhCOEE5dkhoemxyeFV5ZUpFV1JQM2E3SGdneDQwU3dMCnJybHJkU0ZORE1ZREcxaGdpT3VMUUhLdDVQREc4Smd3UE1ZQTUxY0pNMGNjWDNSanZjaWsrMDNvcXZSSEVTeGYKZUFGYkZ0c0NsdVN0bFdieVQxWUdGekhGWWxhRHJ3c2RVY3Z1WFJIK016b2pzVldWUURMc0FETmtxNEI0UGJuQwpKYStBQzYrMDFBTUoxaUJoVnJZWlcvU0o4ZU1JZ0VROXdlbFl4S0NmRU8rWEl3SnZoUDdDVVlTK1lNRkNNanZPCjRZQzJWR0VOQWdNQkFBRUNnZ0VBRXNpNkM4cGMveGhCSWwwTFhRYVNSbUZrbjNlTEhCc3NYbGFUVlpPNFk2V1kKTy9DWGQ5L2IxTjlsSVNMampNazlwNzNRa1Z3Ni9nN3dqMVowZS9pbzdGeGZRa0YrazQyajVZNVpJZlZWcjdlMQpyenJGc2lpNjcybk05TUducVhnTjVRbXBqK0dGWDF5d2FmZE1QYVpoMzFaTDNuV1VuNnU5ZEh0THBiVm5KZWY0Ck12UFY5UytnWGc2di9vRFBFY0VXaUhvWWdxRmw0Tm9rYXJidG8zQ3RwZHRRSHdzc2ZqaGpUeUhDRnFiWjhPeWkKRHZpUEVYYzRFMnY3Y2JDMi9yNEI1MVJmVUIzV3h4Rlc3VXQySDZpWlNQVmQxc2s3R0RaZ2cxdlVVamJHa29jawpuQkVpNGU3bVZlcWRIdzJFaHNvdTJTeFpJczhTUmRLdE02Z0IycG5ZQVFLQmdRRHNuVGM2Y1J4bUtjYWpaTWVMCnU1UlB0cjBpdmdTSUZXZWlMZzJDZjZoNGFKUEdlSFV0T05LZjgyN0hDTmdwdjMrbVAzeGdVZmVRdS9PbHR6NFoKNkpRZ1ZjRkJzUitmZnR4cTlYWTVJekFiSEtXU0lXK3U3UENqRXF0TUhRc2xJSndLMTI2SVR1R3puZGhoQzRiNAphbUQxdUg4K2J2UGpxcU1qdE1LcnlqaUNBUUtCZ1FEV1BNRG45b0dmVURVQnQ2U0cxbHRKQko0U1EvcGN5SWtVCnVFSUE2K09kRjdwN1lKamFiSDJEVWlhVFVnNnpWK2Z6cjZYN2U5ckJncVcvR00vdnVYcHRYb1YrNjNXR0dYUFcKZm9QQmdhNkk0SXRqQmxWUmU1WFo5eEhaakZ0ZGRMQlZ3eVpxVjRQTGZuR0xlSVNnWXlrbi9UYUhaOENvaE1pOQowOUp0Tm1mSERRS0JnRmswbkpISCt6RDVKdzZLL0VCT0pBZzVtT3owUHJrZmVNYklIZ2ZKSVRia0ZuS0pENFJSCkcvZDV5NVgyVzZqQnJkcDdyT1NUZ29acWxkMHdUSlZ2L2dpQ3pDMThIYlFBSEJHbklUOUJhTzJQeTB4Z2xyNlkKVGREdFJPK1pNNDUzME55MWc5S1lDcmV4RnRiZmhhODZTL3ZYNXdFZXk0eFYxTk90WG9kdDRnZ0JBb0dCQU5JRAppb09hTmVWcjVocUI0T3BCZGdrMVdwUERTY25zMTl5VTZEY3BCdDgzcEpwUHptZklsSjNJU1lKL25XT1lHQXpkCnNsTytUV3NIWE4zaFArM2JvRFZZeEhydjdTeUJCUHBPMlhBM1pWWk84TFVwUHpmNmM2TFJQaEZLTTBLQklsOWcKUitkVlZTQ0dHbDdEelJmQlBWWXpObUkwaGp0c3Q3REcxbkF6TmpaOUFvR0FkdlVScDFRL1VxVXcweG1MUk03bgppVWYwbXBWV0NucWhVWHozTU85am5qYW5mL2I3ZlZ0OVllYlVXTGthdlZiTWtST1ZlR3VIOFhnVnNNejVrQVVLClQraFdWTEs5R0dGQkNvay9qbmcwQlludFRjM1BTN0dZdzZYaWY1V0lsUWYwS0E4TFJLay9iTzJUcitrYlloMVUKNUFFL3NycThGNUVEN0JmWXAzbFNINDQ9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K" | base64 --decode\n
 3084* # Decode cacert.crt\necho "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lVSDFGZVJVa25KKzc1cm84VjJpTCt0cG9tZUljd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0xURUxNQWtHQTFVRUF4TUNRMEV4RFRBTEJnTlZCQXNUQkZSTFIwa3hEekFOQmdOVkJBb1RCbFpOZDJGeQpaVEFlRncweU16QTJNekF3TmpJNU1UVmFGdzB5TnpBMk16QXdOakk1TVRWYU1DMHhDekFKQmdOVkJBTVRBa05CCk1RMHdDd1lEVlFRTEV3UlVTMGRKTVE4d0RRWURWUVFLRXdaV1RYZGhjbVV3Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURFK0NBWFFnZjFMZm9CcTFMdjRodmZVMHpCY216by9XWjU3L2xWbUlEbAppQmZ0YnBRZ2hpMlFRdGRGNmFjYUxLMEZsWEpGdEIxT1dHNkdVeG9tUFhaRk9nWGJZbnJ4WWZlLzc3aW1teG55CmJnYzlBVXU0ZndBZ0J5cU43dzBhTml3QlVWZHBMK29Tb3RsblVjbUVyblJldVBRdXBhaW0xdXdVaVNpOGdBSlEKdXlUREJKMHFtUkZWcWx2RDFubHJwT0o5MmwwTzhkOG1ma2h4enJGR2dZOGl4aVNlZ2UzN3p4SWtNdnVwdHpVUwp4VlV0VUFwUWthbjlYa0F2UzFWajNOc0dpL3ViVWlva3dGRDkwMEE1V3huTTlXQ2Z6T05NdmYzWHM2MHpLSUhlCkZqOU9jckk3TUZUa1ZoV0NCNkVWNHZ2OTVkdFpBTnE1VEpGdVlwSG1zM1dCQWdNQkFBR2pVekJSTUIwR0ExVWQKRGdRV0JCUzlHb1BzTEZPOXZnR25vVCtTc2NOVEh0NCtxVEFmQmdOVkhTTUVHREFXZ0JTOUdvUHNMRk85dmdHbgpvVCtTc2NOVEh0NCtxVEFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVClREc0FlNlViaVB5VnRqRmxvMm5lblhpcUNqRnoxZkMrVEl3R1ZPUyt6QUNWL29BTHBJTXpXOUZpN29VdmhmR1MKMWE2aEVCeHFqeDdjQnVsS3Z5VkhJWkhqUjVFMmE3ZkZmOFJQNTA3QVNGbmJSSVRrVGZpSjRMQlJUT0o0WkEvbAp3RHJpVW1xL25lSFhRSWthWjFnS1ViWXl4MlljdDBiQ2N4ZC9leE8yYjJZSEhsL2U5cWVmY2t4Mk10SllCcmVPCkZ2M1FhY3h5Q3U0eDJnUUtJQS9xQzZ6TExQd0Ftc1RsSEtrWmttUitJbmdIaWZnN0RJQ0kvSVg3ejNWNDBHUzkKNSt2QnVFWkxvcnV5LzNGd21IUzJlVTB0MGJRaGZudHREUDZKZDhORUdlbnlyRWRyMHZSMGcvMHNKRlhibWtQWQoyS2FoRmtCVWo5aWR0aHVnOEQ2RgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" | base64 --decode > cacert.crt\n\n# Decode tls.crt\necho "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlHdmpDQ0JhYWdBd0lCQWdJUUFjZmtNOGxXdVpQcVBiWmU2UCsyZGpBTkJna3Foa2lHOXcwQkFRc0ZBREJaDQpNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZ1NXNWpNVE13TVFZRFZRUURFeXBFDQphV2RwUTJWeWRDQkhiRzlpWVd3Z1J6SWdWRXhUSUZKVFFTQlRTRUV5TlRZZ01qQXlNQ0JEUVRFd0hoY05NalF3DQpNekkyTURBd01EQXdXaGNOTWpVd05EQXhNak0xT1RVNVdqQlJNUXN3Q1FZRFZRUUdFd0pTVnpFUE1BMEdBMVVFDQpCeE1HUzJsbllXeHBNUnN3R1FZRFZRUUtFeEpOVkU0Z1VuZGhibVJoUTJWc2JDQlFURU14RkRBU0JnTlZCQU1NDQpDeW91YlhSdUxtTnZMbkozTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4Z09UDQpVQnRmekNyL3A2UC9sMU1HcXpPNERxcC9qWjdzVnBnRGR4WmJvb2JQV2ExZnJLRVM3amgrMlN1aW1LTFZhL3lODQp4L01Bb1NwbG95VkNHM2lsUHU1bXpnQWQyd2dXM0k1cmZGVjRQWDZEZWh3ZkFQYng0YzVhOFZNbmlSRmtUOTJ1DQp4NElNZU5Fc0M2NjVhM1VoVFF6R0F4dFlZSWpyaTBCeXJlVHd4dkNZTUR6R0FPZFhDVE5ISEY5MFk3M0lwUHRODQo2S3IwUnhFc1gzZ0JXeGJiQXBia3JaVm04azlXQmhjeHhXSldnNjhMSFZITDdsMFIvak02STdGVmxVQXk3QUF6DQpaS3VBZUQyNXdpV3ZnQXV2dE5RRENkWWdZVmEyR1Z2MGlmSGpDSUJFUGNIcFdNU2dueER2bHlNQ2I0VCt3bEdFDQp2bURCUWpJN3p1R0F0bFJoRFFJREFRQUJvNElEaURDQ0E0UXdId1lEVlIwakJCZ3dGb0FVZElXQXdHYkgzemZlDQp6NzBwTjZvREhiN3R6UmN3SFFZRFZSME9CQllFRlBDbkV6VG5QcXdqbTBuK2R1Z2JtN3VISFRtdU1CWUdBMVVkDQpFUVFQTUEyQ0N5b3ViWFJ1TG1OdkxuSjNNRDRHQTFVZElBUTNNRFV3TXdZR1o0RU1BUUlDTUNrd0p3WUlLd1lCDQpCUVVIQWdFV0cyaDBkSEE2THk5M2QzY3VaR2xuYVdObGNuUXVZMjl0TDBOUVV6QU9CZ05WSFE4QkFmOEVCQU1DDQpCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVITUFLRwpOR2gwZEhBNkx5OWpZV05sY25SekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWRzYjJKaGJGSnZiM1JICk1pNWpjblF3UWdZRFZSMGZCRHN3T1RBM29EV2dNNFl4YUhSMGNEb3ZMMk55YkRNdVpHbG5hV05sY25RdVkyOXQKTDBScFoybERaWEowUjJ4dlltRnNVbTl2ZEVjeUxtTnliREE5QmdOVkhTQUVOakEwTUFzR0NXQ0dTQUdHL1d3QwpBVEFIQmdWbmdRd0JBVEFJQmdabmdRd0JBZ0V3Q0FZR1o0RU1BUUlDTUFnR0JtZUJEQUVDQXpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFrUEZ3eXlpWGFaZDhkUDNBK2laN1U2dXR6V1g5dXB3R25JclhXa09IN1UxTVZsK3QKd2NXMUJTQXVXZEgvU3ZXZ0t0aXdsYTNKTGtvNzE2ZjJiNGdwL0RBL0pJUzd3N2Q3a3djc3I0ZHJkalB0QUZWUwpzbG1lNUxuUTg5L25ELzdkK01TNUVIS0JDUVJmejVlZUxqSjFqcythV05KWE1YNDNBWUd5Wm0wcEdyRm1DVzNSCmJwRDB1Zm92QVJURlhGWmtBZGw5aDZnNFU1K0xYVVp0WE1ZbmhJSFVmb3lNbzV0UzU4YUk3RGQ4S3Z2d1ZWbzQKY2hEWUFCUFBUSFBicWpjMXFDbUJhWngydk40WWU1RFV5cy92WndQOUJGb2hGckgvNmovZjNJTDE2L1Jaa2lNTgpKQ3FWSlV6S29aSG0xTGVzaDNTejhXMmptZHY1MWIyRVFKOEhtQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" | base64 --decode > tls.crt\n\n# Decode tls.key\necho "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRREdBNU5RRzEvTUt2K24Kby8rWFV3YXJNN2dPcW4rTm51eFdtQU4zRmx1aWhzOVpyVitzb1JMdU9IN1pLNktZb3RWci9JM0g4d0NoS21XagpKVUliZUtVKzdtYk9BQjNiQ0JiY2ptdDhWWGc5Zm9ONkhCOEE5dkhoemxyeFV5ZUpFV1JQM2E3SGdneDQwU3dMCnJybHJkU0ZORE1ZREcxaGdpT3VMUUhLdDVQREc4Smd3UE1ZQTUxY0pNMGNjWDNSanZjaWsrMDNvcXZSSEVTeGYKZUFGYkZ0c0NsdVN0bFdieVQxWUdGekhGWWxhRHJ3c2RVY3Z1WFJIK016b2pzVldWUURMc0FETmtxNEI0UGJuQwpKYStBQzYrMDFBTUoxaUJoVnJZWlcvU0o4ZU1JZ0VROXdlbFl4S0NmRU8rWEl3SnZoUDdDVVlTK1lNRkNNanZPCjRZQzJWR0VOQWdNQkFBRUNnZ0VBRXNpNkM4cGMveGhCSWwwTFhRYVNSbUZrbjNlTEhCc3NYbGFUVlpPNFk2V1kKTy9DWGQ5L2IxTjlsSVNMampNazlwNzNRa1Z3Ni9nN3dqMVowZS9pbzdGeGZRa0YrazQyajVZNVpJZlZWcjdlMQpyenJGc2lpNjcybk05TUducVhnTjVRbXBqK0dGWDF5d2FmZE1QYVpoMzFaTDNuV1VuNnU5ZEh0THBiVm5KZWY0Ck12UFY5UytnWGc2di9vRFBFY0VXaUhvWWdxRmw0Tm9rYXJidG8zQ3RwZHRRSHdzc2ZqaGpUeUhDRnFiWjhPeWkKRHZpUEVYYzRFMnY3Y2JDMi9yNEI1MVJmVUIzV3h4Rlc3VXQySDZpWlNQVmQxc2s3R0RaZ2cxdlVVamJHa29jawpuQkVpNGU3bVZlcWRIdzJFaHNvdTJTeFpJczhTUmRLdE02Z0IycG5ZQVFLQmdRRHNuVGM2Y1J4bUtjYWpaTWVMCnU1UlB0cjBpdmdTSUZXZWlMZzJDZjZoNGFKUEdlSFV0T05LZjgyN0hDTmdwdjMrbVAzeGdVZmVRdS9PbHR6NFoKNkpRZ1ZjRkJzUitmZnR4cTlYWTVJekFiSEtXU0lXK3U3UENqRXF0TUhRc2xJSndLMTI2SVR1R3puZGhoQzRiNAphbUQxdUg4K2J2UGpxcU1qdE1LcnlqaUNBUUtCZ1FEV1BNRG45b0dmVURVQnQ2U0cxbHRKQko0U1EvcGN5SWtVCnVFSUE2K09kRjdwN1lKamFiSDJEVWlhVFVnNnpWK2Z6cjZYN2U5ckJncVcvR00vdnVYcHRYb1YrNjNXR0dYUFcKZm9QQmdhNkk0SXRqQmxWUmU1WFo5eEhaakZ0ZGRMQlZ3eVpxVjRQTGZuR0xlSVNnWXlrbi9UYUhaOENvaE1pOQowOUp0Tm1mSERRS0JnRmswbkpISCt6RDVKdzZLL0VCT0pBZzVtT3owUHJrZmVNYklIZ2ZKSVRia0ZuS0pENFJSCkcvZDV5NVgyVzZqQnJkcDdyT1NUZ29acWxkMHdUSlZ2L2dpQ3pDMThIYlFBSEJHbklUOUJhTzJQeTB4Z2xyNlkKVGREdFJPK1pNNDUzME55MWc5S1lDcmV4RnRiZmhhODZTL3ZYNXdFZXk0eFYxTk90WG9kdDRnZ0JBb0dCQU5JRAppb09hTmVWcjVocUI0T3BCZGdrMVdwUERTY25zMTl5VTZEY3BCdDgzcEpwUHptZklsSjNJU1lKL25XT1lHQXpkCnNsTytUV3NIWE4zaFArM2JvRFZZeEhydjdTeUJCUHBPMlhBM1pWWk84TFVwUHpmNmM2TFJQaEZLTTBLQklsOWcKUitkVlZTQ0dHbDdEelJmQlBWWXpObUkwaGp0c3Q3REcxbkF6TmpaOUFvR0FkdlVScDFRL1VxVXcweG1MUk03bgppVWYwbXBWV0NucWhVWHozTU85am5qYW5mL2I3ZlZ0OVllYlVXTGthdlZiTWtST1ZlR3VIOFhnVnNNejVrQVVLClQraFdWTEs5R0dGQkNvay9qbmcwQlludFRjM1BTN0dZdzZYaWY1V0lsUWYwS0E4TFJLay9iTzJUcitrYlloMVUKNUFFL3NycThGNUVEN0JmWXAzbFNINDQ9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K" | base64 --decode > tls.key\n
 3085* ls
 3086* cat cacert.crt
 3087* openssl crl2pkcs7 -nocrl -certfile tls.crt | openssl pkcs7 -print_certs -noout\n
 3088* cat combined.crt
 3089* cat star_mtn_co_rw.crt
 3090* clear
 3091* k delete secrets common-tlssecret
 3092* kubectl create secret tls common-tlssecret \\n  --cert=combined.crt \\n  --key=private.key \\n  --cacert=cacert.crt \\n  --dry-run=client -o yaml > common-tlssecret.yaml\n
 3093* kubectl create secret tls common-tlssecret \\n  --cert=combined.crt \\n  --key=private.key \\n  --dry-run=client -o yaml > common-tlssecret.yaml\n
 3094* # Create the TLS secret without CA certificate\nkubectl create secret tls common-tlssecret \\n  --cert=combined.crt \\n  --key=private.key\n\n# Patch the secret to include the CA certificate\nkubectl patch secret common-tlssecret -p='{"data": {"ca.crt": "'"$(base64 -w 0 cacert.crt)"'"}}'\n
 3095* k describe secrets common-tlssecret
 3096* # Create the TLS secret without CA certificate\nkubectl create secret tls common-tlssecret \\n  --cert=combined.crt \\n  --key=private.key\n\n# Base64 encode the CA certificate\nCA_CERT=$(base64 -i cacert.crt)\n\n# Patch the secret to include the CA certificate\nkubectl patch secret common-tlssecret -p='{"data": {"cacert.crt": "'"${CA_CERT}"'"}}'\n
 3097* clear
 3098* # Base64 encode the CA certificate\nCA_CERT=$(base64 -i cacert.crt)\n\n# Patch the secret to include the CA certificate with the key 'cacert.crt'\nkubectl patch secret common-tlssecret -p='{"data": {"cacert.crt": "'"${CA_CERT}"'"}}'\n
 3099* kubectl describe secret common-tlssecret\n
 3100* kubectl edit secret common-tlssecret\n
 3101* kubectl describe secret common-tlssecret\n
 3102* kubectl get secret common-tlssecret -n default -o jsonpath='{.data.cacert\.crt}' | base64 --decode > existing-cacert.crt\nkubectl get secret common-tlssecret -n default -o jsonpath='{.data.tls\.crt}' | base64 --decode > existing-server.crt\nkubectl get secret common-tlssecret -n default -o jsonpath='{.data.tls\.key}' | base64 --decode > existing-server.key\n
 3103* openssl x509 -req -in server.csr -CA existing-server.crt -CAkey existing-server.key -CAcreateserial -out server.crt -days 365 -extfile csr.conf -extensions req_ext\n
 3104* kubectl get secret common-tlssecret -n vault -o yaml > common-tlssecret-backup.yaml\n
 3105* kubectl delete secret common-tlssecret -n vault\n
 3106* ls
 3107* kubectl create secret generic common-tlssecret -n default \\n  --from-file=tls.crt=./server.crt \\n  --from-file=tls.key=./private.key \\n  --from-file=cacert.crt=./existing-server.crt\n
 3108* kubectl create secret generic common-tlssecret -n vault \\n  --from-file=tls.crt=./server.crt \\n  --from-file=tls.key=./private.key \\n  --from-file=cacert.crt=./existing-server.crt\n
 3109* helm upgrade --install vault hashicorp/vault -f mtnrw-override-values.yml -n vault\n
 3110* cd ..
 3111* helm upgrade --install vault hashicorp/vault -f mtnrw-override-values.yml -n vault\n
 3112  k9s
 3113* kubectl rollout restart statefulset vault -n vault\n
 3114* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 3115* openssl x509 -in server.crt -text -noout\n
 3116* kubectl get secret common-tlssecret -n vault -o yaml\n
 3117* clear
 3118* cd ..
 3119* cd Vault-CSR
 3120* ls
 3121* pwd
 3122* kubectl get secret common-tlssecret -n vault -o jsonpath='{.data.cacert\.crt}' | base64 --decode > vault-cacert.crt\nkubectl get secret common-tlssecret -n vault -o jsonpath='{.data.tls\.crt}' | base64 --decode > vault-server.crt\nkubectl get secret common-tlssecret -n vault -o jsonpath='{.data.tls\.key}' | base64 --decode > vault-server.key\n
 3123* openssl s_client -connect vault-0.vault-internal.vault.svc.cluster.local:8200 -CAfile ./vault-cacert.crt -cert ./vault-server.crt -key ./vault-server.key\n
 3124* nslookup vault-0.vault-internal.vault.svc.cluster.local\n
 3125* ping vault-0.vault-internal.vault.svc.cluster.local\n
 3126* nc -zv vault-0.vault-internal.vault.svc.cluster.local 8200\n
 3127* kubectl get svc vault-0 -n vault -o wide\n
 3128* cd ..
 3129* k get svc 
 3130* k get svc -n vault
 3131* k get svc -n vault -o wide
 3132* clear
 3133* kubectl get pods -n vault -o wide\n
 3134* openssl s_client -connect 10.156.136.3:8200 -CAfile ./vault-cacert.crt -cert ./vault-server.crt -key ./vault-server.key\nopenssl s_client -connect 10.156.136.10:8200 -CAfile ./vault-cacert.crt -cert ./vault-server.crt -key ./vault-server.key\nopenssl s_client -connect 10.156.136.11:8200 -CAfile ./vault-cacert.crt -cert ./vault-server.crt -key ./vault-server.key\n
 3135* k describe secrets -n vault common-tlssecret
 3136* clear
 3137* k9s
 3138* k9s -n default
 3139  clear
 3140* cd ..
 3141* touch Vault-Cert
 3142* mkdir Vault-Cert
 3143* cd Vault-Cert
 3144* rm -rf Vault-Cert
 3145* mkdir Vault-Cert
 3146* cd Vault-Cert
 3147* SERVICE=vault-server-tls\n\nNAMESPACE=vault\n\nSECRET_NAME=vault-server-tls\n\nTMPDIR=/tmp
 3148* ls
 3149* openssl genrsa -out ${TMPDIR}/vault.key 2048
 3150* ls
 3151* cat <<EOF >${TMPDIR}/csr.conf\n[req]\nreq_extensions = v3_req\ndistinguished_name = req_distinguished_name\n[req_distinguished_name]\n[ v3_req ]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = ${SERVICE}\nDNS.2 = ${SERVICE}.${NAMESPACE}\nDNS.3 = ${SERVICE}.${NAMESPACE}.svc\nDNS.4 = ${SERVICE}.${NAMESPACE}.svc.cluster.local\nDNS.5 = vault-0.vault-internal\nDNS.6 = vault-1.vault-internal\nDNS.7 = vault-2.vault-internal\nDNS.8 = vault-0.vault-internal.svc\nDNS.9 = vault-1.vault-internal.svc\nDNS.10 = vault-2.vault-internal.svc\nDNS.11 = vault-0.vault-internal.svc.cluster.local\nDNS.12 = vault-1.vault-internal.svc.cluster.local\nDNS.13 = vault-2.vault-internal.svc.cluster.local\nDNS.14 = vault-0\nDNS.15 = vault-1\nDNS.16 = vault-2\nDNS.17 = vault-agent-injector-svc\nDNS.18 = vault-agent-injector-svc.${NAMESPACE}\nDNS.19 = vault-agent-injector-svc.${NAMESPACE}.svc\nDNS.20 = vault-agent-injector-svc.${NAMESPACE}.svc.cluster.local\nIP.1 = 127.0.0.1\nEOF
 3152* ls
 3153* clear
 3154* openssl req -new -key ${TMPDIR}/vault.key -subj "/CN=${SERVICE}.${NAMESPACE}.svc" -out ${TMPDIR}/server.csr -config ${TMPDIR}/csr.conf
 3155* export CSR_NAME=vault-csr\ncat <<EOF >${TMPDIR}/csr.yaml\napiVersion: certificates.k8s.io/v1beta1\nkind: CertificateSigningRequest\nmetadata:\n  name: ${CSR_NAME}\nspec:\n  groups:\n  - system:authenticated\n  request: $(cat ${TMPDIR}/server.csr | base64 | tr -d '\n')\n  usages:\n  - digital signature\n  - key encipherment\n  - server auth\nEOF
 3156* kubectl create -f ${TMPDIR}/csr.yaml
 3157* export CSR_NAME=vault-csr\ncat <<EOF >${TMPDIR}/csr.yaml\napiVersion: certificates.k8s.io/v1\nkind: CertificateSigningRequest\nmetadata:\n  name: ${CSR_NAME}\nspec:\n  groups:\n  - system:authenticated\n  request: $(cat ${TMPDIR}/server.csr | base64 | tr -d '\n')\n  signerName: kubernetes.io/kubelet-serving\n  usages:\n  - digital signature\n  - key encipherment\n  - server auth\nEOF
 3158* kubectl create -f ${TMPDIR}/csr.yaml
 3159* kubectl certificate approve ${CSR_NAME}\n
 3160* echo "${serverCert}" | openssl base64 -d -A -out ${TMPDIR}/vault.crt
 3161* kubectl get namespace ${NAMESPACE} || kubectl create namespace ${NAMESPACE}
 3162* kubectl create secret generic ${SECRET_NAME} \\n        --namespace ${NAMESPACE} \\n        --from-file=vault.key=${TMPDIR}/vault.key \\n        --from-file=vault.crt=${TMPDIR}/vault.crt \\n        --from-file=vault.ca=${TMPDIR}/vault.ca
 3163  ls
 3164  cat cacert.crt
 3165* echo "-----BEGIN CERTIFICATE-----\nMIIDOzCCAiOgAwIBAgIUH1FeRUknJ+75ro8V2iL+tpomeIcwDQYJKoZIhvcNAQEL\nBQAwLTELMAkGA1UEAxMCQ0ExDTALBgNVBAsTBFRLR0kxDzANBgNVBAoTBlZNd2Fy\nZTAeFw0yMzA2MzAwNjI5MTVaFw0yNzA2MzAwNjI5MTVaMC0xCzAJBgNVBAMTAkNB\nMQ0wCwYDVQQLEwRUS0dJMQ8wDQYDVQQKEwZWTXdhcmUwggEiMA0GCSqGSIb3DQEB\nAQUAA4IBDwAwggEKAoIBAQDE+CAXQgf1LfoBq1Lv4hvfU0zBcmzo/WZ57/lVmIDl\niBftbpQghi2QQtdF6acaLK0FlXJFtB1OWG6GUxomPXZFOgXbYnrxYfe/77immxny\nbgc9AUu4fwAgByqN7w0aNiwBUVdpL+oSotlnUcmErnReuPQupaim1uwUiSi8gAJQ\nuyTDBJ0qmRFVqlvD1nlrpOJ92l0O8d8mfkhxzrFGgY8ixiSege37zxIkMvuptzUS\nxVUtUApQkan9XkAvS1Vj3NsGi/ubUiokwFD900A5WxnM9WCfzONMvf3Xs60zKIHe\nFj9OcrI7MFTkVhWCB6EV4vv95dtZANq5TJFuYpHms3WBAgMBAAGjUzBRMB0GA1Ud\nDgQWBBS9GoPsLFO9vgGnoT+SscNTHt4+qTAfBgNVHSMEGDAWgBS9GoPsLFO9vgGn\noT+SscNTHt4+qTAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAU\nTDsAe6UbiPyVtjFlo2nenXiqCjFz1fC+TIwGVOS+zACV/oALpIMzW9Fi7oUvhfGS\n1a6hEBxqjx7cBulKvyVHIZHjR5E2a7fFf8RP507ASFnbRITkTfiJ4LBRTOJ4ZA/l\nwDriUmq/neHXQIkaZ1gKUbYyx2Yct0bCcxd/exO2b2YHHl/e9qefckx2MtJYBreO\nFv3QacxyCu4x2gQKIA/qC6zLLPwAmsTlHKkZkmR+IngHifg7DICI/IX7z3V40GS9\n5+vBuEZLoruy/3FwmHS2eU0t0bQhfnttDP6Jd8NEGenyrEdr0vR0g/0sJFXbmkPY\n2KahFkBUj9idthug8D6F\n-----END CERTIFICATE-----" > ${TMPDIR}/vault.ca
 3166* kubectl create secret generic ${SECRET_NAME} \\n    --namespace ${NAMESPACE} \\n    --from-file=vault.key=${TMPDIR}/vault.key \\n    --from-file=vault.crt=${TMPDIR}/vault.crt \\n    --from-file=vault.ca=${TMPDIR}/vault.ca\n
 3167* clear
 3168* cd ..
 3169* k describe -n vault secret vault-server-tls
 3170* k get secrets -n vault vault-server-tls
 3171* k get secrets -n vault vault-server-tls -o yaml
 3172* cd Vault-Cert
 3173* clear
 3174* export CSR_NAME=vault-csr\nserverCert=$(kubectl get csr ${CSR_NAME} -o jsonpath='{.status.certificate}')\n
 3175* echo "${serverCert}"\n
 3176* kubectl get csr ${CSR_NAME}\n
 3177* kubectl describe csr ${CSR_NAME}\n
 3178* kubectl logs -n kube-system -l component=kube-controller-manager\n
 3179* clear
 3180* k get po -A
 3181* k logs coredns-59c9dfcff4-9njzv -n kube-system
 3182* clear
 3183* kubectl delete csr ${CSR_NAME}\n
 3184* cat <<EOF >${TMPDIR}/csr.yaml\napiVersion: certificates.k8s.io/v1\nkind: CertificateSigningRequest\nmetadata:\n  name: ${CSR_NAME}\nspec:\n  groups:\n  - system:authenticated\n  request: $(cat ${TMPDIR}/server.csr | base64 | tr -d '\n')\n  signerName: kubernetes.io/kubelet-serving\n  usages:\n  - digital signature\n  - key encipherment\n  - server auth\nEOF\n
 3185* kubectl create -f ${TMPDIR}/csr.yaml\n
 3186* kubectl certificate approve ${CSR_NAME}
 3187* kubectl get csr ${CSR_NAME} -o jsonpath='{.status.certificate}'\n
 3188* kubectl logs -n kube-system -l component=kube-controller-manager\n
 3189* openssl genrsa -out ${TMPDIR}/vault.key 2048\n
 3190* cat <<EOF >${TMPDIR}/csr-simple.conf\n[req]\nreq_extensions = v3_req\ndistinguished_name = req_distinguished_name\n[req_distinguished_name]\n[ v3_req ]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = ${SERVICE}\nDNS.2 = ${SERVICE}.${NAMESPACE}\nDNS.3 = ${SERVICE}.${NAMESPACE}.svc\nDNS.4 = ${SERVICE}.${NAMESPACE}.svc.cluster.local\nEOF\n
 3191* openssl req -new -key ${TMPDIR}/vault.key -subj "/CN=${SERVICE}.${NAMESPACE}.svc" -out ${TMPDIR}/server.csr -config ${TMPDIR}/csr-simple.conf\n
 3192* cat <<EOF >${TMPDIR}/csr.yaml\napiVersion: certificates.k8s.io/v1\nkind: CertificateSigningRequest\nmetadata:\n  name: ${CSR_NAME}\nspec:\n  groups:\n  - system:authenticated\n  request: $(cat ${TMPDIR}/server.csr | base64 | tr -d '\n')\n  signerName: kubernetes.io/kubelet-serving\n  usages:\n  - digital signature\n  - key encipherment\n  - server auth\nEOF\n
 3193* kubectl create -f ${TMPDIR}/csr.yaml\n
 3194* kubectl delete csr ${CSR_NAME}\n
 3195* openssl genrsa -out ${TMPDIR}/vault.key 2048\n
 3196* cat <<EOF >${TMPDIR}/csr-simple.conf\n[req]\nreq_extensions = v3_req\ndistinguished_name = req_distinguished_name\n[req_distinguished_name]\n[ v3_req ]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = ${SERVICE}\nDNS.2 = ${SERVICE}.${NAMESPACE}\nDNS.3 = ${SERVICE}.${NAMESPACE}.svc\nDNS.4 = ${SERVICE}.${NAMESPACE}.svc.cluster.local\nEOF\n
 3197* openssl req -new -key ${TMPDIR}/vault.key -subj "/CN=${SERVICE}.${NAMESPACE}.svc" -out ${TMPDIR}/server.csr -config ${TMPDIR}/csr-simple.conf\n
 3198* cat <<EOF >${TMPDIR}/csr.yaml\napiVersion: certificates.k8s.io/v1\nkind: CertificateSigningRequest\nmetadata:\n  name: ${CSR_NAME}\nspec:\n  groups:\n  - system:authenticated\n  request: $(cat ${TMPDIR}/server.csr | base64 | tr -d '\n')\n  signerName: kubernetes.io/kubelet-serving\n  usages:\n  - digital signature\n  - key encipherment\n  - server auth\nEOF\n
 3199* kubectl create -f ${TMPDIR}/csr.yaml\n
 3200* kubectl certificate approve ${CSR_NAME}\n
 3201* kubectl get csr ${CSR_NAME} -o jsonpath='{.status.certificate}'\n
 3202* serverCert=$(kubectl get csr ${CSR_NAME} -o jsonpath='{.status.certificate}')\necho "${serverCert}" | openssl base64 -d -A -out ${TMPDIR}/vault.crt\n
 3203* clear
 3204* kubectl get pods --all-namespaces -l component=kube-controller-manager\nkubectl get pods --all-namespaces -l component=kube-apiserver\n
 3205* clear
 3206* sudo vi mtnrw-override-values.yml
 3207* helm upgrade --install vault hashicorp/vault -f mtnrw-override-values.yml -n vault\n
 3208* kubectl rollout restart statefulset vault -n vault\n
 3209* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 3210* k9s -n vault
 3211* cd ..
 3212* kubectl get all -n kube-system\n
 3213* clear
 3214* kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.yaml\n
 3215* kubectl get pods --namespace cert-manager\n
 3216* k logs -n cert-manager cert-manager-5bb9dd7d5d-qbjhj
 3217* clear
 3218* kubectl get deployment cert-manager -n cert-manager -o yaml\n
 3219* clear
 3220* docker pull quay.io/jetstack/cert-manager-controller:v1.7.1\n
 3221* curl -I https://quay.io\n
 3222* kubectl get secrets -n cert-manager\n
 3223* kubectl delete -f https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.yaml\nkubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.yaml\n
 3224* kubectl get deployment cert-manager -n cert-manager -o yaml\n
 3225* kubectl get pods --namespace cert-manager\n
 3226* clear
 3227* kubectl get deployment cert-manager-webhook -n cert-manager -o yaml\n
 3228* k9s -n cert-manager
 3229* clear
 3230* kubectl delete csr ${CSR_NAME}\n
 3231* cat <<EOF | kubectl apply -f -\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: vault-selfsigned-issuer\n  namespace: ${NAMESPACE}\nspec:\n  selfSigned: {}\nEOF\n
 3232* cat <<EOF | kubectl apply -f -\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: vault-certificate\n  namespace: ${NAMESPACE}\nspec:\n  secretName: ${SECRET_NAME}\n  duration: 24h\n  renewBefore: 12h\n  commonName: "${SERVICE}.${NAMESPACE}.svc"\n  dnsNames:\n  - "${SERVICE}"\n  - "${SERVICE}.${NAMESPACE}"\n  - "${SERVICE}.${NAMESPACE}.svc"\n  - "${SERVICE}.${NAMESPACE}.svc.cluster.local"\n  - "vault-0.vault-internal"\n  - "vault-1.vault-internal"\n  - "vault-2.vault-internal"\n  - "vault-agent-injector-svc"\n  - "vault-agent-injector-svc.${NAMESPACE}"\n  - "vault-agent-injector-svc.${NAMESPACE}.svc"\n  - "vault-agent-injector-svc.${NAMESPACE}.svc.cluster.local"\n  ipAddresses:\n  - "127.0.0.1"\n  issuerRef:\n    name: vault-selfsigned-issuer\n    kind: Issuer\nEOF\n
 3233* kubectl get secret ${SECRET_NAME} -n ${NAMESPACE} -o yaml\n
 3234* clear
 3235* k describe secrets -n vault vault-server-tls
 3236* kubectl edit secret vault-server-tls -n vault\n
 3237* k describe secrets -n vault vault-server-tls
 3238* sudo vi mtnrw-override-values.yml
 3239* sudo vi vault.hcl
 3240* sudo vi mtnrw-override-values.yml
 3241* k9s -n vault
 3242* sudo vi vault.hcl
 3243* kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 3244* helm install vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 3245* helm uninstall vault -n vault
 3246* helm install vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 3247* kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 3248* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 3249* clear
 3250* cd Vault-Cert
 3251* kubectl get secret vault-server-tls -n vault -o jsonpath='{.data.cacert\.crt}' | base64 --decode > vault-cacert.crt\nkubectl get secret vault-server-tls -n vault -o jsonpath='{.data.tls\.crt}' | base64 --decode > vault-server.crt\nkubectl get secret vault-server-tls -n vault -o jsonpath='{.data.tls\.key}' | base64 --decode > vault-server.key\n
 3252* k describe secrets -n vault vault-server-tls
 3253  cd Vault-Cert
 3254  pwd
 3255* openssl x509 -in /Users/memoor/Vochub/ikay/Vault-Cert/tls.crt -text -noout\n
 3256  ls
 3257* openssl x509 -in /Users/memoor/VOChub/ikay/Vault-Cert/vault-server.crt -text -noout\n
 3258* openssl rsa -inn /Users/memoor/VOChub/ikay/Vault-Cert/vault-server.crt -text -noout\n
 3259* openssl rsa -in /Users/memoor/VOChub/ikay/Vault-Cert/vault-server.crt -text -noout\n
 3260* openssl rsa -in /Users/memoor/VOChub/ikay/Vault-Cert/vault-server.key -check\n
 3261* openssl x509 -noout -modulus -in /Users/memoor/VOChub/ikay/Vault-Cert/vault-server.crt | openssl md5\nopenssl rsa -noout -modulus -in /Users/memoor/VOChub/ikay/Vault-Cert/vault-server.key | openssl md5\n
 3262* openssl x509 -in /Users/memoor/VOChub/ikay/Vault-Cert/vault-ca.crt -text -noout\n
 3263* sudo vi vault.hcl
 3264* sudo vi mtnrw-override-values.yml
 3265* k get svc -n vault
 3266* sudo vi vault.hcl
 3267* sudo vi mtnrw-override-values.yml
 3268* helm upgrade vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 3269* sudo vi mtnrw-override-values.yml
 3270* helm upgrade vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 3271* helm uninstall vault -n vault
 3272* helm install vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 3273* kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 3274* k get sts -n vault
 3275* k9s -n vault
 3276* kubectl rollout restart statefulset vault -n vault\n
 3277* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 3278* clear
 3279* kubectl get svc vault-internal -n vault -o yaml\n
 3280* clear
 3281* kubectl run -i --tty dns-test -n vault  --image=busybox --restart=Never -- sh\n
 3282* kubectl patch svc vault -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'\n
 3283* kubectl patch svc vault-internal -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'\n
 3284* kubectl patch svc vault-active -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'\n
 3285* kubectl patch svc vault-standby -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'\n
 3286* clear
 3287* kubectl get svc vault -n vault -o yaml\nkubectl get svc vault-internal -n vault -o yaml\nkubectl get svc vault-active -n vault -o yaml\nkubectl get svc vault-standby -n vault -o yaml\n
 3288* kubectl rollout restart deployment vault -n vault\n
 3289* k get deployments.apps -n vault
 3290* kubectl rollout restart statefulset vault -n vault\n
 3291* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 3292* clear
 3293* vault operator unseal
 3294* k9s -n vault
 3295* sudo vi mtnrw-override-values.yml
 3296* helm upgrade vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 3297* helm status vault -n vault\n
 3298* helm history vault -n vault\n
 3299* helm uninstall vault -n vault\n
 3300* kubectl get all -n vault\n
 3301* helm upgrade --install vault hashicorp/vault -f values.yaml -n vault\n
 3302* helm history vault -n vault\n
 3303* helm upgrade --install vault hashicorp/vault -f mtnrw-override-values.yml -n vault\n
 3304* kubectl rollout restart statefulset vault -n vault\n
 3305* kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 3306* kubectl rollout restart statefulset vault -n vault\n
 3307* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 3308  clear
 3309  sudo vi raft-policy.hcl
 3310  vault policy write raft-policy raft-policy.hcl\n
 3311  export VAULT_ADDR='http://127.0.0.1:8200'\n
 3312  vault login
 3313* clear
 3314* kubectl port-forward -n vault svc/vault 8200:8200\n
 3315  vault login
 3316  vault policy write raft-policy raft-policy.hcl\n
 3317* k9s -n vault
 3318* kubectl logs -n vault vault-0\n
 3319* clear
 3320* kubectl get pods -n vault\nkubectl describe pod vault-1 -n vault\nkubectl logs vault-1 -n vault\n
 3321* clear
 3322* kubectl get pods -n vault
 3323* kubectl describe pod vault-1 -n vault
 3324* k9s -n vault
 3325* clear
 3326* cd ..
 3327* kubectl describe pod -n vault vault-0 | grep -A 20 "Environment:"\n
 3328* kubectl exec -n vault vault-0 -- vault status -tls-skip-verify\n
 3329* clear
 3330* kubectl logs -n vault vault-2\n
 3331* kubectl exec -n vault vault-1 -- curl -k https://vault-0.vault-internal.vault.svc.cluster.local:8200/v1/sys/health
 3332* clear
 3333* sudo vi mtnrw-override-values.yml
 3334* helm upgrade --install vault hashicorp/vault -f mtnrw-override-values.yml -n vault\n
 3335* kubectl rollout restart statefulset vault -n vault\n
 3336* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 3337* clear
 3338* k9s -n vault
 3339* sudo iptables -A INPUT -p tcp --dport 8200 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 8201 -j ACCEPT\nsudo iptables -A OUTPUT -p tcp --dport 8200 -j ACCEPT\nsudo iptables -A OUTPUT -p tcp --dport 8201 -j ACCEPT\n
 3340* kubectl get networkpolicies -n vault\n
 3341* sudo vi allow-vault-ports.yaml
 3342* kubectl apply -f allow-vault-ports.yaml\n
 3343* clear
 3344* kubectl exec -n vault vault-0 -- vault operator raft list-peers -tls-skip-verify\n
 3345* k9s -n vault
 3346* clear
 3347* kubectl get pods -n kube-system -l k8s-app=kube-dns\n
 3348* kubectl -n kube-system get configmap coredns -o yaml\n
 3349* kubectl get svc -n kube-system\n
 3350* kubectl run -i --tty dnsutils --image=busybox --restart=Never -- sh\n\n
 3351* clear
 3352* kubectl get networkpolicies --all-namespaces\n
 3353* sudo vi mtnrw-override-values.yml
 3354* helm upgrade --install vault hashicorp/vault -f mtnrw-override-values.yml -n vault\n
 3355* kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 3356* kubectl rollout restart statefulset vault -n vault\n
 3357* kubectl delete pod -l app.kubernetes.io/name=vault -n vault\n
 3358* kubectl scale deployment coredns --replicas=4 -n kube-system\n
 3359* kubectl port-forward -n vault svc/vault 8200:8200\n
 3360* kubectl exec -it vault-0 -n vault -- rm -rf /vault/data/*\nkubectl exec -it vault-1 -n vault -- rm -rf /vault/data/*\nkubectl exec -it vault-2 -n vault -- rm -rf /vault/data/*\nkubectl exec -it vault-3 -n vault -- rm -rf /vault/data/*\nkubectl exec -it vault-4 -n vault -- rm -rf /vault/data/*\n
 3361* kubectl exec -it vault-0 -n vault -- rm -rf /vault/data/raft/*\nkubectl exec -it vault-1 -n vault -- rm -rf /vault/data/raft/*\nkubectl exec -it vault-2 -n vault -- rm -rf /vault/data/raft/*\nkubectl exec -it vault-3 -n vault -- rm -rf /vault/data/raft/*\nkubectl exec -it vault-4 -n vault -- rm -rf /vault/data/raft/*\n
 3362* kubectl delete pod vault-0 -n vault\nkubectl delete pod vault-1 -n vault\nkubectl delete pod vault-2 -n vault\nkubectl delete pod vault-3 -n vault\nkubectl delete pod vault-4 -n vault\n
 3363* kubectl exec -it dnsutils --namespace=default -- /bin/sh\n\n
 3364* kubectl exec -it netshoot --namespace=default -- /bin/sh\n\n
 3365* clear
 3366* kubectl get svc -n vault\n
 3367* kubectl get endpoints -n vault\n
 3368* kubectl run -i --tty busybox --image=busybox --restart=Never -n vault -- sh\n
 3369* clear
 3370* kubectl get networkpolicies -n vault\n
 3371* kubectl describe networkpolicy allow-vault-ports  -n vault\n
 3372* kubectl get pods -n kube-system -l k8s-app=calico-node\nkubectl logs -n kube-system -l k8s-app=calico-node\n
 3373* clear
 3374* kubectl get pods -n vault --show-labels\n
 3375* cd ..
 3376* sudo vi allow-vault-ports.yaml
 3377* sudo vi allow-all-network-policy.yaml
 3378* kubectl apply -f allow-all-network-policy.yaml\n
 3379* kubectl delete networkpolicy allow-vault-ports -n vault\nkubectl delete networkpolicy allow-all -n vault\n
 3380* sudo vi vault-network-policy.yaml
 3381* kubectl apply -f vault-network-policy.yaml\n
 3382* kubectl apply -f allow-all-network-policy.yaml\n
 3383* sudo vi vault-network-policy.yaml
 3384* kubectl replace -f vault-network-policy.yaml\n
 3385* kubectl delete networkpolicy allow-vault-ports -n vault\nkubectl delete networkpolicy allow-all -n vault\n
 3386* sudo vi vault-network-policy.yaml
 3387* kubectl replace -f vault-network-policy.yaml\n
 3388* kubectl get networkpolicies -n vault\n
 3389* kubectl describe networkpolicy vault-network-policy -n vault\n
 3390* sudo vi vault-network-policy.yaml
 3391* sudo vi allow-all-network-policy.yaml
 3392* kubectl apply -f allow-all-network-policy.yaml\n
 3393* clear
 3394* sudo vi mtnrw-override-values.yml
 3395* helm upgrade --install vault hashicorp/vault -f vault-values.yaml -n vault\n
 3396* sudo vi mtnrw-override-values.yml
 3397* helm upgrade --install vault hashicorp/vault -f vault-values.yaml -n vault\n
 3398* sudo vi mtnrw-override-values.yml
 3399* helm upgrade --install vault hashicorp/vault -f vault-values.yaml -n vault\n
 3400* sudo vi mtnrw-override-values.yml
 3401* helm upgrade --install vault hashicorp/vault -f vault-values.yaml -n vault\n
 3402* sudo vi mtnrw-override-values.yml
 3403* helm status -n vault
 3404* helm status vault -n vault
 3405* helm history
 3406* helm history vault -n vault
 3407* helm lint  hashicorp/vault -f mtnrw-override-values.yml -n vault\n
 3408* helm lint vault hashicorp/vault -f mtnrw-override-values.yml\n
 3409* helm lint hashicorp/vault -f mtnrw-override-values.yml\n
 3410* clear
 3411* sudo vi mtnrw-override-values.yml
 3412* kubectl get pods -n vault\n
 3413* clear
 3414* sudo vi mtnrw-override-values.yml
 3415* sudo vi vault.hcl
 3416* clear
 3417* clear\n
 3418* k9s -n vault
 3419* clear
 3420* kubectl get svc vault-internal -n vault\n
 3421  clear
 3422  cd ..
 3423  cat vault.hcl
 3424  sudo vi vault.hcl
 3425  kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 3426  kubectl rollout restart statefulset vault -n vault\n
 3427  kubectl delete pod vault-0 -n vault\nkubectl delete pod vault-1 -n vault\nkubectl delete pod vault-2 -n vault\nkubectl delete pod vault-3 -n vault\nkubectl delete pod vault-4 -n vault\n
 3428* clear
 3429* kubectl logs vault-0 -n vault\nkubectl logs vault-1 -n vault\nkubectl logs vault-2 -n vault\nkubectl logs vault-3 -n vault\nkubectl logs vault-4 -n vault\n
 3430* clear
 3431* kubectl logs vault-0 -n vault --follow
 3432* clear
 3433* k9s
 3434* clear
 3435* k9s
 3436* clear
 3437* k9s
 3438* k9s 
 3439* clear
 3440* sudo vi vault.hcl
 3441* clear
 3442* kubectl delete pod vault-0 vault-1 vault-2 vault-3 vault-4 -n vault\n
 3443* kubectl exec -it vault-0 -n vault -- rm -rf /vault/data/*\nkubectl exec -it vault-1 -n vault -- rm -rf /vault/data/*\nkubectl exec -it vault-2 -n vault -- rm -rf /vault/data/*\nkubectl exec -it vault-3 -n vault -- rm -rf /vault/data/*\nkubectl exec -it vault-4 -n vault -- rm -rf /vault/data/*\n
 3444* kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 3445* kubectl delete pod vault-0 vault-1 vault-2 vault-3 vault-4 -n vault\n
 3446  helm uninstall vault -n vault
 3447  clear
 3448  sudo vi mtnrw-override-values.yml
 3449  helm install vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 3450  kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 3451  kubectl patch svc vault -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'\nkubectl patch svc vault-internal -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'\nkubectl patch svc vault-active -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'\nkubectl patch svc vault-standby -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'
 3452  kubectl rollout restart statefulset vault -n vault
 3453  kubectl get svc vault -n vault -o yaml | grep -A 3 annotations\nkubectl get svc vault-internal -n vault -o yaml | grep -A 3 annotations\nkubectl get svc vault-active -n vault -o yaml | grep -A 3 annotations\nkubectl get svc vault-standby -n vault -o yaml | grep -A 3 annotations
 3454* k9s
 3455* clear
 3456* kubectl exec -it vault-0 -n vault -- ls -la /vault/userconfig/vault-server-tls\nkubectl exec -it vault-1 -n vault -- ls -la /vault/userconfig/vault-server-tls\nkubectl exec -it vault-2 -n vault -- ls -la /vault/userconfig/vault-server-tls\nkubectl exec -it vault-3 -n vault -- ls -la /vault/userconfig/vault-server-tls\nkubectl exec -it vault-4 -n vault -- ls -la /vault/userconfig/vault-server-tls\n
 3457* kubectl exec -it vault-0 -n vault -- openssl x509 -in /vault/userconfig/vault-server-tls/tls.crt -text -noout\nkubectl exec -it vault-1 -n vault -- openssl x509 -in /vault/userconfig/vault-server-tls/tls.crt -text -noout\nkubectl exec -it vault-2 -n vault -- openssl x509 -in /vault/userconfig/vault-server-tls/tls.crt -text -noout\nkubectl exec -it vault-3 -n vault -- openssl x509 -in /vault/userconfig/vault-server-tls/tls.crt -text -noout\nkubectl exec -it vault-4 -n vault -- openssl x509 -in /vault/userconfig/vault-server-tls/tls.crt -text -noout\n
 3458* clear
 3459* cd Vault-Cert
 3460* ls
 3461* \nopenssl x509 -in /vault-server.crt -text -noout\n
 3462* pwd
 3463* \nopenssl x509 -in /Users/memoor/Vochub/ikay/Vault-Cert /vault-server.crt -text -noout\n
 3464* \nopenssl x509 -in /Users/memoor/Vochub/ikay/Vault-Cert/vault-server.crt -text -noout\n
 3465* clear
 3466* kubectl get certificates -n vault\n
 3467* kubectl edit certificate vault-server-tls -n vault\n
 3468* kubectl edit certificate vault-certificate -n vault\n
 3469* kubectl describe certificate vault-certificate -n vault\n
 3470* kubectl delete pod vault-0 vault-1 vault-2 vault-3 vault-4 -n vault\n
 3471* k9s
 3472* clear
 3473* kubectl logs vault-1 -n vault --follow
 3474* clear
 3475* kubectl edit certificate vault-certificate -n vault\n
 3476* kubectl delete pod vault-0 vault-1 vault-2 vault-3 vault-4 -n vault\n
 3477* clear
 3478* kubectl logs vault-0 -n vault --follow\nkubectl logs vault-1 -n vault --follow\nkubectl logs vault-2 -n vault --follow\nkubectl logs vault-3 -n vault --follow\nkubectl logs vault-4 -n vault --follow\n
 3479* clear
 3480* kubectl describe certificate vault-certificate -n vault\n
 3481* clear
 3482* sudo vi vault.hcl
 3483* k9s
 3484* kubectl rollout restart statefulset vault -n vault\n
 3485* kubectl scale statefulset vault -n vault --replicas=1\n
 3486* kubectl scale statefulset vault -n vault --replicas=5\n
 3487* cat vi vault.hcl
 3488* clear
 3489* kubectl port-forward -n vault svc/vault 8200:8200
 3490* for i in {0..4}; do kubectl exec -n vault -it vault-$i -- rm -rf /vault/data/*; done\n
 3491* for i in {0..4}; do kubectl exec -n vault -it vault-$i -- rm -rf "/vault/data/*"; done\n
 3492* for i in {1..4}; do kubectl exec -n vault -it vault-$i -- vault operator raft join https://vault-0.vault-internal.vault.svc.cluster.local:8200\; done\n\n
 3493* for i in {1..4}; do kubectl exec -n vault -it vault-$i -- "vault operator raft join https://vault-0.vault-internal.vault.svc.cluster.local:8200"; done\n
 3494* clear
 3495* for i in {1..4}; do\n  kubectl exec -n vault -it vault-$i -- vault operator raft join https://vault-0.vault-internal.vault.svc.cluster.local:8200\ndone\n
 3496  kubectl exec -n vault -it vault-0 -- vault operator raft list-peers\n
 3497  kubectl exec -n vault -it vault-1 -- vault operator raft list-peers\n
 3498* clear
 3499* for i in {0..4}; do\n  kubectl exec -n vault -it vault-$i -- vault operator raft list-peers\ndone\n
 3500* for i in {1..4}; do\n  kubectl scale statefulset vault --replicas=1 -n vault\ndone\n
 3501* kubectl get pods -n vault\n
 3502* kubectl exec -n vault -it vault-0 -- vault operator raft list-peers\n
 3503* kubectl scale statefulset vault --replicas=2 -n vault\nsleep 60\n\nkubectl exec -n vault -it vault-1 -- vault operator raft join https://vault-0.vault-internal.vault.svc.cluster.local:8200\nkubectl exec -n vault -it vault-0 -- vault operator raft list-peers\n
 3504* kubectl scale statefulset vault --replicas=3 -n vault\nsleep 60\n\nkubectl exec -n vault -it vault-2 -- vault operator raft join https://vault-0.vault-internal.vault.svc.cluster.local:8200\nkubectl exec -n vault -it vault-0 -- vault operator raft list-peers\n
 3505* kubectl scale statefulset vault --replicas=4 -n vault\nsleep 60\n\nkubectl exec -n vault -it vault-3 -- vault operator raft join https://vault-0.vault-internal.vault.svc.cluster.local:8200\nkubectl exec -n vault -it vault-0 -- vault operator raft list-peers\n
 3506* kubectl scale statefulset vault --replicas=5 -n vault\nsleep 60\n\nkubectl exec -n vault -it vault-4 -- vault operator raft join https://vault-0.vault-internal.vault.svc.cluster.local:8200\nkubectl exec -n vault -it vault-0 -- vault operator raft list-peers\n
 3507* for i in {0..4}; do\n  kubectl exec -n vault -it vault-$i -- vault operator raft list-peers\ndone\n
 3508* for i in {1..4}; do\n  echo "Unsealing vault-$i"\n  kubectl exec -n vault -it vault-$i -- vault operator unseal mSHX5P6n6iiJmPU7rQSpZFiIO6n1N/BmCi9NlZAj7SHs\n  kubectl exec -n vault -it vault-$i -- vault operator unseal FVYl33KF/QsEl242ord8TOXoag5kxjoaGkrkCB3LOrZY\n  kubectl exec -n vault -it vault-$i -- vault operator unseal QH81fJoyeAIROP5it+fO8vdEJGJDRLuSpVUDskm6EaKo\ndone
 3509* clear
 3510* for i in {0..4}; do kubectl exec -n vault -it vault-$i -- rm -rf "/vault/data/*"; done\n
 3511* kubectl scale statefulset vault --replicas=1 -n vault\n
 3512* kubectl exec -n vault -it vault-0 -- vault operator init\n
 3513* kubectl exec -n vault -it vault-0 -- rm -rf /vault/data/*\n
 3514* clear
 3515* kubectl exec -n vault -it vault-0 -- vault operator init\n
 3516* kubectl exec -n vault -it vault-0 -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\nkubectl exec -n vault -it vault-0 -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\nkubectl exec -n vault -it vault-0 -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p
 3517* kubectl exec -n vault -it vault-0 -- vault login hvs.NLJRIhXvZWgmXI1pCi2QvTcd\n
 3518* kubectl scale statefulset vault --replicas=5 -n vault\n
 3519  clear
 3520  for i in {1..4}; do\n  kubectl exec -n vault -it vault-$i -- vault operator raft join https://vault-0.vault-internal.vault.svc.cluster.local:8200\ndone\n
 3521  for i in {1..4}; do\n  echo "Unsealing vault-$i"\n  kubectl exec -n vault -it vault-$i -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\n  kubectl exec -n vault -it vault-$i -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\n  kubectl exec -n vault -it vault-$i -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p\ndone
 3522  clear
 3523  kubectl exec -n vault -it vault-1 -- rm -rf /vault/data/*\n
 3524* clear
 3525* for i in {1..4}; do\n  echo "Cleaning up vault-$i"\n  kubectl exec -n vault -it vault-$i -- sh -c '\n    lsof | grep "/vault/data/raft/.nfs" | awk "{print \$2}" | xargs kill -9\n    rm -rf /vault/data/raft\n  '\ndone\n
 3526* clear
 3527* for i in {1..4}; do\n  echo "Checking vault-$i for .nfs files"\n  kubectl exec -n vault -it vault-$i -- lsof | grep '/vault/data/raft/.nfs'\ndone\n
 3528* for i in {1..4}; do\n  echo "Cleaning up vault-$i"\n  kubectl exec -n vault -it vault-$i -- sh -c '\n    for pid in $(lsof | grep "/vault/data/raft/.nfs" | awk "{print \$2}"); do\n      kill -9 $pid\n    done\n    rm -rf /vault/data/raft\n  '\ndone\n
 3529* clear
 3530* for i in {1..4}; do\n  echo "Cleaning up vault-$i"\n  kubectl exec -n vault -it vault-$i -- sh -c '\n    pids=$(lsof | grep "/vault/data/raft/.nfs" | awk "{print \$2}" | grep -oE "[0-9]+")\n    for pid in $pids; do\n      echo "Killing PID $pid"\n      kill -9 $pid\n    done\n    rm -rf /vault/data/raft\n  '\ndone\n
 3531* clear
 3532* for i in {1..4}; do\n  echo "Checking vault-$i for .nfs files"\n  kubectl exec -n vault -it vault-$i -- lsof | grep '/vault/data/raft/.nfs'\ndone\n
 3533* kubectl scale statefulset vault --replicas=0 -n vault\n
 3534* for i in {1..4}; do\n  echo "Cleaning up vault-$i"\n  kubectl exec -n vault -it vault-$i -- sh -c 'rm -rf /vault/data/raft'\ndone\n
 3535* kubectl get pvc -n vault\n
 3536* clear
 3537* kubectl delete statefulset --namespace vault vault --cascade=orphan\n
 3538* helm uninstall vault -n vault
 3539* kubectl delete pod vault-0 vault-1 vault-2 vault-3 vault-4 -n vault\n
 3540* helm install vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 3541* kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 3542* kubectl patch svc vault -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'\nkubectl patch svc vault-internal -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'\nkubectl patch svc vault-active -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'\nkubectl patch svc vault-standby -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'
 3543* kubectl rollout restart statefulset vault -n vault
 3544* kubectl get svc vault -n vault -o yaml | grep -A 3 annotations\nkubectl get svc vault-internal -n vault -o yaml | grep -A 3 annotations\nkubectl get svc vault-active -n vault -o yaml | grep -A 3 annotations\nkubectl get svc vault-standby -n vault -o yaml | grep -A 3 annotations
 3545  kubectl scale statefulset vault --replicas=1 -n vault\n
 3546  kubectl exec -n vault -it vault-0 -- vault operator init\n
 3547  kubectl exec -n vault -it vault-0 -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\nkubectl exec -n vault -it vault-0 -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\nkubectl exec -n vault -it vault-0 -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p\n
 3548  vault login hvs.NLJRIhXvZWgmXI1pCi2QvTcd
 3549  vault login
 3550* kubectl port-forward -n vault svc/vault 8200:8200
 3551  clear
 3552  kubectl scale statefulset vault --replicas=2 -n vault\n
 3553  kubectl exec -n vault -it vault-1 -- vault operator init\n
 3554  for i in {1..4}; do\n  kubectl exec -n vault -it vault-$i -- sh -c '\n    umount /vault/data/raft/.nfs000000000004136f00000025 2>/dev/null || true\n    fuser -k /vault/data/raft/.nfs000000000004136f00000025 2>/dev/null || true\n    rm -rf /vault/data/* || true\n  '\ndone\n
 3555  kubectl scale statefulset vault --replicas=3 -n vault\n
 3556* kubectl scale statefulset vault --replicas=0 -n vault\n
 3557* for i in {2..4}; do\n  echo "Cleaning up vault-$i"\n  kubectl exec -n vault -it vault-$i -- sh -c '\n    pids=$(lsof | grep "/vault/data/raft/.nfs" | awk "{print \$2}" | grep -oE "[0-9]+")\n    for pid in $pids; do\n      echo "Killing PID $pid"\n      kill -9 $pid\n    done\n    rm -rf /vault/data/raft/*\n  '\ndone\n
 3558* kubectl scale statefulset vault --replicas=1 -n vault\n
 3559* kubectl scale statefulset vault --replicas=5 -n vault\n
 3560* kubectl exec -n vault -it vault-0 -- vault operator raft list-peers\n
 3561* clear
 3562* for i in {1..4}; do\n  echo "Unsealing vault-$i"\n  kubectl exec -n vault -it vault-$i -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\n  kubectl exec -n vault -it vault-$i -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\n  kubectl exec -n vault -it vault-$i -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p\ndone
 3563* clear
 3564* kubectl exec -it vault-2 -n vault -- rm -rf /vault/data/raft/*\n
 3565* kubectl exec -it vault-2 -n vault -- rm -rf "/vault/data/raft/*"\n
 3566* kubectl exec -it vault-2 -n vault -- sh -c 'rm -rf /vault/data/raft/*'\n
 3567* kubectl exec -it vault-4 -n vault -- sh -c 'rm -rf /vault/data/raft/*'\n
 3568* ssh -p 9052 ikay@10.150.55.103
 3569* kubectl scale statefulset vault --replicas=0 -n vault\n
 3570* kubectl delete statefulset vault -n vault\n
 3571* k get pv -n vault
 3572* k delete pv pv-data-vault-0
 3573* k get pv -n vault
 3574* kubectl patch pv pv-data-vault-0 -p '{"metadata":{"finalizers":null}}'\n
 3575* kubectl patch pv pv-data-vault-1 -p '{"metadata":{"finalizers":null}}'\n
 3576* kubectl patch pv pv-data-vault-2 -p '{"metadata":{"finalizers":null}}'\n
 3577* kubectl patch pv pv-data-vault-3 -p '{"metadata":{"finalizers":null}}'\n
 3578* kubectl patch pv pv-data-vault-4 -p '{"metadata":{"finalizers":null}}'\n
 3579* kubectl patch pvc  -p '{"metadata":{"finalizers":null}}' -n vault \n
 3580* k get pvc -n vault
 3581* kubectl patch pvc data-vault-0  -p '{"metadata":{"finalizers":null}}' -n vault \n
 3582* kubectl patch pvc data-vault-1  -p '{"metadata":{"finalizers":null}}' -n vault \n
 3583* kubectl patch pvc data-vault-2  -p '{"metadata":{"finalizers":null}}' -n vault \n
 3584* kubectl patch pvc data-vault-3  -p '{"metadata":{"finalizers":null}}' -n vault \n
 3585* kubectl patch pvc data-vault-4  -p '{"metadata":{"finalizers":null}}' -n vault \n
 3586* k delete pv pv-data-vault-0 
 3587* k delete pv pv-data-vault-1
 3588* k get pv -n vault
 3589* clear
 3590* kubectl patch pv pv-data-vault-1 -p '{"metadata":{"finalizers":null}}'\nkubectl patch pv pv-data-vault-2 -p '{"metadata":{"finalizers":null}}'\nkubectl patch pv pv-data-vault-3 -p '{"metadata":{"finalizers":null}}'\nkubectl patch pv pv-data-vault-4 -p '{"metadata":{"finalizers":null}}'\n
 3591* kubectl delete pv pv-data-vault-1\nkubectl delete pv pv-data-vault-2\nkubectl delete pv pv-data-vault-3\nkubectl delete pv pv-data-vault-4\n
 3592* clear
 3593* cd ..
 3594* k get pv
 3595* kubectl patch pv pv-data-vault-2 --type='merge' -p '{"metadata":{"finalizers":null}}'\nkubectl patch pv pv-data-vault-3 --type='merge' -p '{"metadata":{"finalizers":null}}'\nkubectl patch pv pv-data-vault-4 --type='merge' -p '{"metadata":{"finalizers":null}}'\n
 3596* kubectl delete pv pv-data-vault-2 --grace-period=0 --force\nkubectl delete pv pv-data-vault-3 --grace-period=0 --force\nkubectl delete pv pv-data-vault-4 --grace-period=0 --force\n
 3597* k get pv
 3598* clear
 3599* k get pvc -n vault
 3600* kubectl patch pv pv-audit-vault-2 --type='merge' -p '{"metadata":{"finalizers":null}}'\nkubectl patch pv pv-audit-vault-3 --type='merge' -p '{"metadata":{"finalizers":null}}'\nkubectl patch pv pv-audit-vault-4 --type='merge' -p '{"metadata":{"finalizers":null}}'\n
 3601* kubectl patch pv pv-audit-vault-0 --type='merge' -p '{"metadata":{"finalizers":null}}'\nkubectl patch pv pv-audit-vault-1 --type='merge' -p '{"metadata":{"finalizers":null}}'\nkubectl patch pv pv-audit-vault-4 --type='merge' -p '{"metadata":{"finalizers":null}}'\n
 3602* kubectl delete pv pv-audit-vault-2 --grace-period=0 --force\nkubectl delete pv pv-audit-vault-3 --grace-period=0 --force\nkubectl delete pv pv-audit-vault-4 --grace-period=0 --force\n
 3603* k get pv
 3604* k get sts -n vault
 3605* helm uninstall vault -n vault
 3606* kubectl delete pv pv-audit-vault-2 --grace-period=0 --force\nkubectl delete pv pv-audit-vault-3 --grace-period=0 --force\nkubectl delete pv pv-audit-vault-4 --grace-period=0 --force\n
 3607* k get pvc -n vault
 3608* k get pv -n vault
 3609* kubectl patch pvc audit-vault-3 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc data-vault-0 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc data-vault-2 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc data-vault-3 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc data-vault-4 -n vault -p '{"metadata":{"finalizers":null}}'\n
 3610* kubectl delete pvc audit-vault-3 -n vault\nkubectl delete pvc data-vault-0 -n vault\nkubectl delete pvc data-vault-2 -n vault\nkubectl delete pvc data-vault-3 -n vault\nkubectl delete pvc data-vault-4 -n vault\n
 3611* k get pv -n vault
 3612* k get pvc -n vault
 3613* kubectl patch pvc audit-vault-0 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc data-vault-1 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc audit-vault-2 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc audit-vault-3 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc audit-vault-4 -n vault -p '{"metadata":{"finalizers":null}}'\n
 3614* kubectl delete pvc audit-vault-0 -n vault\nkubectl delete pvc data-vault-1 -n vault\nkubectl delete pvc audit-vault-2 -n vault\nkubectl delete pvc audit-vault-3 -n vault\nkubectl delete pvc audit-vault-4 -n vault\n
 3615* k get pvc -n vault
 3616* kubectl patch pvc audit-vault-1 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc data-vault-1 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc audit-vault-2 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc audit-vault-3 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc audit-vault-4 -n vault -p '{"metadata":{"finalizers":null}}'\n
 3617* kubectl delete pvc audit-vault-1 -n vault\nkubectl delete pvc data-vault-1 -n vault\nkubectl delete pvc audit-vault-2 -n vault\nkubectl delete pvc audit-vault-3 -n vault\nkubectl delete pvc audit-vault-4 -n vault\n
 3618* k get pvc -n vault
 3619* k get pv -n vault
 3620* kubectl patch pv pv-audit-vault-0 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pv pv-audit-vault-1 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc audit-vault-2 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc audit-vault-3 -n vault -p '{"metadata":{"finalizers":null}}'\nkubectl patch pvc audit-vault-4 -n vault -p '{"metadata":{"finalizers":null}}'\n
 3621* kubectl delete pv pv-audit-vault-0 -n vault\nkubectl delete pv pv-audit-vault-0 -n vault\nkubectl delete pvc audit-vault-2 -n vault\nkubectl delete pvc audit-vault-3 -n vault\nkubectl delete pvc audit-vault-4 -n vault\n
 3622* kubectl delete pv pv-audit-vault-1 -n vault\nkubectl delete pv pv-audit-vault-0 -n vault\nkubectl delete pvc audit-vault-2 -n vault\nkubectl delete pvc audit-vault-3 -n vault\nkubectl delete pvc audit-vault-4 -n vault\n
 3623* clear
 3624* k get pv pvc -n vault
 3625* k get pv  -n vault
 3626* k get pvc  -n vault
 3627* clear
 3628* k apply -f pv-pvc-vault.yaml
 3629* clear
 3630* helm install vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 3631* kubectl create configmap vault-config --from-file=vault.hcl -n vault --dry-run=client -o yaml | kubectl apply -f -\n
 3632* kubectl patch svc vault -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'\nkubectl patch svc vault-internal -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'\nkubectl patch svc vault-active -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'\nkubectl patch svc vault-standby -n vault -p '{"metadata": {"annotations": {"vault.hashicorp.com/tls-server-name": "vault-server-tls"}}}'
 3633* kubectl rollout restart statefulset vault -n vault
 3634* kubectl port-forward -n vault svc/vault 8200:8200
 3635* clear
 3636* kubectl exec -n vault -it vault-0 -- vault operator init -key-shares=5 -key-threshold=3\n
 3637* for i in {0..4}; do\n  echo "Unsealing vault-$i"\n  kubectl exec -n vault -it vault-$i -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\n  kubectl exec -n vault -it vault-$i -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\n  kubectl exec -n vault -it vault-$i -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p\ndone
 3638* clear
 3639* kubectl exec -n vault -it vault-0 -- vault operator raft list-peers\n
 3640* kubectl exec -n vault -it vault-0 -- vault login\n
 3641* kubectl exec -n vault -it vault-0 -- vault operator raft list-peers\n
 3642* clear
 3643* for i in 2 4; do\n  echo "Unsealing vault-$i"\n  kubectl exec -n vault -it vault-$i -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\n  kubectl exec -n vault -it vault-$i -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\n  kubectl exec -n vault -it vault-$i -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p\ndone\n
 3644* for i in {0..4}; do\n  echo "Checking status of vault-$i"\n  kubectl exec -n vault -it vault-$i -- vault status\n  kubectl exec -n vault -it vault-$i -- vault operator raft list-peers\ndone\n
 3645* clear
 3646* kubectl edit certificate vault-certificate -n vault\n
 3647* for i in {0..4}; do\n  echo "Unsealing vault-$i"\n  kubectl exec -n vault -it vault-$i -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\n  kubectl exec -n vault -it vault-$i -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\n  kubectl exec -n vault -it vault-$i -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p\ndone\n
 3648* clear
 3649* kubectl exec -n vault -it vault-3 -- sh -c 'rm -rf /vault/data/*'\nkubectl exec -n vault -it vault-4 -- sh -c 'rm -rf /vault/data/*'\n
 3650* kubectl exec -n vault -it vault-0 -- cat /vault/userconfig/vault-server-tls/tls.crt | openssl x509 -text -noout\n
 3651* clear
 3652* kubectl exec -n vault -it vault-0 -- vault operator raft list-peers\n
 3653* for i in {3..4}; do\n  echo "Unsealing vault-$i"\n  kubectl exec -n vault -it vault-$i -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\n  kubectl exec -n vault -it vault-$i -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\n  kubectl exec -n vault -it vault-$i -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p\ndone\n
 3654* clear
 3655* kubectl edit certificate vault-certificate -n vault\n
 3656* kubectl rollout restart statefulset vault -n vault\n
 3657* for i in {0..4}; do\n  echo "Unsealing vault-$i"\n  kubectl exec -n vault -it vault-$i -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\n  kubectl exec -n vault -it vault-$i -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\n  kubectl exec -n vault -it vault-$i -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p\ndone\n
 3658* kubectl delete pod vault-0 vault-1 vault-2 vault-3 vault-4 -n vault\n
 3659* clear
 3660* for i in {0..4}; do\n  echo "Unsealing vault-$i"\n  kubectl exec -n vault -it vault-$i -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\n  kubectl exec -n vault -it vault-$i -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\n  kubectl exec -n vault -it vault-$i -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p\ndone\n
 3661* kubectl exec -n vault -it vault-0 -- vault operator raft list-peers\n
 3662* kubectl exec -n vault -it vault-2 -- curl -k https://vault-0.vault-internal.vault.svc.cluster.local:8200/v1/sys/health\n
 3663* kubectl get pods -n vault -o wide\n
 3664* kubectl edit certificate vault-certificate -n vault\n
 3665* kubectl rollout restart statefulset vault -n vault\n
 3666* kubectl delete pod vault-0 vault-1 vault-2 vault-3 vault-4 -n vault\n
 3667* for i in {0..4}; do\n  echo "Unsealing vault-$i"\n  kubectl exec -n vault -it vault-$i -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\n  kubectl exec -n vault -it vault-$i -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\n  kubectl exec -n vault -it vault-$i -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p\ndone\n
 3668* clear
 3669* kubectl port-forward -n vault svc/vault 8200:8200
 3670* k9s
 3671* kubectl describe certificate vault-certificate -n vault\n
 3672* clear
 3673* for i in {1..4}; do\n  kubectl exec -n vault -it vault-$i -- sh -c 'rm -rf /vault/data/*'\ndone\n
 3674* kubectl scale statefulset vault --replicas=0 -n vault\n
 3675* ssh -p 9052 ikay@10.150.55.103
 3676* clear
 3677* kubectl scale statefulset vault --replicas=1 -n vault\n
 3678* clear
 3679* kubectl exec -n vault -it vault-0 -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\nkubectl exec -n vault -it vault-0 -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\nkubectl exec -n vault-0 -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p\n
 3680* kubectl scale statefulset vault --replicas=0 -n vault\n
 3681* kubectl describe certificate vault-certificate -n vault\n
 3682* kubectl scale statefulset vault --replicas=1 -n vault\n
 3683* # Export the Token\nexport VAULT_TOKEN="hvs.NLJRIhXvZWgmXI1pCi2QvTcd"\n\n# Verify Vault Status\nvault status\n\n# Lookup Token\nvault token lookup\n\n# List Raft Peers\nvault operator raft list-peers\n\n# Check Connectivity\nfor i in {0..4}; do\n  kubectl exec -n vault -it vault-$i -- ping -c 4 10.156.136.6\ndone\n\n# List Raft Peers in All Nodes\nfor i in {0..4}; do\n  kubectl exec -n vault -it vault-$i -- vault operator raft list-peers\ndone\n\n# Restart Vault Pods if Necessary\nkubectl scale statefulset vault --replicas=0 -n vault\nsleep 60\nkubectl scale statefulset vault --replicas=5 -n vault\n
 3684* nection to pod\n(base) ➜  ikay kubectl port-forward -n vault svc/vault 8200:8200\n
 3685* \n(base) ➜  ikay kubectl port-forward -n vault svc/vault 8200:8200\n
 3686* kubectl port-forward -n vault svc/vault 8200:8200
 3687* kubectl scale statefulset vault --replicas=1 -n vault\n
 3688* clear
 3689* kubectl exec -n vault -it vault-0 -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\nkubectl exec -n vault -it vault-0 -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\nkubectl exec -n vault -it vault-0 -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p
 3690* clear
 3691* for ip in 10.156.136.8 10.156.136.9 10.156.136.10 10.156.136.11 10.156.136.12; do\n  kubectl exec -n vault -it vault-0 -- ping -c 4 $ip\ndone
 3692* kubectl exec -n vault -it vault-0 -- cat /vault/userconfig/vault-server-tls/tls.crt | openssl x509 -text -noout\n
 3693* clear
 3694* for ip in 10.156.136.8 10.156.136.9 10.156.136.10 10.156.136.11 10.156.136.12; do\n  kubectl exec -n vault -it vault-0 -- sh -c "curl -k https://$ip:8200/v1/sys/health"\ndone\n
 3695* for ip in 10.156.136.8 10.156.136.9 10.156.136.10 10.156.136.11 10.156.136.12; do\n  kubectl exec -n vault -it vault-0 -- sh -c "nc -zv $ip 8200"\ndone\n
 3696* for i in {0..4}; do\n  kubectl exec -n vault -it vault-0 -- sh -c "nslookup vault-$i.vault-internal.vault.svc.cluster.local"\ndone\n
 3697* clear
 3698* kubectl scale statefulset vault --replicas=5 -n vault\n
 3699* for i in {0..4}; do\n  kubectl exec -n vault -it vault-0 -- nslookup vault-$i.vault-internal.vault.svc.cluster.local\ndone\n
 3700* for ip in 10.156.136.8 10.156.136.9 10.156.136.10 10.156.136.11 10.156.136.12; do\n  kubectl exec -n vault -it vault-0 -- sh -c "nc -zv $ip 8200"\ndone\n
 3701* for ip in 10.156.136.2 10.156.136.7 10.156.136.8 10.156.136.9 10.156.136.12; do\n  kubectl exec -n vault -it vault-0 -- sh -c "nc -zv $ip 8200"\ndone\n
 3702* kubectl exec -n vault -it vault-0 -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\nkubectl exec -n vault -it vault-0 -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\nkubectl exec -n vault -it vault-0 -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p
 3703* for i in {0..4}; do\n  echo "Unsealing vault-$i"\n  kubectl exec -n vault -it vault-$i -- vault operator unseal o0v3jhN+t+5VPY8PpYPInhZk7Q2ExarasN62KchJBjPC\n  kubectl exec -n vault -it vault-$i -- vault operator unseal CnI2fgT6yg74Cr+hJitUP4ke3GJcs7yhbxgZtV1rkQoH\n  kubectl exec -n vault -it vault-$i -- vault operator unseal gOhwhSzBLbv2fKPPn4Bw5q55rCAJM/RAYNIBkaMWZJ2p\ndone\n
 3704* k9s
 3705* clear
 3706* for i in {0..4}; do\n  kubectl exec -n vault -it vault-0 -- nslookup vault-$i.vault-internal.vault.svc.cluster.local\ndone\n
 3707* clear
 3708* kubectl get pods -n vault -w\n
 3709* for i in {0..4}; do\n  kubectl exec -n vault -it vault-0 -- nslookup vault-$i.vault-internal.vault.svc.cluster.local\ndone\n
 3710* for ip in 10.156.136.8 10.156.136.9 10.156.136.10 10.156.136.11 10.156.136.12; do\n  kubectl exec -n vault -it vault-0 -- sh -c "nc -zv $ip 8200"\ndone\n
 3711* clear
 3712* for i in {0..4}; do\n  echo "Logs for vault-$i"\n  kubectl logs -n vault vault-$i\ndone\n
 3713* clear
 3714* kubectl exec -n vault -it vault-0 -- cat /vault/config/vault.hcl\n
 3715* clear
 3716* kubectl get networkpolicies -n vault\n
 3717* k describe netpol -n vault vault-network-policy
 3718* k describe netpol -n vault allow-all
 3719* clear
 3720* kubectl get psp\n
 3721* kubectl scale statefulset vault --replicas=1 -n vault\n
 3722* for i in {0..4}; do\n  kubectl exec -n vault -it vault-$i -- sh -c 'rm -rf /vault/data/*'\ndone\n
 3723* clear
 3724* kubectl scale statefulset vault --replicas=0 -n vault\n
 3725* ssh -p 9052 ikay@10.150.55.103
 3726  kubectl scale statefulset vault --replicas=1 -n vault\n
 3727  clear
 3728  kubectl exec -n vault -it vault-0 -- vault operator init\n
 3729  kubectl exec -n vault -it vault-0 -- vault operator unseal 1t8mrms/Ut80ioLUM/8TA6VDFOtsNwH0GMfv1zQqUsIs\nkubectl exec -n vault -it vault-0 -- vault operator unseal dwgjw/sScBkXRRCwoGLbH6SzGQ5zlYOK9jtm/a97h6ZJ\nkubectl exec -n vault -it vault-0 -- vault operator unseal j080/52uKDTZp0LW1MxoSaJ6k3BNH2YsHdjDxiohPhtQ
 3730  kubectl exec -n vault -it vault-0 -- vault login 
 3731  clear
 3732  kubectl scale statefulset vault --replicas=5 -n vault\n
 3733  for i in {1..4}; do\n  kubectl exec -n vault -it vault-$i -- vault operator raft join https://vault-0.vault-internal.vault.svc.cluster.local:8200\ndone\n
 3734* k9s
 3735* for i in {1..4}; do\n  kubectl exec -n vault -it vault-$i -- vault operator unseal 1t8mrms/Ut80ioLUM/8TA6VDFOtsNwH0GMfv1zQqUsIs\n  kubectl exec -n vault -it vault-$i -- vault operator unseal dwgjw/sScBkXRRCwoGLbH6SzGQ5zlYOK9jtm/a97h6ZJ\n  kubectl exec -n vault -it vault-$i -- vault operator unseal j080/52uKDTZp0LW1MxoSaJ6k3BNH2YsHdjDxiohPhtQ\ndone
 3736* clear
 3737* for i in {1..4}; do\n  kubectl exec -n vault -it vault-$i -- vault login -token=hvs.faw4jMYX2RtQgCKkewMbiE9q\ndone\n
 3738* clear
 3739* k9s
 3740* for i in {1..4}; do\n  kubectl exec -n vault -it vault-$i -- vault operator raft join https://vault-0.vault-internal.vault.svc.cluster.local:8200\ndone\n
 3741* kubectl exec -n vault -it vault-0 -- vault operator raft list-peers\n
 3742* k9s
 3743* cd helm-onprem/env/mtnrwanda-stage
 3744* cat vochub.yaml
 3745* clear
 3746* cat secrets.new.yaml
 3747  clear
 3748  k9s
 3749* clea
 3750* clear
 3751* k describe sa default-main
 3752* cat secrets.new.yaml
 3753* clear
 3754* mkdir-p PAM-Vault Integration
 3755* mkdir PAM-Vault Integration
 3756* cd PAM-Vault
 3757* mkdir -p $GOPATH/src/github.com/mtnrwanda/vault-plugin-secrets-beyondtrust\ncd $GOPATH/src/github.com/mtnrwanda/vault-plugin-secrets-beyondtrust\ngo mod init github.com/mtnrwanda/vault-plugin-secrets-beyondtrust\n
 3758* cd ..
 3759* rm -rf PAM-Vault Integration
 3760* mkdir -p ~/PAM-Vault/vault-plugin-secrets-beyondtrust\ncd ~/PAM-Vault/vault-plugin-secrets-beyondtrust\n
 3761* go mod init github.com/mtnrwanda/vault-plugin-secrets-beyondtrust\n
 3762* cat <<EOL > beyondtrust.go\npackage beyondtrust\n\nimport (\n    "context"\n    "github.com/hashicorp/vault/sdk/framework"\n    "github.com/hashicorp/vault/sdk/logical"\n)\n\ntype Backend struct {\n    *framework.Backend\n}\n\nfunc Factory(ctx context.Context, conf *logical.BackendConfig) (logical.Backend, error) {\n    b := Backend{}\n\n    b.Backend = &framework.Backend{\n        Help: "The BeyondTrust secrets backend for HashiCorp Vault",\n        Paths: framework.PathAppend(\n            // Define paths for secret retrieval and other operations\n            // E.g., pathList([]string{"secrets/*"}, b),\n        ),\n        BackendType: logical.TypeLogical,\n    }\n\n    if err := b.Setup(ctx, conf); err != nil {\n        return nil, err\n    }\n    return &b, nil\n}\nEOL\n
 3763* cat <<EOL > main.go\npackage main\n\nimport (\n    "github.com/hashicorp/vault/sdk/plugin"\n    "github.com/mtnrwanda/vault-plugin-secrets-beyondtrust"\n)\n\nfunc main() {\n    plugin.Serve(&plugin.ServeOpts{\n        BackendFactoryFunc: beyondtrust.Factory,\n    })\n}\nEOL\n
 3764* go build -o vault-plugin-secrets-beyondtrust\n
 3765* cd ../..
 3766* cd ..
 3767* clear
 3768* kubectl port-forward -n vault svc/vault 8200:8200
 3769* clear
 3770* go get github.com/hashicorp/vault/sdk/framework\ngo get github.com/hashicorp/vault/sdk/logical\ngo get github.com/hashicorp/vault/sdk/plugin\n
 3771* ls
 3772* sudo vi beyondtrust.go
 3773* sudo vi main.go
 3774* go build -o vault-plugin-secrets-beyondtrust
 3775* cleat
 3776* clear
 3777* cd ..
 3778* cd Vochub/Ikay
 3779* mkdir -p PAM-Vault/vault-plugin-secrets-beyondtrust/beyondtrust\nmv PAM-Vault/vault-plugin-secrets-beyondtrust/beyondtrust.go PAM-Vault/vault-plugin-secrets-beyondtrust/beyondtrust/\n
 3780* ls
 3781* clear
 3782* mkdir -p PAM-Vault/vault-plugin-secrets-beyondtrust/beyondtrust\n
 3783* mv PAM-Vault/vault-plugin-secrets-beyondtrust/beyondtrust.go PAM-Vault/vault-plugin-secrets-beyondtrust/beyondtrust/\n
 3784* cd PAM-Vault
 3785* LS
 3786* ls
 3787* cd vault-plugin-secrets-beyondtrust
 3788* ls
 3789* cd beyondtrust
 3790* ls
 3791* sudo vi beyondtrust.go\n
 3792* cd ..
 3793* sudo vi main.go
 3794* go mod init github.com/mtnrwanda/vault-plugin-secrets-beyondtrust\n
 3795* cd beyondtrust
 3796* sudo vi beyondtrust.go
 3797* cd ..
 3798* go get github.com/hashicorp/vault/sdk/framework\ngo get github.com/hashicorp/vault/sdk/logical\ngo get github.com/hashicorp/vault/sdk/plugin\ngo mod tidy\n
 3799* go build -o vault-plugin-secrets-beyondtrust\n
 3800* clear
 3801* ls
 3802* cd beyondtrust
 3803* ls
 3804* sudo vi beyondtrust.go
 3805* cd ..
 3806* go build -o vault-plugin-secrets-beyondtrust\n
 3807* ls
 3808* ssh -p 9052 ikay@10.150.55.103
 3809* sudo vi vault-plugin-pv.yaml
 3810* k apply -f vault-plugin-pv.yaml
 3811* cat mtnrw-override-values.yml
 3812* cleat
 3813* sudo vi vault-plugin-pv.yaml
 3814* k replace -f vault-plugin-pv.yaml --force
 3815* clear
 3816* sudo vi mtnrw-override-values.yml
 3817* k replace -f vault-plugin-pv.yaml --force
 3818* ssh -p 9052 ikay@10.150.55.103
 3819* helm upgrade --install vault hashicorp/vault --namespace vault -f mtnrw-override-values.yml
 3820* sudo vi mtnrw-override-values.yml
 3821* helm upgrade --install vault hashicorp/vault -f mtnrw-override-values.yml -n vault\n
 3822* sudo vi mtnrw-override-values.yml
 3823* sudo vi vault-plugin-pv.yaml
 3824* sudo vi mtnrw-override-values.yml
 3825* helm upgrade --install vault hashicorp/vault -f mtnrw-override-values.yml -n vault\n
 3826* sudo vi mtnrw-override-values.yml
 3827* helm upgrade --install vault hashicorp/vault -f mtnrw-override-values.yml -n vault\n
 3828* sudo vi mtnrw-override-values.yml
 3829* sudo vi vault-plugin-pv.yaml
 3830* sudo vi mtnrw-override-values.yml
 3831* helm upgrade --install vault hashicorp/vault -f mtnrw-override-values.yml -n vault\n
 3832* k get pvc -n vault
 3833* k get pvc 
 3834* clear
 3835* sudo vi pv-pvc-vault.yaml
 3836* sudo vi vault-plugin-pv.yaml
 3837* k replace -f pv-pvc-vault.yaml --force
 3838  k get pvc
 3839  k get pvc -n vault
 3840* k replace -f vault-plugin-pv.yaml --force
 3841  clear
