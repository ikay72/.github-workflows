apiVersion: v1
kind: ConfigMap
metadata:
  name: astra-nginx
data:
  nginx.conf: |
    user  nginx;

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;

    events {
        worker_connections  2048;
    }

    http {
        real_ip_header {{ .Values.nginx.realIP.header }};
        set_real_ip_from 0.0.0.0/0;
        access_log off;
        server_names_hash_bucket_size 128;

        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        sendfile        on;

        keepalive_timeout  0;

        gzip  on;

        upstream astra-uwsgi {
            server unix:///var/run/feedback/astra/uwsgi.sock;
        }

        server {
            listen 8080 default_server;
            server_name _;
            location /healthz {
                return 200;
                access_log off;
            }
            location /healthcheck {
                access_log off;
                include uwsgi_params;
                uwsgi_pass astra-uwsgi;
            }
        }

        {{ range .Values.enterprises }}
        server {
            listen 8080;
            server_name {{ .astrahost }} {{ .astrahost_alias }} {{ .surveyhost }} {{ .surveyhost_alias }};  {{/* This is not an error! */}}

            location /staticfiles {
                root /www;
                autoindex off;
            }

            location /digi_runner.js {
                alias /www/digi_runner.js;
            }

            {{- if .astrahost_disabled }}
            location / {
                return 503;
            }
            {{- else }}

            location / {
                include uwsgi_params;
                uwsgi_pass astra-uwsgi;
                uwsgi_param FEEDBACK_ENTERPRISE {{ .name }};
                uwsgi_param SSL_VERIFIED $ssl_client_verify;
                uwsgi_param SSL_CLIENT_SERIAL $ssl_client_serial;
                uwsgi_param SSL_CLIENT_CERT $ssl_client_cert;
                uwsgi_param SSL_USER_DN $ssl_client_s_dn;
            }
            {{- end }}
        }
        {{ end }}
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: astra-uwsgi
data:
  uwsgi.ini: |
    [uwsgi]
    strict = true
    master = true
    socket = /var/run/feedback/astra/uwsgi.sock
    pidfile = /var/run/uwsgi.pid
    if-not-env = ASTRA_UWSGI_NODAEMON
    daemonize = /var/log/feedback/astra-uwsgi.log
    endif =
    chmod-socket = 666
    uid=feedback
    gid=feedback
    processes = 20
    threads = 1
    harakiri = 60
    harakiri-verbose = 1
    buffer-size = 65535
    log-format = [%(ltime)] %(addr) - %(user) %(method) "%(uri)" %(proto) %(status) %(size) "%(var.HTTP_X_REQUEST_ID)"
    log-req-encoder = json {"message": ${msg}, "level": "INFO"}
    disable-logging = true
    vacuum = true
    wsgi-file = feedback_api/wsgi_astra.py
    honour-stdin = true
    procname = astra-uwsgi: worker process
    procname-master = astra-uwsgi: MASTER process
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: astra-logging
data:
  logging.yaml: |
    version: 1
    handlers:
      console:
        class: logging.StreamHandler
        level: DEBUG
        formatter: standard

    loggers:
      astra:
        handlers:
          - console
        level: DEBUG

    formatters:
      standard:
        format: "[%(asctime)s] %(levelname)s: %(message)s"
