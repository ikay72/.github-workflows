apiVersion: batch/v1
kind: CronJob
metadata:
  name: update-secrets
  namespace: default
spec:
  schedule: "0 0 * * *"  # Run daily at midnight
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: update-secrets
            image: python:3.8
            command: ["python", "/scripts/get_secrets.py"]
            env:
            - name: BEYONDTRUST_API_URL
              value: "https://rwrmpam1c.mtn.co.rw/api/v1"
            - name: CLIENT_ID
              value: "ikechuihe"
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: beyondtrust-credentials
                  key: client-secret
            - name: SECRET_ID
              value: "your-secret-id"
            volumeMounts:
            - name: script-volume
              mountPath: /scripts
          restartPolicy: OnFailure
          volumes:
          - name: script-volume
            configMap:
              name: get-secrets-script
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: get-secrets-script
  namespace: default
data:
  get_secrets.py: |
    import os
    import requests
    import logging

    logging.basicConfig(level=logging.INFO)

    api_url = os.getenv("BEYONDTRUST_API_URL")
    client_id = os.getenv("CLIENT_ID")
    client_secret = os.getenv("CLIENT_SECRET")
    secret_id = os.getenv("SECRET_ID")

    try:
        auth_response = requests.post(
            f"{api_url}/oauth2/token",
            data={"grant_type": "client_credentials"},
            auth=(client_id, client_secret),
            verify=True
        )
        auth_response.raise_for_status()
        access_token = auth_response.json()["access_token"]

        headers = {"Authorization": f"Bearer {access_token}"}
        secret_response = requests.get(
            f"{api_url}/secrets/{secret_id}",
            headers=headers,
            verify=True
        )
        secret_response.raise_for_status()
        secret_data = secret_response.json()

        logging.info("Secret retrieved successfully")

        # Process and store the secret data as needed

    except Exception as e:
        logging.error(f"Error retrieving secret: {e}")
        raise

